/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(13);
	var Router = __webpack_require__(14); // or var Router = ReactRouter; in browsers
	var Route = Router.Route;
	var RouteHandler = Router.RouteHandler;
	var Link = Router.Link;

	var Dashboard = __webpack_require__(1);
	var SequenceLibrary = __webpack_require__(2);
	var SequenceEditor2 = __webpack_require__(3);
	var SequenceEditor3 = __webpack_require__(4);
	var Skeleton = __webpack_require__(5);

	var Login = __webpack_require__(6);
	var Logout = __webpack_require__(7);
	var Authentication = __webpack_require__(8);
	var About = __webpack_require__(9);
	var auth = __webpack_require__(10);

	var baobabMixin = __webpack_require__(12).root;
	var baobabTree = __webpack_require__(11);

	var App = React.createClass({displayName: "App",

	  mixins: [baobabMixin],

	  contextTypes: {
	    router: React.PropTypes.func.isRequired
	  },

	  getInitialState: function () {
	    return {
	      loggedIn: auth.loggedIn()
	    };
	  },

	  setStateOnAuth: function (loggedIn) {
	    this.setState({
	      loggedIn: loggedIn
	    });
	  },

	  componentWillMount: function () {
	    auth.onChange = this.setStateOnAuth;
	    auth.login();
	  },

	  render: function () {
	    var loginOrOut = this.state.loggedIn ?
	      React.createElement(Link, {to: "logout"}, "Log out") :
	      React.createElement(Link, {to: "login"}, "Sign in");
	    return (
	      React.createElement("div", null, 
	        React.createElement("div", {style: {height:150,width:300}}), 
	        React.createElement(SequenceEditor2, null), 
	        React.createElement("header", null, 
	          React.createElement("ul", null, 
	            React.createElement("li", null, loginOrOut), 
	            React.createElement("li", null, React.createElement(Link, {to: "about"}, "About")), 
	            React.createElement("li", null, React.createElement(Link, {to: "dashboard"}, "Dashboard"))
	          )
	        ), 
	        React.createElement(RouteHandler, null)
	      )
	    );
	  }
	});
	            // <li><Link to="about">About</Link></li>
	            // <li><Link to="dashboard">Dashboard</Link></li>
	            // <li><Link to="sequences">Sequences</Link></li>
	            // <li><Link to="SequenceEditor2">SequenceEditor5</Link></li>

	var routes = (
	  React.createElement(Route, {handler: App}, 
	    React.createElement(Route, {path: "/login", name: "login", handler: Login}), 
	    React.createElement(Route, {path: "/logout", name: "logout", handler: Logout}), 
	    React.createElement(Route, {path: "/about", name: "about", handler: About}), 

	    React.createElement(Route, {path: "", name: "Skeleton", handler: Skeleton}, 
	      React.createElement(Route, {path: "/sequenceLibrary", name: "sequences", handler: SequenceLibrary}), 
	      React.createElement(Route, {path: "/dashboard", name: "dashboard", handler: Dashboard}), 
	      React.createElement(Route, {path: "/sequenceEditor2", name: "SequenceEditor2", handler: SequenceEditor2}), 
	      React.createElement(Route, {path: "/sequenceEditor3", name: "SequenceEditor3", handler: SequenceEditor3})
	    )
	  )
	);

	Router.run(routes, function (Handler) {
	  React.render(React.createElement(Handler, {tree: baobabTree}), document.body);
	});


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(13);
	var Authentication = __webpack_require__(8);
	var auth = __webpack_require__(10);


	var Dashboard = React.createClass({displayName: "Dashboard",
	  mixins: [ Authentication ],

	  render: function () {
	    var token = auth.getToken();
	    return (
	      React.createElement("div", null, 
	        "Dashboard", 
	        React.createElement("div", null, 
	            "Designs"
	        ), 
	        React.createElement("div", null, 
	            "Parts"
	        ), 
	        React.createElement("div", null, 
	            "Sequences"
	        ), 
	        React.createElement("div", null, 
	            "Strains"
	        ), 
	        React.createElement("p", null, token)
	      )
	      
	    );
	  }
	});

	module.exports = Dashboard;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(13);
	var fakedata = __webpack_require__(15);
	var SequenceLine = __webpack_require__(16);
	var Authentication = __webpack_require__(8);
	var auth = __webpack_require__(10);

	var exampleMetaData = [{
	  "columnName": "name",
	  "order": 9,
	  "locked": false,
	  "visible": true,
	  "displayName": "Employee Name"
	}, {
	  "columnName": "city",
	  "order": 8,
	  "locked": false,
	  "visible": true
	}, {
	  "columnName": "state",
	  "order": 7,
	  "locked": false,
	  "visible": true
	}, {
	  "columnName": "country",
	  "order": 6,
	  "locked": false,
	  "visible": true
	}, {
	  "columnName": "company",
	  "order": 5,
	  "locked": false,
	  "visible": true
	}, {
	  "columnName": "favoriteNumber",
	  "order": 4,
	  "locked": false,
	  "visible": true,
	  "displayName": "Favorite Number"
	}];

	var SequenceLibrary = React.createClass({displayName: "SequenceLibrary",
	  mixins: [ Authentication ],

	  render: function () {
	    return (
	      React.createElement("div", null, 
	          React.createElement(SequenceLine, null)
	      )
	    );
	  }
	});

	module.exports = SequenceLibrary;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(13);

	var RowView = __webpack_require__(17);
	var CHAR_WIDTH = __webpack_require__(18).CHAR_WIDTH;

	var mixin = __webpack_require__(12).branch;
	var Authentication = __webpack_require__(8);


	var SequenceEditor2 = React.createClass({displayName: "SequenceEditor2",
	  mixins: [mixin, Authentication],
	  // cursors: {
	  //   visibilityParameters: ['vectorEditorState', 'visibilityParameters'],
	  //   sequenceData: ['vectorEditorState', 'sequenceData'],
	  //   highlightLayer: ['vectorEditorState', 'highlightLayer'],
	  // },

	  render: function() {
	      // var visibilityParameters = this.state.visibilityParameters;
	      // var highlightLayer = this.state.highlightLayer;
	      // visibilityParameters.rowWidth = CHAR_WIDTH * visibilityParameters.bpsPerRow;
	 

	    return (
	      React.createElement("div", {style: {float:"right"}}, 
	        React.createElement(RowView, null)
	      )
	    );
	  }
	});

	module.exports = SequenceEditor2;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(13);

	var RowView = __webpack_require__(17);
	var CHAR_WIDTH = __webpack_require__(18).CHAR_WIDTH;

	var mixin = __webpack_require__(12).branch;
	var Authentication = __webpack_require__(8);


	var SequenceEditor3 = React.createClass({displayName: "SequenceEditor3",
	  mixins: [mixin, Authentication],
	  cursors: {
	    visibilityParameters: ['vectorEditorState', 'visibilityParameters'],
	    sequenceData: ['vectorEditorState', 'sequenceData'],
	    highlightLayer: ['vectorEditorState', 'highlightLayer'],
	  },

	  render: function() {
	      var visibilityParameters = this.state.visibilityParameters;
	      var highlightLayer = this.state.highlightLayer;
	      visibilityParameters.rowWidth = CHAR_WIDTH * visibilityParameters.bpsPerRow;


	    return (
	      React.createElement("div", null, 
	        React.createElement(RowView, React.__spread({},  visibilityParameters, {sequenceData: this.state.sequenceData, highlightLayer: this.state.highlightLayer}))
	      )
	    );
	  }
	});

	module.exports = SequenceEditor3;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(13);
	var Router = __webpack_require__(14); // or var Router = ReactRouter; in browsers
	var Route = Router.Route;
	var RouteHandler = Router.RouteHandler;
	var Link = Router.Link;

	var Dashboard = __webpack_require__(1);
	var SequenceLibrary = __webpack_require__(2);
	var SequenceEditor2 = __webpack_require__(3);
	var SequenceEditor3 = __webpack_require__(4);
	// var Skeleton = require('./Skeleton.js');

	var Login = __webpack_require__(6);
	var Logout = __webpack_require__(7);
	var Authentication = __webpack_require__(8);
	// var About = require('./About.js');
	// var auth = require('./auth.js');

	// var baobabMixin = require('baobab-react/mixins').root;
	// var baobabTree = require('./baobabTree');
	var mixin = __webpack_require__(12).branch;
	var appActions = __webpack_require__(19);



	// var RowItem = React.createClass({


	var Skeleton = React.createClass({displayName: "Skeleton",
	  mixins: [mixin, Authentication],

	  cursors: {
	    sequencesMegaStore: ['sequencesMegaStore'],
	    // sequenceData: ['vectorEditorState', 'sequenceData'],
	    // selectionLayer: ['vectorEditorState', 'selectionLayer'],
	    // mouse: ['vectorEditorState', 'mouse'],
	    // caretPosition: ['vectorEditorState', 'caretPosition'],
	  },


	  // contextTypes: {
	  //   router: React.PropTypes.func.isRequired
	  // },

	  // getInitialState: function () {
	  //   return {
	  //     loggedIn: auth.loggedIn()
	  //   };
	  // },

	  // setStateOnAuth: function (loggedIn) {
	  //   this.setState({
	  //     loggedIn: loggedIn
	  //   });
	  // },

	  // componentWillMount: function () {
	  //   auth.onChange = this.setStateOnAuth;
	  //   auth.login();
	  // },

	  render: function () {
	  // console.log(this.state.sequencesMegaStore);
	    return (
	      React.createElement("div", null, 
	        React.createElement("header", null, 
	          React.createElement("ul", null, 
	            React.createElement("li", null, React.createElement(Link, {to: "sequences"}, "My Sequences")), 
	            React.createElement("li", null, React.createElement(Link, {to: "sequences"}, "My Oligos")), 
	            React.createElement("li", null, React.createElement(Link, {to: "sequences"}, "My Parts")), 
	            React.createElement("li", null, React.createElement(Link, {to: "sequences"}, "My Designs")), 
	            React.createElement("li", null, React.createElement(Link, {to: "sequences"}, "My Designs")), 
	            React.createElement("li", null, React.createElement(Link, {to: "SequenceEditor2"}, "SequenceEditor2")), 
	            React.createElement("li", null, React.createElement(Link, {to: "SequenceEditor3"}, "SequenceEditor3"))
	          )
	        ), 
	        React.createElement(RouteHandler, null)
	      )
	    );
	  }
	});
	        // {this.state.sequencesMegaStore}

	module.exports = Skeleton;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(13);
	var auth = __webpack_require__(10);

	var Login = React.createClass({displayName: "Login",

	  contextTypes: {
	    router: React.PropTypes.func.isRequired
	  },

	  getInitialState: function () {
	    return {
	      error: false
	    };
	  },

	  handleSubmit: function (event) {
	    event.preventDefault();
	    var router = this.context.router;
	    var nextPath = router.getCurrentQuery().nextPath;
	    var email = this.refs.email.getDOMNode().value;
	    var pass = this.refs.pass.getDOMNode().value;
	    auth.login(email, pass, function (loggedIn) {
	      if (!loggedIn)
	        return this.setState({ error: true });

	      if (nextPath) {
	        router.replaceWith(nextPath);
	      } else {
	        router.replaceWith('/dashboard');
	      }
	    }.bind(this));
	  },

	  render: function () {
	    var errors = this.state.error ? React.createElement("p", null, "Bad login information") : '';
	    return (
	      React.createElement("form", {onSubmit: this.handleSubmit}, 
	        React.createElement("label", null, React.createElement("input", {ref: "email", placeholder: "email", defaultValue: "joe@example.com"})), 
	        React.createElement("label", null, React.createElement("input", {ref: "pass", placeholder: "password"})), " (hint: password1)", React.createElement("br", null), 
	        React.createElement("button", {type: "submit"}, "login"), 
	        errors
	      )
	    );
	  }
	});

	module.exports = Login;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(13);
	var auth = __webpack_require__(10);

	var Logout = React.createClass({displayName: "Logout",
	  componentDidMount: function () {
	    auth.logout();
	  },

	  render: function () {
	    return React.createElement("p", null, "You are now logged out");
	  }
	});

	module.exports = Logout;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var auth = __webpack_require__(10);
	var Authentication = {
	  statics: {
	    willTransitionTo: function (transition) {
	      var nextPath = transition.path;
	      if (!auth.loggedIn()) {
	        transition.redirect('/login',{},
	          { 'nextPath' : nextPath });
	      }
	    }
	  }
	};

	module.exports = Authentication;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(13);

	var About = React.createClass({displayName: "About",
	  render: function () {
	    return React.createElement("h1", null, "About me");
	  }
	});

	module.exports = About;



/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	//fake auth library
	// var pretendRequest = require('./pretendRequest');
	function pretendRequest(email, pass, cb) {

	  setTimeout(function () {
	    if (email === 'joe@example.com' && pass === 'password1') {
	      cb({
	        authenticated: true,
	        token: Math.random().toString(36).substring(7)
	      });
	    } else {
	      cb({authenticated: false});
	    }
	  }, 0);
	}

	var auth = {
	  login: function (email, pass, cb) {
	    cb = arguments[arguments.length - 1];
	    if (localStorage.token) {
	      if (cb) cb(true);
	      this.onChange(true);
	      return;
	    }
	    pretendRequest(email, pass, function (res) {
	      if (res.authenticated) {
	        localStorage.token = res.token;
	        if (cb) cb(true);
	        this.onChange(true);
	      } else {
	        if (cb) cb(false);
	        this.onChange(false);
	      }
	    }.bind(this));
	  },

	  getToken: function () {
	    return localStorage.token;
	  },

	  logout: function (cb) {
	    delete localStorage.token;
	    if (cb) cb();
	    this.onChange(false);
	  },

	  loggedIn: function () {
	    return !!localStorage.token;
	  },

	  onChange: function () {}
	};

	module.exports = auth;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var baobab = __webpack_require__(23);
	var sequenceData = __webpack_require__(20);
	var ObjectID = __webpack_require__(46);
	var prepareRowData = __webpack_require__(21);
	var computeRowRepresentationOfSequence = __webpack_require__(22);

	//tnr: this is used to generate a very large, fake, multi-featured sequence

	sequenceData.features = {};
	sequenceData.parts = {};

	// var string = "atgtgtgatg";
	// var reallyLongFakeSequence = "";
	// for (var i = 0; i < 10000; i++) {
	// 	reallyLongFakeSequence+=string;
	// 	if (i%100 === 0) {

	// 		sequenceData.features[i] = {
	// 		            id: i,
	// 		            start: i,
	// 		            end: i+100,
	// 		            name: 'cooljim',
	// 		            color: 'green',
	// 		            topStrand: true,
	// 		            annotationType: "feature"
	// 		          };
	// 		}
	// };
	// sequenceData.sequence = reallyLongFakeSequence;

	// var fakeSequences = makeFakeSequences(20);
	// console.log(fakeSequences);

	// function makeFakeSequences (numberOfFakesSequencesToGenerate) {
	// 	var fakeSequences = {};
	// 	for (var i = 0; i < numberOfFakesSequencesToGenerate; i++) {
	// 		console.log(ObjectID().str);
	// 		fakeSequences[ObjectID().str] = sequenceData;
	// 	}
	// 	return fakeSequences;
	// 	console.log(fakeSequences); 
	// }


	var tree = new baobab({
		vectorEditorState: {
			topSpacerHeight: 0,
			bottomSpacerHeight:0,
			averageRowHeight: 100,
			// preloadBasepairStart: 300,
			CHAR_WIDTH: 15,
			preloadRowStart: 0,
			// preloadRowEnd: 9,
			showOrfs: true,
			showCutsites: true,
			showParts: true,
			showFeatures: true,
			showReverseSequence: true,
			viewportDimensions: {
				height: 500, //come back and make these dynamic
				width: 400
			},
			selectionLayer: {
				start: 0,
				end: 5,
				sequenceSelected: true,
			},
			mouse: {
				isDown: false,
				isSelecting: false,
			},
			caretPosition: 8,
			sequenceData: sequenceData,
		},
		// sequencesMegaStore: fakeSequences,
		partsMegaStore: { //
			//tnrtodo: make a fake part generator
		},
		designMegaStore: {
			//tnrtodo: make a fake design generator
		},
		assemblyMakerState: {
			
		},
	}, {
		facets: {
			bpsPerRow: {
				cursors: {
					viewportDimensionsWidth: ['vectorEditorState', 'viewportDimensions', 'width'],
					CHAR_WIDTH: ['vectorEditorState', 'CHAR_WIDTH'],
				},
				get: function (state) {
					return Math.floor(state.viewportDimensionsWidth/state.CHAR_WIDTH);
				}
			},
			sequenceLength: {
				cursors: {
					sequenceData: ['vectorEditorState','sequenceData'],
				},
				get: function (state) {
					return state.sequenceData.sequence ? state.sequenceData.sequence.length : 0;
				}
			},
			rowData: {
				cursors: {
					sequenceData: ['vectorEditorState','sequenceData'],
					// bpsPerRow: ['vectorEditorState','bpsPerRow'],
				},
				facets: {
					bpsPerRow: 'bpsPerRow',
				},
				get: function (state) {
					return prepareRowData(state.sequenceData, state.bpsPerRow);
				}
			}
		}
	});

	module.exports = tree;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(24);


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(25);


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.DefaultRoute = __webpack_require__(26);
	exports.Link = __webpack_require__(27);
	exports.NotFoundRoute = __webpack_require__(28);
	exports.Redirect = __webpack_require__(29);
	exports.Route = __webpack_require__(30);
	exports.ActiveHandler = __webpack_require__(31);
	exports.RouteHandler = exports.ActiveHandler;

	exports.HashLocation = __webpack_require__(32);
	exports.HistoryLocation = __webpack_require__(33);
	exports.RefreshLocation = __webpack_require__(34);
	exports.StaticLocation = __webpack_require__(35);
	exports.TestLocation = __webpack_require__(36);

	exports.ImitateBrowserBehavior = __webpack_require__(37);
	exports.ScrollToTopBehavior = __webpack_require__(38);

	exports.History = __webpack_require__(39);
	exports.Navigation = __webpack_require__(40);
	exports.State = __webpack_require__(41);

	exports.createRoute = __webpack_require__(42).createRoute;
	exports.createDefaultRoute = __webpack_require__(42).createDefaultRoute;
	exports.createNotFoundRoute = __webpack_require__(42).createNotFoundRoute;
	exports.createRedirect = __webpack_require__(42).createRedirect;
	exports.createRoutesFromReactChildren = __webpack_require__(43);

	exports.create = __webpack_require__(44);
	exports.run = __webpack_require__(45);

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var fakeData =
	    [{
	            "FQDN": "tim.asdada",
	            "serialize": {
	                "sequence": [
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a"
	                ],
	                "inData": {
	                    "needsRecalculateComplementSequence": true,
	                    "manualUpdateStarted": false,
	                    "reverseComplementSequence": [],
	                    "circular": true,
	                    "name": "asdada"
	                },
	                "features": [{
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 5,
	                            "start": 1
	                        }],
	                        "strand": 1,
	                        "end": 5,
	                        "start": 1,
	                        "index": 0,
	                        "type": "misc_feature",
	                        "name": "dasdas"
	                    }
	                }]
	            },
	            "sequenceFileName": "asdada.gb",
	            "partSource": "asdada",
	            "hash": "619b1e5d9760fbc03cad589a4e948a78a68897669baeb98c2cd6d2270b062d70",
	            "sequenceFileFormat": "Genbank",
	            "ve_metadata": "",
	            "size": 5,
	            "firstTimeImported": false,
	            "sequenceFileContent": "LOCUS       asdada                     5 bp    DNA     circular     19-MAY-2014\nFEATURES             Location/Qualifiers\n     misc_feature    1..5\n                     /label=\"dasdas\"\nORIGIN      \n        1 aaaaa     \n\n//",
	            "description": "",
	            "name": "asdada",
	            "__v": 0
	        },

	        /* 1 */
	        {
	            "FQDN": "tim.ssrA_tag_GFPuv",
	            "serialize": {
	                "sequence": [
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g"
	                ],
	                "inData": {
	                    "needsRecalculateComplementSequence": true,
	                    "manualUpdateStarted": false,
	                    "reverseComplementSequence": [
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c"
	                    ],
	                    "circular": false,
	                    "name": "ssrA_tag_GFPuv"
	                },
	                "features": [{
	                    "notes": [{
	                        "inData": {
	                            "quoted": true,
	                            "value": "21",
	                            "name": "vntifkey"
	                        }
	                    }],
	                    "inData": {
	                        "locations": [{
	                            "end": 33,
	                            "start": 1
	                        }],
	                        "strand": 1,
	                        "end": 33,
	                        "start": 1,
	                        "index": 0,
	                        "type": "misc_feature",
	                        "name": "ssrA tag"
	                    }
	                }, {
	                    "notes": [{
	                        "inData": {
	                            "quoted": true,
	                            "value": "4",
	                            "name": "vntifkey"
	                        }
	                    }],
	                    "inData": {
	                        "locations": [{
	                            "end": 33,
	                            "start": 1
	                        }],
	                        "strand": 1,
	                        "end": 33,
	                        "start": 1,
	                        "index": 1,
	                        "type": "CDS",
	                        "name": "GFPuv"
	                    }
	                }]
	            },
	            "sequenceFileName": "ssrA_tag_GFPuv.gb",
	            "partSource": "ssrA_tag_GFPuv",
	            "hash": "d59281c667e37854b84ad188ee2d9ce970a776ab1f0ecc7c86ffcef4ea10bfb4",
	            "sequenceFileFormat": "Genbank",
	            "ve_metadata": "",
	            "size": 33,
	            "firstTimeImported": false,
	            "sequenceFileContent": "LOCUS       ssrA_tag_GFPuv            33 bp    DNA     linear    02-JUN-2014\r\nFEATURES             Location/Qualifiers\r\n     misc_feature    0..33\r\n                     /label=\"ssrA tag\"\r\n                     /vntifkey=\"21\"\r\n     CDS             0..33\r\n                     /label=\"GFPuv\"\r\n                     /vntifkey=\"4\"\r\nORIGIN      \r\n        1 gcggcgaacg atgaaaacta tgcgctggcg gcg  \r\n//",
	            "description": "",
	            "name": "ssrA_tag_GFPuv",
	            "__v": 0
	        },

	        /* 2 */
	        {
	            "FQDN": "tim.asdad",
	            "serialize": {
	                "sequence": [
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "g"
	                ],
	                "inData": {
	                    "needsRecalculateComplementSequence": true,
	                    "manualUpdateStarted": false,
	                    "reverseComplementSequence": [
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t"
	                    ],
	                    "circular": true,
	                    "name": "asdad"
	                },
	                "features": [{
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 6,
	                            "start": 1
	                        }],
	                        "strand": 1,
	                        "end": 6,
	                        "start": 1,
	                        "index": 0,
	                        "type": "misc_feature",
	                        "name": "asdad"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 6,
	                            "start": 1
	                        }],
	                        "strand": 1,
	                        "end": 6,
	                        "start": 1,
	                        "index": 1,
	                        "type": "misc_feature",
	                        "name": "original sequence"
	                    }
	                }]
	            },
	            "sequenceFileName": "asdad.gb",
	            "partSource": "asdad",
	            "hash": "f1c03bb803a091c8d8229c0292f043ec311110676a9dbc98b07e72340bcfaa91",
	            "sequenceFileFormat": "Genbank",
	            "ve_metadata": "",
	            "size": 6,
	            "firstTimeImported": false,
	            "sequenceFileContent": "LOCUS       asdad                      6 bp    DNA     circular     29-MAY-2014\nFEATURES             Location/Qualifiers\n     misc_feature    1..6\n                     /label=\"asdad\"\n     misc_feature    1..6\n                     /label=\"original sequence\"\nORIGIN      \n        1 aagaag     \n\n//",
	            "description": "",
	            "name": "asdad",
	            "__v": 0
	        },

	        /* 3 */
	        {
	            "description": "",
	            "firstTimeImported": true,
	            "name": "theophylline_int",
	            "partSource": "theophylline_int",
	            "part_id": "",
	            "sequenceFileContent": "",
	            "sequenceFileFormat": "Genbank",
	            "sequenceFileName": "theophylline_int",
	            "serialize": {
	                "features": [{
	                    "inData": {
	                        "locations": [{
	                            "start": 79,
	                            "end": 108,
	                            "to": ".."
	                        }],
	                        "index": 0,
	                        "type": "misc_feature",
	                        "strand": 1,
	                        "name": "theophylline aptamer",
	                        "start": 79,
	                        "end": 108
	                    },
	                    "notes": [{
	                        "inData": {
	                            "name": "note",
	                            "value": "Geneious type: sequence variant",
	                            "quoted": true
	                        }
	                    }]
	                }, {
	                    "inData": {
	                        "locations": [{
	                            "start": 42,
	                            "end": 57,
	                            "to": ".."
	                        }],
	                        "index": 1,
	                        "type": "misc_feature",
	                        "strand": 1,
	                        "name": "SD2 compet",
	                        "start": 42,
	                        "end": 57
	                    },
	                    "notes": []
	                }, {
	                    "inData": {
	                        "locations": [{
	                            "start": 63,
	                            "end": 77,
	                            "to": ".."
	                        }],
	                        "index": 2,
	                        "type": "misc_feature",
	                        "strand": -1,
	                        "name": "SD2 anti",
	                        "start": 63,
	                        "end": 77
	                    },
	                    "notes": []
	                }, {
	                    "inData": {
	                        "locations": [{
	                            "start": 110,
	                            "end": 122,
	                            "to": ".."
	                        }],
	                        "index": 3,
	                        "type": "misc_feature",
	                        "strand": 1,
	                        "name": "anti bind",
	                        "start": 110,
	                        "end": 122
	                    },
	                    "notes": []
	                }, {
	                    "inData": {
	                        "locations": [{
	                            "start": 111,
	                            "end": 120,
	                            "to": ".."
	                        }],
	                        "index": 4,
	                        "type": "misc_feature",
	                        "strand": 1,
	                        "name": "SD2",
	                        "start": 111,
	                        "end": 120
	                    },
	                    "notes": []
	                }, {
	                    "inData": {
	                        "locations": [{
	                            "start": 9,
	                            "end": 15,
	                            "to": ".."
	                        }],
	                        "index": 5,
	                        "type": "misc_feature",
	                        "strand": 1,
	                        "name": "SD1",
	                        "start": 9,
	                        "end": 15
	                    },
	                    "notes": []
	                }, {
	                    "inData": {
	                        "locations": [{
	                            "start": 2,
	                            "end": 7,
	                            "to": ".."
	                        }],
	                        "index": 6,
	                        "type": "CDS",
	                        "strand": 1,
	                        "name": "Cit",
	                        "start": 2,
	                        "end": 7
	                    },
	                    "notes": []
	                }],
	                "inData": {
	                    "name": "theophylline_int",
	                    "circular": false
	                },
	                "sequence": "cgtccaggttgttggcatccaatcacaagcgccaggggtcggcaggatcgttgggtcaaaagacccaacgaacctgcgataccagcatcgtcttgatgcccttggcaggcaggttcgttgggaagttagcatgggagaac"
	            },
	            "size": 140,
	            "strain_id": "",
	            "ve_metadata": "",
	            "hash": "367c64fde14356e103dcf2103b8aca8bb70f349670cbbbf8af7ec67da18fd174",
	            "FQDN": "michael.theophylline_int"
	        },

	        /* 4 */
	        {
	            "FQDN": "kwilliams.pBbS8c-RFP",
	            "__v": 0,
	            "description": "",
	            "firstTimeImported": true,
	            "hash": "55749c539fbf08b8e0e1c5f070882a87e4475cf4c07cf4e8788cf3040723b314",
	            "name": "pBbS8c-RFP",
	            "partSource": "pBbS8c-RFP",
	            "sequenceFileContent": "LOCUS       pBbS8c-RFP              5213 bp    DNA     circular     19-MAY-2014\nFEATURES             Location/Qualifiers\n     promoter        1161..1188\n                     /label=\"pBAD promoter\"\n     protein_bind    1124..1162\n                     /label=\"Operator I2 and I1\"\n     misc_binding    1115..1128\n                     /label=\"CAP site\"\n     protein_bind    1072..1093\n                     /label=\"operator O1\"\n     protein_bind    914..931\n                     /label=\"operator O2\"\n     promoter        complement(1036..1064)\n                     /label=\"araC promoter\"\n     CDS             complement(7..885)\n                     /label=\"araC\"\n     RBS             1226..1245\n                     /label=\"RBS\"\n     terminator      1948..2076\n                     /label=\"dbl term\"\n     CDS             1246..1923\n                     /label=\"RFP\"\n     terminator      4307..4412\n                     /label=\"T0\"\n     rep_origin      complement(2078..4306)\n                     /label=\"pSC101**\"\n     misc_marker     complement(4428..5087)\n                     /label=\"CmR\"\nORIGIN      \n        1 gacgtcttat gacaacttga cggctacatc attcactttt tcttcacaac cggcacggaa\n       61 ctcgctcggg ctggccccgg tgcatttttt aaatacccgc gagaaataga gttgatcgtc\n      121 aaaaccaaca ttgcgaccga cggtggcgat aggcatccgg gtggtgctca aaagcagctt\n      181 cgcctggctg atacgttggt cctcgcgcca gcttaagacg ctaatcccta actgctggcg\n      241 gaaaagatgt gacagacgcg acggcgacaa gcaaacatgc tgtgcgacgc tggcgatatc\n      301 aaaattgctg tctgccaggt gatcgctgat gtactgacaa gcctcgcgta cccgattatc\n      361 catcggtgga tggagcgact cgttaatcgc ttccatgcgc cgcagtaaca attgctcaag\n      421 cagatttatc gccagcagct ccgaatagcg cccttcccct tgcccggcgt taatgatttg\n      481 cccaaacagg tcgctgaaat gcggctggtg cgcttcatcc gggcgaaaga accccgtatt\n      541 ggcaaatatt gacggccagt taagccattc atgccagtag gcgcgcggac gaaagtaaac\n      601 ccactggtga taccattcgc gagcctccgg atgacgaccg tagtgatgaa tctctcctgg\n      661 cgggaacagc aaaatatcac ccggtcggca aacaaattct cgtccctgat ttttcaccac\n      721 cccctgaccg cgaatggtga gattgagaat ataacctttc attcccagcg gtcggtcgat\n      781 aaaaaaatcg agataaccgt tggcctcaat cggcgttaaa cccgccacca gatgggcatt\n      841 aaacgagtat cccggcagca ggggatcatt ttgcgcttca gccatacttt tcatactccc\n      901 gccattcaga gaagaaacca attgtccata ttgcatcaga cattgccgtc actgcgtctt\n      961 ttactggctc ttctcgctaa ccaaaccggt aaccccgctt attaaaagca ttctgtaaca\n     1021 aagcgggacc aaagccatga caaaaacgcg taacaaaagt gtctataatc acggcagaaa\n     1081 agtccacatt gattatttgc acggcgtcac actttgctat gccatagcat ttttatccat\n     1141 aagattagcg gattctacct gacgcttttt atcgcaactc tctactgttt ctccataccc\n     1201 gtttttttgg gaattcaaaa gatcttttaa gaaggagata tacatatggc gagtagcgaa\n     1261 gacgttatca aagagttcat gcgtttcaaa gttcgtatgg aaggttccgt taacggtcac\n     1321 gagttcgaaa tcgaaggtga aggtgaaggt cgtccgtacg aaggtaccca gaccgctaaa\n     1381 ctgaaagtta ccaaaggtgg tccgctgccg ttcgcttggg acatcctgtc cccgcagttc\n     1441 cagtacggtt ccaaagctta cgttaaacac ccggctgaca tcccggacta cctgaaactg\n     1501 tccttcccgg aaggtttcaa atgggaacgt gttatgaact tcgaagacgg tggtgttgtt\n     1561 accgttaccc aggactcctc cctgcaagac ggtgagttca tctacaaagt taaactgcgt\n     1621 ggtaccaact tcccgtccga cggtccggtt atgcagaaaa aaaccatggg ttgggaagct\n     1681 tccaccgaac gtatgtaccc ggaagacggt gctctgaaag gtgaaatcaa aatgcgtctg\n     1741 aaactgaaag acggtggtca ctacgacgct gaagttaaaa ccacctacat ggctaaaaaa\n     1801 ccggttcagc tgccgggtgc ttacaaaacc gacatcaaac tggacatcac ctcccacaac\n     1861 gaagactaca ccatcgttga acagtacgaa cgtgctgaag gtcgtcactc caccggtgct\n     1921 taaggatcca aactcgagta aggatctcca ggcatcaaat aaaacgaaag gctcagtcga\n     1981 aagactgggc ctttcgtttt atctgttgtt tgtcggtgaa cgctctctac tagagtcaca\n     2041 ctggctcacc ttcgggtggg cctttctgcg tttataccta gggtacgggt tttgctgccc\n     2101 gcaaacgggc tgttctggtg ttgctagttt gttatcagaa tcgcagatcc ggcttcagcc\n     2161 ggtttgccgg ctgaaagcgc tatttcttcc agaattgcca tgattttttc cccacgggag\n     2221 gcgtcactgg ctcccgtgtt gtcggcagct ttgattcgat aagcagcatc gcctgtttca\n     2281 ggctgtctat gtgtgactgt tgagctgtaa caagttgtct caggtgttca atttcatgtt\n     2341 ctagttgctt tgttttactg gtttcacctg ttctattagg tgttacatgc tgttcatctg\n     2401 ttacattgtc gatctgttca tggtgaacag ctttgaatgc accaaaaact cgtaaaagct\n     2461 ctgatgtatc tatctttttt acaccgtttt catctgtgca tatggacagt tttccctttg\n     2521 atatgtaacg gtgaacagtt gttctacttt tgtttgttag tcttgatgct tcactgatag\n     2581 atacaagagc cataagaacc tcagatcctt ccgtatttag ccagtatgtt ctctagtgtg\n     2641 gttcgttgtt tttgcgtgag ccatgagaac gaaccattga gatcatactt actttgcatg\n     2701 tcactcaaaa attttgcctc aaaactggtg agctgaattt ttgcagttaa agcatcgtgt\n     2761 agtgtttttc ttagtccgtt atgtaggtag gaatctgatg taatggttgt tggtattttg\n     2821 tcaccattca tttttatctg gttgttctca agttcggtta cgagatccat ttgtctatct\n     2881 agttcaactt ggaaaatcaa cgtatcagtc gggcggcctc gcttatcaac caccaatttc\n     2941 atattgctgt aagtgtttaa atctttactt attggtttca aaacccattg gttaagcctt\n     3001 ttaaactcat ggtagttatt ttcaagcatt aacatgaact taaattcatc aaggctaatc\n     3061 tctatatttg ccttgtgagt tttcttttgt gttagttctt ttaataacca ctcataaatc\n     3121 ctcatagagt atttgttttc aaaagactta acatgttcca gattatattt tatgaatttt\n     3181 tttaactgga aaagataagg caatatctct tcactaaaaa ctaattctaa tttttcgctt\n     3241 gagaacttgg catagtttgt ccactggaaa atctcaaagc ctttaaccaa aggattcctg\n     3301 atttccacag ttctcgtcat cagctctctg gttgctttag ctaatacacc ataagcattt\n     3361 tccctactga tgttcatcat ctgagcgtat tggttataag tgaacgatac cgtccgttct\n     3421 ttccttgtag ggttttcaat cgtggggttg agtagtgcca cacagcataa aattagcttg\n     3481 gtttcatgct ccgttaagtc atagcgacta atcgctagtt catttgcttt gaaaacaact\n     3541 aattcagaca tacatctcaa ttggtctagg tgattttaat cactatacca attgagatgg\n     3601 gctagtcaat gataattact agtccttttc ccgggtgatc tgggtatctg taaattctgc\n     3661 tagacctttg ctggaaaact tgtaaattct gctagaccct ctgtaaattc cgctagacct\n     3721 ttgtgtgttt tttttgttta tattcaagtg gttataattt atagaataaa gaaagaataa\n     3781 aaaaagataa aaagaataga tcccagccct gtgtataact cactacttta gtcagttccg\n     3841 cagtattaca aaaggatgtc gcaaacgctg tttgctcctc tacaaaacag accttaaaac\n     3901 cctaaaggct taagtagcac cctcgcaagc tcgggcaaat cgctgaatat tccttttgtc\n     3961 tccgaccatc aggcacctga gtcgctgtct ttttcgtgac attcagttcg ctgcgctcac\n     4021 ggctctggca gtgaatgggg gtaaatggca ctacaggcgc cttttatgga ttcatgcaag\n     4081 gaaactaccc ataatacaag aaaagcccgt cacgggcttc tcagggcgtt ttatggcggg\n     4141 tctgctatgt ggtgctatct gactttttgc tgttcagcag ttcctgccct ctgattttcc\n     4201 agtctgacca cttcggatta tcccgtgaca ggtcattcag actggctaat gcacccagta\n     4261 aggcagcggt atcatcaaca ggcttacccg tcttactgtc cctagtgctt ggattctcac\n     4321 caataaaaaa cgcccggcgg caaccgagcg ttctgaacaa atccagatgg agttctgagg\n     4381 tcattactgg atctatcaac aggagtccaa gcgagctcga tatcaaatta cgccccgccc\n     4441 tgccactcat cgcagtactg ttgtaattca ttaagcattc tgccgacatg gaagccatca\n     4501 caaacggcat gatgaacctg aatcgccagc ggcatcagca ccttgtcgcc ttgcgtataa\n     4561 tatttgccca tggtgaaaac gggggcgaag aagttgtcca tattggccac gtttaaatca\n     4621 aaactggtga aactcaccca gggattggct gagacgaaaa acatattctc aataaaccct\n     4681 ttagggaaat aggccaggtt ttcaccgtaa cacgccacat cttgcgaata tatgtgtaga\n     4741 aactgccgga aatcgtcgtg gtattcactc cagagcgatg aaaacgtttc agtttgctca\n     4801 tggaaaacgg tgtaacaagg gtgaacacta tcccatatca ccagctcacc gtctttcatt\n     4861 gccatacgaa attccggatg agcattcatc aggcgggcaa gaatgtgaat aaaggccgga\n     4921 taaaacttgt gcttattttt ctttacggtc tttaaaaagg ccgtaatatc cagctgaacg\n     4981 gtctggttat aggtacattg agcaactgac tgaaatgcct caaaatgttc tttacgatgc\n     5041 cattgggata tatcaacggt ggtatatcca gtgatttttt tctccatttt agcttcctta\n     5101 gctcctgaaa atctcgataa ctcaaaaaat acgcccggta gtgatcttat ttcattatgg\n     5161 tgaaagttgg aacctcttac gtgccgatca acgtctcatt ttcgccagat atc\n\n//",
	            "sequenceFileFormat": "Genbank",
	            "sequenceFileName": "pBbS8c_RFP",
	            "serialize": {
	                "sequence": [
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c"
	                ],
	                "inData": {
	                    "needsRecalculateComplementSequence": false,
	                    "manualUpdateStarted": false,
	                    "reverseComplementSequence": [
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "c"
	                    ],
	                    "circular": true,
	                    "name": "pBbS8c-RFP"
	                },
	                "features": [{
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1188,
	                            "start": 1161
	                        }],
	                        "strand": 1,
	                        "end": 1188,
	                        "start": 1161,
	                        "index": 0,
	                        "type": "promoter",
	                        "name": "pBAD promoter"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1162,
	                            "start": 1124
	                        }],
	                        "strand": 1,
	                        "end": 1162,
	                        "start": 1124,
	                        "index": 1,
	                        "type": "protein_bind",
	                        "name": "Operator I2 and I1"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1128,
	                            "start": 1115
	                        }],
	                        "strand": 1,
	                        "end": 1128,
	                        "start": 1115,
	                        "index": 2,
	                        "type": "misc_binding",
	                        "name": "CAP site"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1093,
	                            "start": 1072
	                        }],
	                        "strand": 1,
	                        "end": 1093,
	                        "start": 1072,
	                        "index": 3,
	                        "type": "protein_bind",
	                        "name": "operator O1"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 931,
	                            "start": 914
	                        }],
	                        "strand": 1,
	                        "end": 931,
	                        "start": 914,
	                        "index": 4,
	                        "type": "protein_bind",
	                        "name": "operator O2"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1064,
	                            "start": 1036
	                        }],
	                        "strand": -1,
	                        "end": 1064,
	                        "start": 1036,
	                        "index": 5,
	                        "type": "promoter",
	                        "name": "araC promoter"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 885,
	                            "start": 7
	                        }],
	                        "strand": -1,
	                        "end": 885,
	                        "start": 7,
	                        "index": 6,
	                        "type": "CDS",
	                        "name": "araC"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1245,
	                            "start": 1226
	                        }],
	                        "strand": 1,
	                        "end": 1245,
	                        "start": 1226,
	                        "index": 7,
	                        "type": "RBS",
	                        "name": "RBS"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 2076,
	                            "start": 1948
	                        }],
	                        "strand": 1,
	                        "end": 2076,
	                        "start": 1948,
	                        "index": 8,
	                        "type": "terminator",
	                        "name": "dbl term"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1923,
	                            "start": 1246
	                        }],
	                        "strand": 1,
	                        "end": 1923,
	                        "start": 1246,
	                        "index": 9,
	                        "type": "CDS",
	                        "name": "RFP"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 4412,
	                            "start": 4307
	                        }],
	                        "strand": 1,
	                        "end": 4412,
	                        "start": 4307,
	                        "index": 10,
	                        "type": "terminator",
	                        "name": "T0"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 4306,
	                            "start": 2078
	                        }],
	                        "strand": -1,
	                        "end": 4306,
	                        "start": 2078,
	                        "index": 11,
	                        "type": "rep_origin",
	                        "name": "pSC101**"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 5087,
	                            "start": 4428
	                        }],
	                        "strand": -1,
	                        "end": 5087,
	                        "start": 4428,
	                        "index": 12,
	                        "type": "misc_marker",
	                        "name": "CmR"
	                    }
	                }]
	            },
	            "size": 5213,
	            "ve_metadata": ""
	        },

	        /* 5 */
	        {
	            "FQDN": "kwilliams.BMC_nterm_sig_pe",
	            "serialize": {
	                "sequence": [
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t"
	                ],
	                "inData": {
	                    "needsRecalculateComplementSequence": true,
	                    "manualUpdateStarted": false,
	                    "reverseComplementSequence": [
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t"
	                    ],
	                    "circular": false,
	                    "name": "BMC_nterm_sig_pe"
	                },
	                "features": [{
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 102,
	                            "start": 55
	                        }],
	                        "strand": 1,
	                        "end": 102,
	                        "start": 55,
	                        "index": 0,
	                        "type": "misc_feature",
	                        "name": "gly_ser_linker"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 102,
	                            "start": 1
	                        }],
	                        "strand": 1,
	                        "end": 102,
	                        "start": 1,
	                        "index": 1,
	                        "type": "CDS",
	                        "name": "GFPuv"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 54,
	                            "start": 4
	                        }],
	                        "strand": 1,
	                        "end": 54,
	                        "start": 4,
	                        "index": 2,
	                        "type": "misc_feature",
	                        "name": "Clostridium_BMC_sig_pep"
	                    }
	                }]
	            },
	            "sequenceFileName": "BMC_nterm_sig_pe.gb",
	            "partSource": "BMC_nterm_sig_pe",
	            "hash": "3cd38009cd5aba16cf3fcdeedcf7f918b6a379a6ece92902a1177b7b4ea2f1b2",
	            "sequenceFileFormat": "Genbank",
	            "ve_metadata": "",
	            "size": 102,
	            "firstTimeImported": false,
	            "sequenceFileContent": "LOCUS       BMC_nterm_sig_pe         102 bp    DNA     linear       26-FEB-2010\nDEFINITION  promoter seq from pBAD33.\nACCESSION   unknown\nSOURCE      null\n  ORGANISM  null\nFEATURES             Location/Qualifiers\n     misc_feature    55..102\n                     /label=\"gly_ser_linker\"\n     CDS             1..102\n                     /label=\"GFPuv\"\n     misc_feature    4..54\n                     /label=\"Clostridium_BMC_sig_pep\"\nORIGIN      \n        1 atggaaaata acgctttatt agaacaaata atcaatgaag ttttaaaaaa tatgggtggc\n       61 agtggtagcg ggagctcggg tggctcaggc tctggttcca gt \n\n//",
	            "description": "",
	            "name": "BMC_nterm_sig_pe",
	            "__v": 0
	        },

	        /* 6 */
	        {
	            "FQDN": "kwilliams.ccmN_nterm_sig_p",
	            "serialize": {
	                "sequence": [
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t"
	                ],
	                "inData": {
	                    "needsRecalculateComplementSequence": true,
	                    "manualUpdateStarted": false,
	                    "reverseComplementSequence": [
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t"
	                    ],
	                    "circular": false,
	                    "name": "ccmN_nterm_sig_p"
	                },
	                "features": [{
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 60,
	                            "start": 4
	                        }],
	                        "strand": 1,
	                        "end": 60,
	                        "start": 4,
	                        "index": 0,
	                        "type": "misc_feature",
	                        "name": "ccmN_sig_pep"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 108,
	                            "start": 61
	                        }],
	                        "strand": 1,
	                        "end": 108,
	                        "start": 61,
	                        "index": 1,
	                        "type": "misc_feature",
	                        "name": "gly_ser_linker"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 108,
	                            "start": 1
	                        }],
	                        "strand": 1,
	                        "end": 108,
	                        "start": 1,
	                        "index": 2,
	                        "type": "CDS",
	                        "name": "GFPuv"
	                    }
	                }]
	            },
	            "sequenceFileName": "ccmN_nterm_sig_p.gb",
	            "partSource": "ccmN_nterm_sig_p",
	            "hash": "773803763349bcd53fbf415d473b8b23bfb2b9f23085a17a9a811c8692d323cb",
	            "sequenceFileFormat": "Genbank",
	            "ve_metadata": "",
	            "size": 108,
	            "firstTimeImported": false,
	            "sequenceFileContent": "LOCUS       ccmN_nterm_sig_p         108 bp    DNA     linear       26-FEB-2010\nDEFINITION  promoter seq from pBAD33.\nACCESSION   unknown\nSOURCE      null\n  ORGANISM  null\nFEATURES             Location/Qualifiers\n     misc_feature    4..60\n                     /label=\"ccmN_sig_pep\"\n     misc_feature    61..108\n                     /label=\"gly_ser_linker\"\n     CDS             1..108\n                     /label=\"GFPuv\"\nORIGIN      \n        1 atgaaggtct acggcaagga acagtttttg cggatgcgcc agagcatgtt ccccgatcgc\n       61 ggtggcagtg gtagcgggag ctcgggtggc tcaggctctg gttccagt \n\n//",
	            "description": "",
	            "name": "ccmN_nterm_sig_p",
	            "__v": 0
	        },

	        /* 7 */
	        {
	            "FQDN": "kwilliams.ssrA_tag_GFPuv",
	            "serialize": {
	                "sequence": [
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g"
	                ],
	                "inData": {
	                    "needsRecalculateComplementSequence": true,
	                    "manualUpdateStarted": false,
	                    "reverseComplementSequence": [
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c"
	                    ],
	                    "circular": false,
	                    "name": "ssrA_tag_GFPuv"
	                },
	                "features": [{
	                    "notes": [{
	                        "inData": {
	                            "quoted": true,
	                            "value": "21",
	                            "name": "vntifkey"
	                        }
	                    }],
	                    "inData": {
	                        "locations": [{
	                            "end": 33,
	                            "start": 1
	                        }],
	                        "strand": 1,
	                        "end": 33,
	                        "start": 1,
	                        "index": 0,
	                        "type": "misc_feature",
	                        "name": "ssrA tag"
	                    }
	                }, {
	                    "notes": [{
	                        "inData": {
	                            "quoted": true,
	                            "value": "4",
	                            "name": "vntifkey"
	                        }
	                    }],
	                    "inData": {
	                        "locations": [{
	                            "end": 33,
	                            "start": 1
	                        }],
	                        "strand": 1,
	                        "end": 33,
	                        "start": 1,
	                        "index": 1,
	                        "type": "CDS",
	                        "name": "GFPuv"
	                    }
	                }]
	            },
	            "sequenceFileName": "ssrA_tag_GFPuv.gb",
	            "partSource": "ssrA_tag_GFPuv",
	            "hash": "d59281c667e37854b84ad188ee2d9ce970a776ab1f0ecc7c86ffcef4ea10bfb4",
	            "sequenceFileFormat": "Genbank",
	            "ve_metadata": "",
	            "size": 33,
	            "firstTimeImported": false,
	            "sequenceFileContent": "LOCUS       ssrA_tag_GFPuv            33 bp ss-DNA     linear       26-FEB-2010\nDEFINITION  .\nSOURCE      .\n  ORGANISM  .\n            ApEinfo:methylated:1\n            http://www.invitrogen.com/\nFEATURES             Location/Qualifiers\n     misc_feature    1..33\n                     /vntifkey=\"21\"\n                     /label=\"ssrA tag\"\n     CDS             1..33\n                     /vntifkey=\"4\"\n                     /label=\"GFPuv\"\nORIGIN      \n        1 gcggcgaacg atgaaaacta tgcgctggcg gcg  \n\n//",
	            "description": "",
	            "name": "ssrA_tag_GFPuv",
	            "__v": 0
	        },

	        /* 8 */
	        {
	            "FQDN": "kwilliams.pj5_00001",
	            "serialize": {
	                "sequence": [
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "a",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "t",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "t",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "a",
	                    "g",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "g",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "g",
	                    "c",
	                    "t",
	                    "c",
	                    "c",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "c",
	                    "g",
	                    "g",
	                    "t",
	                    "a",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "g",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "g",
	                    "t",
	                    "t",
	                    "g",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "c",
	                    "t",
	                    "c",
	                    "t",
	                    "t",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "g",
	                    "c",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "c",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "t",
	                    "c",
	                    "t",
	                    "c",
	                    "a",
	                    "t",
	                    "t",
	                    "t",
	                    "t",
	                    "c",
	                    "g",
	                    "c",
	                    "c",
	                    "a",
	                    "g",
	                    "a",
	                    "t",
	                    "a",
	                    "t",
	                    "c"
	                ],
	                "inData": {
	                    "needsRecalculateComplementSequence": false,
	                    "manualUpdateStarted": false,
	                    "reverseComplementSequence": [
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "g",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "c",
	                        "t",
	                        "g",
	                        "c",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "a",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "c",
	                        "t",
	                        "c",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "t",
	                        "a",
	                        "t",
	                        "t",
	                        "t",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "c",
	                        "a",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "g",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "g",
	                        "a",
	                        "a",
	                        "t",
	                        "g",
	                        "a",
	                        "t",
	                        "g",
	                        "t",
	                        "a",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "g",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "a",
	                        "g",
	                        "a",
	                        "c",
	                        "g",
	                        "t",
	                        "c"
	                    ],
	                    "circular": true,
	                    "name": "pj5_00001"
	                },
	                "features": [{
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 885,
	                            "start": 7
	                        }],
	                        "strand": -1,
	                        "end": 885,
	                        "start": 7,
	                        "index": 0,
	                        "type": "CDS",
	                        "name": "araC"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 931,
	                            "start": 914
	                        }],
	                        "strand": 1,
	                        "end": 931,
	                        "start": 914,
	                        "index": 1,
	                        "type": "protein_bind",
	                        "name": "operator O2"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1064,
	                            "start": 1036
	                        }],
	                        "strand": -1,
	                        "end": 1064,
	                        "start": 1036,
	                        "index": 2,
	                        "type": "promoter",
	                        "name": "araC promoter"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1093,
	                            "start": 1072
	                        }],
	                        "strand": 1,
	                        "end": 1093,
	                        "start": 1072,
	                        "index": 3,
	                        "type": "protein_bind",
	                        "name": "operator O1"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1128,
	                            "start": 1115
	                        }],
	                        "strand": 1,
	                        "end": 1128,
	                        "start": 1115,
	                        "index": 4,
	                        "type": "misc_binding",
	                        "name": "CAP site"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1162,
	                            "start": 1124
	                        }],
	                        "strand": 1,
	                        "end": 1162,
	                        "start": 1124,
	                        "index": 5,
	                        "type": "protein_bind",
	                        "name": "Operator I2 and I1"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1188,
	                            "start": 1161
	                        }],
	                        "strand": 1,
	                        "end": 1188,
	                        "start": 1161,
	                        "index": 6,
	                        "type": "promoter",
	                        "name": "pBAD promoter"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1235,
	                            "start": 1216
	                        }],
	                        "strand": 1,
	                        "end": 1235,
	                        "start": 1216,
	                        "index": 7,
	                        "type": "RBS",
	                        "name": "RBS"
	                    }
	                }, {
	                    "notes": [{
	                        "inData": {
	                            "quoted": true,
	                            "value": "4",
	                            "name": "vntifkey"
	                        }
	                    }],
	                    "inData": {
	                        "locations": [{
	                            "end": 2018,
	                            "start": 1236
	                        }],
	                        "strand": 1,
	                        "end": 2018,
	                        "start": 1236,
	                        "index": 8,
	                        "type": "CDS",
	                        "name": "GFPuv"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1661,
	                            "start": 1661
	                        }],
	                        "strand": 1,
	                        "end": 1661,
	                        "start": 1661,
	                        "index": 9,
	                        "type": "misc_feature",
	                        "name": "XhoI_silent_mutation"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 1760,
	                            "start": 1760
	                        }],
	                        "strand": 1,
	                        "end": 1760,
	                        "start": 1760,
	                        "index": 10,
	                        "type": "misc_feature",
	                        "name": "BamHI_silent_mutation"
	                    }
	                }, {
	                    "notes": [{
	                        "inData": {
	                            "quoted": true,
	                            "value": "4",
	                            "name": "vntifkey"
	                        }
	                    }],
	                    "inData": {
	                        "locations": [{
	                            "end": 2015,
	                            "start": 1953
	                        }],
	                        "strand": 1,
	                        "end": 2015,
	                        "start": 1953,
	                        "index": 11,
	                        "type": "CDS",
	                        "name": "signal_peptide"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 2162,
	                            "start": 2034
	                        }],
	                        "strand": 1,
	                        "end": 2162,
	                        "start": 2034,
	                        "index": 12,
	                        "type": "terminator",
	                        "name": "dbl term"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 4392,
	                            "start": 2164
	                        }],
	                        "strand": -1,
	                        "end": 4392,
	                        "start": 2164,
	                        "index": 13,
	                        "type": "rep_origin",
	                        "name": "pSC101**"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 4498,
	                            "start": 4393
	                        }],
	                        "strand": 1,
	                        "end": 4498,
	                        "start": 4393,
	                        "index": 14,
	                        "type": "terminator",
	                        "name": "T0"
	                    }
	                }, {
	                    "notes": [],
	                    "inData": {
	                        "locations": [{
	                            "end": 5173,
	                            "start": 4514
	                        }],
	                        "strand": -1,
	                        "end": 5173,
	                        "start": 4514,
	                        "index": 15,
	                        "type": "misc_marker",
	                        "name": "CmR"
	                    }
	                }]
	            },
	            "sequenceFileName": "pj5_00001.gb",
	            "partSource": "pj5_00001",
	            "hash": "a33952b167c93f0249ed5a54d3fa34a3919ded0c661e61570a4713777e34e6dc",
	            "sequenceFileFormat": "Genbank",
	            "ve_metadata": "",
	            "size": 5299,
	            "firstTimeImported": false,
	            "sequenceFileContent": "LOCUS       pj5_00001               5299 bp    DNA     circular     13-JUN-2014\nFEATURES             Location/Qualifiers\n     CDS             complement(7..885)\n                     /label=\"araC\"\n     protein_bind    914..931\n                     /label=\"operator O2\"\n     promoter        complement(1036..1064)\n                     /label=\"araC promoter\"\n     protein_bind    1072..1093\n                     /label=\"operator O1\"\n     misc_binding    1115..1128\n                     /label=\"CAP site\"\n     protein_bind    1124..1162\n                     /label=\"Operator I2 and I1\"\n     promoter        1161..1188\n                     /label=\"pBAD promoter\"\n     RBS             1216..1235\n                     /label=\"RBS\"\n     CDS             1236..2018\n                     /label=\"GFPuv\"\n                     /vntifkey=\"4\"\n     misc_feature    1661..1661\n                     /label=\"XhoI_silent_mutation\"\n     misc_feature    1760..1760\n                     /label=\"BamHI_silent_mutation\"\n     CDS             1953..2015\n                     /label=\"signal_peptide\"\n                     /vntifkey=\"4\"\n     terminator      2034..2162\n                     /label=\"dbl term\"\n     rep_origin      complement(2164..4392)\n                     /label=\"pSC101**\"\n     terminator      4393..4498\n                     /label=\"T0\"\n     misc_marker     complement(4514..5173)\n                     /label=\"CmR\"\nORIGIN      \n        1 gacgtcttat gacaacttga cggctacatc attcactttt tcttcacaac cggcacggaa\n       61 ctcgctcggg ctggccccgg tgcatttttt aaatacccgc gagaaataga gttgatcgtc\n      121 aaaaccaaca ttgcgaccga cggtggcgat aggcatccgg gtggtgctca aaagcagctt\n      181 cgcctggctg atacgttggt cctcgcgcca gcttaagacg ctaatcccta actgctggcg\n      241 gaaaagatgt gacagacgcg acggcgacaa gcaaacatgc tgtgcgacgc tggcgatatc\n      301 aaaattgctg tctgccaggt gatcgctgat gtactgacaa gcctcgcgta cccgattatc\n      361 catcggtgga tggagcgact cgttaatcgc ttccatgcgc cgcagtaaca attgctcaag\n      421 cagatttatc gccagcagct ccgaatagcg cccttcccct tgcccggcgt taatgatttg\n      481 cccaaacagg tcgctgaaat gcggctggtg cgcttcatcc gggcgaaaga accccgtatt\n      541 ggcaaatatt gacggccagt taagccattc atgccagtag gcgcgcggac gaaagtaaac\n      601 ccactggtga taccattcgc gagcctccgg atgacgaccg tagtgatgaa tctctcctgg\n      661 cgggaacagc aaaatatcac ccggtcggca aacaaattct cgtccctgat ttttcaccac\n      721 cccctgaccg cgaatggtga gattgagaat ataacctttc attcccagcg gtcggtcgat\n      781 aaaaaaatcg agataaccgt tggcctcaat cggcgttaaa cccgccacca gatgggcatt\n      841 aaacgagtat cccggcagca ggggatcatt ttgcgcttca gccatacttt tcatactccc\n      901 gccattcaga gaagaaacca attgtccata ttgcatcaga cattgccgtc actgcgtctt\n      961 ttactggctc ttctcgctaa ccaaaccggt aaccccgctt attaaaagca ttctgtaaca\n     1021 aagcgggacc aaagccatga caaaaacgcg taacaaaagt gtctataatc acggcagaaa\n     1081 agtccacatt gattatttgc acggcgtcac actttgctat gccatagcat ttttatccat\n     1141 aagattagcg gattctacct gacgcttttt atcgcaactc tctactgttt ctccataccc\n     1201 gtttttttgg gaatttttaa gaaggagata tacatatgag taaaggagaa gaacttttca\n     1261 ctggagttgt cccaattctt gttgaattag atggtgatgt taatgggcac aaattttctg\n     1321 tcagtggaga gggtgaaggt gatgcaacat acggaaaact tacccttaaa tttatttgca\n     1381 ctactggaaa actacctgtt ccatggccaa cacttgtcac tactttctct tatggtgttc\n     1441 aatgcttttc ccgttatccg gatcatatga aacggcatga ctttttcaag agtgccatgc\n     1501 ccgaaggtta tgtacaggaa cgcactatat ctttcaaaga tgacgggaac tacaagacgc\n     1561 gtgctgaagt caagtttgaa ggtgataccc ttgttaatcg tatcgagtta aaaggtattg\n     1621 attttaaaga agatggaaac attctcggac acaaactcga atacaactat aactcacaca\n     1681 atgtatacat cacggcagac aaacaaaaga atggaatcaa agctaacttc aaaattcgcc\n     1741 acaacattga agatggatct gttcaactag cagaccatta tcaacaaaat actccaattg\n     1801 gcgatggccc tgtcctttta ccagacaacc attacctgtc gacacaatct gccctttcga\n     1861 aagatcccaa cgaaaagcgt gaccacatgg tccttcttga gtttgtaact gctgctggga\n     1921 ttacacatgg catggatgag ctcggcggcg gcggcagcaa ggtctacggc aaggaacagt\n     1981 ttttgcggat gcgccagagc atgttccccg atcgctaaat cgagtaagga tctccaggca\n     2041 tcaaataaaa cgaaaggctc agtcgaaaga ctgggccttt cgttttatct gttgtttgtc\n     2101 ggtgaacgct ctctactaga gtcacactgg ctcaccttcg ggtgggcctt tctgcgttta\n     2161 tacctagggt acgggttttg ctgcccgcaa acgggctgtt ctggtgttgc tagtttgtta\n     2221 tcagaatcgc agatccggct tcagccggtt tgccggctga aagcgctatt tcttccagaa\n     2281 ttgccatgat tttttcccca cgggaggcgt cactggctcc cgtgttgtcg gcagctttga\n     2341 ttcgataagc agcatcgcct gtttcaggct gtctatgtgt gactgttgag ctgtaacaag\n     2401 ttgtctcagg tgttcaattt catgttctag ttgctttgtt ttactggttt cacctgttct\n     2461 attaggtgtt acatgctgtt catctgttac attgtcgatc tgttcatggt gaacagcttt\n     2521 gaatgcacca aaaactcgta aaagctctga tgtatctatc ttttttacac cgttttcatc\n     2581 tgtgcatatg gacagttttc cctttgatat gtaacggtga acagttgttc tacttttgtt\n     2641 tgttagtctt gatgcttcac tgatagatac aagagccata agaacctcag atccttccgt\n     2701 atttagccag tatgttctct agtgtggttc gttgtttttg cgtgagccat gagaacgaac\n     2761 cattgagatc atacttactt tgcatgtcac tcaaaaattt tgcctcaaaa ctggtgagct\n     2821 gaatttttgc agttaaagca tcgtgtagtg tttttcttag tccgttatgt aggtaggaat\n     2881 ctgatgtaat ggttgttggt attttgtcac cattcatttt tatctggttg ttctcaagtt\n     2941 cggttacgag atccatttgt ctatctagtt caacttggaa aatcaacgta tcagtcgggc\n     3001 ggcctcgctt atcaaccacc aatttcatat tgctgtaagt gtttaaatct ttacttattg\n     3061 gtttcaaaac ccattggtta agccttttaa actcatggta gttattttca agcattaaca\n     3121 tgaacttaaa ttcatcaagg ctaatctcta tatttgcctt gtgagttttc ttttgtgtta\n     3181 gttcttttaa taaccactca taaatcctca tagagtattt gttttcaaaa gacttaacat\n     3241 gttccagatt atattttatg aattttttta actggaaaag ataaggcaat atctcttcac\n     3301 taaaaactaa ttctaatttt tcgcttgaga acttggcata gtttgtccac tggaaaatct\n     3361 caaagccttt aaccaaagga ttcctgattt ccacagttct cgtcatcagc tctctggttg\n     3421 ctttagctaa tacaccataa gcattttccc tactgatgtt catcatctga gcgtattggt\n     3481 tataagtgaa cgataccgtc cgttctttcc ttgtagggtt ttcaatcgtg gggttgagta\n     3541 gtgccacaca gcataaaatt agcttggttt catgctccgt taagtcatag cgactaatcg\n     3601 ctagttcatt tgctttgaaa acaactaatt cagacataca tctcaattgg tctaggtgat\n     3661 tttaatcact ataccaattg agatgggcta gtcaatgata attactagtc cttttcccgg\n     3721 gtgatctggg tatctgtaaa ttctgctaga cctttgctgg aaaacttgta aattctgcta\n     3781 gaccctctgt aaattccgct agacctttgt gtgttttttt tgtttatatt caagtggtta\n     3841 taatttatag aataaagaaa gaataaaaaa agataaaaag aatagatccc agccctgtgt\n     3901 ataactcact actttagtca gttccgcagt attacaaaag gatgtcgcaa acgctgtttg\n     3961 ctcctctaca aaacagacct taaaacccta aaggcttaag tagcaccctc gcaagctcgg\n     4021 gcaaatcgct gaatattcct tttgtctccg accatcaggc acctgagtcg ctgtcttttt\n     4081 cgtgacattc agttcgctgc gctcacggct ctggcagtga atgggggtaa atggcactac\n     4141 aggcgccttt tatggattca tgcaaggaaa ctacccataa tacaagaaaa gcccgtcacg\n     4201 ggcttctcag ggcgttttat ggcgggtctg ctatgtggtg ctatctgact ttttgctgtt\n     4261 cagcagttcc tgccctctga ttttccagtc tgaccacttc ggattatccc gtgacaggtc\n     4321 attcagactg gctaatgcac ccagtaaggc agcggtatca tcaacaggct tacccgtctt\n     4381 actgtcccta gtgcttggat tctcaccaat aaaaaacgcc cggcggcaac cgagcgttct\n     4441 gaacaaatcc agatggagtt ctgaggtcat tactggatct atcaacagga gtccaagcga\n     4501 gctcgatatc aaattacgcc ccgccctgcc actcatcgca gtactgttgt aattcattaa\n     4561 gcattctgcc gacatggaag ccatcacaaa cggcatgatg aacctgaatc gccagcggca\n     4621 tcagcacctt gtcgccttgc gtataatatt tgcccatggt gaaaacgggg gcgaagaagt\n     4681 tgtccatatt ggccacgttt aaatcaaaac tggtgaaact cacccaggga ttggctgaga\n     4741 cgaaaaacat attctcaata aaccctttag ggaaataggc caggttttca ccgtaacacg\n     4801 ccacatcttg cgaatatatg tgtagaaact gccggaaatc gtcgtggtat tcactccaga\n     4861 gcgatgaaaa cgtttcagtt tgctcatgga aaacggtgta acaagggtga acactatccc\n     4921 atatcaccag ctcaccgtct ttcattgcca tacgaaattc cggatgagca ttcatcaggc\n     4981 gggcaagaat gtgaataaag gccggataaa acttgtgctt atttttcttt acggtcttta\n     5041 aaaaggccgt aatatccagc tgaacggtct ggttataggt acattgagca actgactgaa\n     5101 atgcctcaaa atgttcttta cgatgccatt gggatatatc aacggtggta tatccagtga\n     5161 tttttttctc cattttagct tccttagctc ctgaaaatct cgataactca aaaaatacgc\n     5221 ccggtagtga tcttatttca ttatggtgaa agttggaacc tcttacgtgc cgatcaacgt\n     5281 ctcattttcg ccagatatc    \n\n//",
	            "description": "",
	            "name": "pj5_00001",
	            "__v": 0
	        },

	        /* 9 */
	        {
	            "FQDN": "kwilliams.ssrA_tag_enhance",
	            "serialize": {
	                "sequence": [
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "a",
	                    "a",
	                    "c",
	                    "g",
	                    "a",
	                    "t",
	                    "g",
	                    "a",
	                    "a",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "a",
	                    "a",
	                    "c",
	                    "t",
	                    "a",
	                    "t",
	                    "g",
	                    "c",
	                    "g",
	                    "c",
	                    "t",
	                    "g",
	                    "g",
	                    "c",
	                    "g",
	                    "g",
	                    "c",
	                    "g"
	                ],
	                "inData": {
	                    "needsRecalculateComplementSequence": true,
	                    "manualUpdateStarted": false,
	                    "reverseComplementSequence": [
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "a",
	                        "g",
	                        "c",
	                        "g",
	                        "c",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "a",
	                        "t",
	                        "a",
	                        "g",
	                        "t",
	                        "t",
	                        "t",
	                        "t",
	                        "c",
	                        "a",
	                        "t",
	                        "c",
	                        "g",
	                        "t",
	                        "t",
	                        "c",
	                        "g",
	                        "c",
	                        "c",
	                        "g",
	                        "c"
	                    ],
	                    "circular": false,
	                    "name": "ssrA_tag_enhance"
	                },
	                "features": [{
	                    "notes": [{
	                        "inData": {
	                            "quoted": true,
	                            "value": "21",
	                            "name": "vntifkey"
	                        }
	                    }],
	                    "inData": {
	                        "locations": [{
	                            "end": 39,
	                            "start": 1
	                        }],
	                        "strand": 1,
	                        "end": 39,
	                        "start": 1,
	                        "index": 0,
	                        "type": "misc_feature",
	                        "name": "ssrA tag enhanced"
	                    }
	                }, {
	                    "notes": [{
	                        "inData": {
	                            "quoted": true,
	                            "value": "4",
	                            "name": "vntifkey"
	                        }
	                    }],
	                    "inData": {
	                        "locations": [{
	                            "end": 39,
	                            "start": 1
	                        }],
	                        "strand": 1,
	                        "end": 39,
	                        "start": 1,
	                        "index": 1,
	                        "type": "CDS",
	                        "name": "GFPuv"
	                    }
	                }]
	            },
	            "sequenceFileName": "ssrA_tag_enhance.gb",
	            "partSource": "ssrA_tag_enhance",
	            "hash": "a141d77c6661640a4acdcc5f3627a9a16656e83dc73c43f9bdad15f75948d1ae",
	            "sequenceFileFormat": "Genbank",
	            "ve_metadata": "",
	            "size": 39,
	            "firstTimeImported": false,
	            "sequenceFileContent": "LOCUS       ssrA_tag_enhance          39 bp ss-DNA     linear       26-FEB-2010\nDEFINITION  .\nSOURCE      .\n  ORGANISM  .\n            ApEinfo:methylated:1\n            http://www.invitrogen.com/\nFEATURES             Location/Qualifiers\n     misc_feature    1..39\n                     /vntifkey=\"21\"\n                     /label=\"ssrA tag enhanced\"\n     CDS             1..39\n                     /vntifkey=\"4\"\n                     /label=\"GFPuv\"\nORIGIN      \n        1 gcggcgaacg atgaaaacta taactatgcg ctggcggcg  \n\n//",
	            "description": "",
	            "name": "ssrA_tag_enhance",
	            "__v": 0
	        }
	    ];
	module.exports = fakeData;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	//#deprecated
	var React = __webpack_require__(13);

	var fakedata = __webpack_require__(15);

	var exampleMetaData = [{
	  "columnName": "name",
	  "order": 9,
	  "locked": false,
	  "visible": true,
	  "displayName": "Employee Name"
	}, {
	  "columnName": "city",
	  "order": 8,
	  "locked": false,
	  "visible": true
	}, {
	  "columnName": "state",
	  "order": 7,
	  "locked": false,
	  "visible": true
	}, {
	  "columnName": "country",
	  "order": 6,
	  "locked": false,
	  "visible": true
	}, {
	  "columnName": "company",
	  "order": 5,
	  "locked": false,
	  "visible": true
	}, {
	  "columnName": "favoriteNumber",
	  "order": 4,
	  "locked": false,
	  "visible": true,
	  "displayName": "Favorite Number"
	}];

	var SequenceLine = React.createClass({displayName: "SequenceLine",
	  render: function () {
	    return (
	      React.createElement("div", null, 
	        "SequenceLine"
	      )
	    );
	  }
	});

	module.exports = SequenceLine;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(13);
	var Draggable = __webpack_require__(50);
	var RowItem = __webpack_require__(47);
	var appActions = __webpack_require__(19);
	var arePositiveIntegers = __webpack_require__(48);
	// var InfiniteScrollContainer = require('./InfiniteScrollContainer');
	// var prepareRowData = require('./prepareRowData');
	var CHAR_WIDTH = __webpack_require__(18).CHAR_WIDTH;
	// var ReactList = require('react-list');
	var mixin = __webpack_require__(12).branch;

	var RowView = React.createClass({displayName: "RowView",
	  mixins: [mixin],
	  cursors: {
	    // visibilityParameters: ['vectorEditorState', 'visibilityParameters'],
	    preloadRowStart: ['vectorEditorState', 'preloadRowStart'],
	    averageRowHeight: ['vectorEditorState', 'averageRowHeight'],
	    viewportDimensions: ['vectorEditorState', 'viewportDimensions'],
	    preloadBasepairStart: ['vectorEditorState', 'preloadBasepairStart'],
	    selectionLayer: ['vectorEditorState', 'selectionLayer'],
	    caretPosition: ['vectorEditorState', 'caretPosition'],
	  },
	  facets: {
	    rowData: 'rowData',
	  },

	  // propTypes: {
	  //   preloadBasepairStart: React.PropTypes.number.isRequired,
	  //   viewportDimensions: React.PropTypes.object.isRequired,
	  // },
	  // getDefaultProps: function() {
	  //   return {
	  //     preloadBasepairStart: 150, //start the loading of the sequence with this basepair
	  //     viewportDimensions: {
	  //       height: 700,
	  //       width: 400
	  //     },
	  //   };
	  // }, 
	  onScroll: function (event) {
	    if (this.scollerBeingDragged) return; //don't handle the onScroll event because the user is dragging

	    //the basic idea of the scroll is to add a row below if the third row element goes out of view
	    //and to add a row above if the third row element comes into view 
	    //(we use the third element so we have a buffer of 2 rows above that are preloaded..)
	    //after the new row is added, we manually need to set the scrollOffset of the infinite container 
	    //so that the newly added row doesn't change the positions of the already existing rows on the screen
	    //The logic for this is done in componentWillUpdate and componentDidUpdate

	    var infiniteContainer = event.currentTarget;
	    var thirdRowElement = infiniteContainer.childNodes[2]; 
	    
	    // console.log(infiniteContainer.scrollTop);
	    if ((thirdRowElement.offsetTop - infiniteContainer.offsetTop + thirdRowElement.scrollHeight) < infiniteContainer.scrollTop) {
	      //scrolling down, so add a row below
	      // console.log('//scrolling down, so add a row below');
	      if (this.preloadRowEnd < this.state.rowData.length) {
	        this.prepareVisibleRows(this.state.preloadRowStart + 1);
	      }
	      // this.thirdRowElement = thirdRowElement;
	      // this.thirdRowElementScrollHeight = thirdRowElement.scrollHeight;
	      this.scrollingUp = false;
	    } else if (thirdRowElement.offsetTop - infiniteContainer.offsetTop > infiniteContainer.scrollTop) {
	      if (this.state.preloadRowStart > 0) {
	        this.prepareVisibleRows(this.state.preloadRowStart - 1);
	      }
	      // this.thirdRowElement = thirdRowElement;
	      // this.thirdRowElementScrollHeight = thirdRowElement.scrollHeight;
	      this.scrollingUp = true;
	      // console.log('//scrolling up, so add a row above');
	    } else {
	      //we haven't scrolled enough, so do nothing
	    }
	  },

	  componentWillUpdate: function(argument) {
	    //save a reference to the thirdRowElement and its offset from the top of the container
	    var infiniteContainer = React.findDOMNode(this.refs.infiniteContainer);
	    this.thirdRowElement = infiniteContainer.children[2];
	    this.thirdRowElementOldOffsetTop = this.thirdRowElement.offsetTop;
	    if (this.scollerBeingDragged) {
	      this.updateTriggeredByScrollerDrag = true;
	    } else {
	      this.updateTriggeredByScrollerDrag = false;
	    }
	  },

	  componentDidUpdate: function(argument) {
	    var infiniteContainer = React.findDOMNode(this.refs.infiniteContainer);
	    
	    //if there is no thirdRowElement, we've probably scrolled too far away
	    if (this.updateTriggeredByScrollerDrag) {

	    } else {
	      console.log('hit!');
	      if (this.thirdRowElement) { 
	        // console.log('thirdRowElement Found');
	        //there is a thirdRowElement, so we want to make sure its screen position hasn't changed
	        var infiniteContainer = React.findDOMNode(this.refs.infiniteContainer);
	        var adjustInfiniteContainerByThisAmount = this.thirdRowElement.offsetTop - this.thirdRowElementOldOffsetTop;
	        infiniteContainer.scrollTop = infiniteContainer.scrollTop + adjustInfiniteContainerByThisAmount;
	      }
	    }
	    console.log('infiniteContainer.clientHeight: ' + infiniteContainer.clientHeight);
	    console.log('this.state.viewportDimensions.height: ' + this.state.viewportDimensions.height);
	    var bottomOfInfiniteContainer = infiniteContainer.getBoundingClientRect().bottom;
	    var bottomOfLastRow = infiniteContainer.children[infiniteContainer.children.length-1].getBoundingClientRect().bottom;
	    var bottomOfThirdRow = infiniteContainer.children[3].getBoundingClientRect().bottom;
	    console.log('bottomOfLastRow: ' + bottomOfLastRow);
	    console.log('bottomOfInfiniteContainer: ' + bottomOfInfiniteContainer);
	    // debugger;
	    if (bottomOfLastRow - bottomOfThirdRow <= bottomOfInfiniteContainer) {
	      //we need to add another row below!
	      console.log('this.preloadRowEnd:'+this.preloadRowEnd);
	      this.prepareVisibleRows(this.state.preloadRowStart, this.numberOfRowsToDisplay+1);
	    }
	  },

	  componentWillMount: function (argument) {
	    this.alreadyPreparedRows = {};
	    this.prepareVisibleRows(this.state.preloadRowStart);
	  },

	  componentDidMount: function (argument) {
	    this.componentDidUpdate();
	    // //tnr, instead of finding the dom nodes and performing calculations, we can add 
	    // //a variable to the state/props to determine if we need to scroll down
	    // var infiniteContainer = React.findDOMNode(this.refs.infiniteContainer);
	    // console.log('infiniteContainer.clientHeight: ' + infiniteContainer.clientHeight);
	    // console.log('this.state.viewportDimensions.height: ' + this.state.viewportDimensions.height);
	    // if (infiniteContainer.clientHeight < this.state.viewportDimensions.height) {
	    //   //we need to add another row below!
	    //   console.log('this.preloadRowEnd:'+this.preloadRowEnd);
	    //   this.prepareVisibleRows(this.state.preloadRowStart, this.preloadRowEnd++);
	    // }
	    // // var heightOfTopSpacer = React.findDOMNode(this.refs.topSpacer).scrollHeight;
	    // // if (heightOfTopSpacer > 0) {
	    //   var thirdRowElement = infiniteContainer.children[2].scrollIntoView();
	    // // }
	  },

	  prepareVisibleRows: function (rowStart, newNumberOfRowsToDisplay) { //note, rowEnd is optional
	    if (!arePositiveIntegers(rowStart)) {
	      return;
	      console.warn('non-integer value passed to prepareVisibleRows');
	    }

	    if (arePositiveIntegers(newNumberOfRowsToDisplay)){
	      this.numberOfRowsToDisplay = newNumberOfRowsToDisplay;
	    } 
	    if (!this.numberOfRowsToDisplay) {
	      // var rowsThatFitIntoViewport = Math.ceil(this.state.viewportDimensions.height / this.state.averageRowHeight);

	      // // console.log('rowsThatFitIntoViewport');
	      // // console.log(rowsThatFitIntoViewport);
	      this.numberOfRowsToDisplay = 4;
	    }
	    this.preloadRowEnd = (rowStart + this.numberOfRowsToDisplay) < this.state.rowData.length ? (rowStart + this.numberOfRowsToDisplay) : this.state.rowData.length;
	    if (this.preloadRowEnd < this.state.rowData.length) {
	      var visibleRows = this.state.rowData.slice(rowStart, this.preloadRowEnd);
	      this.setState({
	        preloadRowStart: rowStart,
	        visibleRows: visibleRows,
	      });
	    }

	    // if (this.preloadRowEnd this.state.numberOfRowsToPreload)

	    
	  },

	  handleScrollbarDrag: function(event, ui) {
	    //the handle should map to an exact scroll position
	    //the very top of the drag mapping to the very top of the sequence and same for bottom
	    //any given set of row that has been loaded will have a number of positions they can take up
	    // var this.initialScrollerTop = this.refs.scroller.getDOMNode().getBoundingClientRect().top;
	    console.log('this.initialScrollerTop' + this.initialScrollerTop);
	    var infiniteContainerTop = this.refs.infiniteContainer.getDOMNode().getBoundingClientRect().top;
	    var distanceFromTop = ui.position.top + this.initialScrollerTop - infiniteContainerTop;
	    // var distanceFromTop = ui.position.top + this.initialScrollerTop - infiniteContainerTop;
	    console.log('ui.position.top: ' + ui.position.top);
	    console.log('distanceFromTop: ' + distanceFromTop);


	    var rowStart = Math.floor(distanceFromTop * this.state.rowData.length / this.state.viewportDimensions.height);
	    // console.log('rowStart just calculated :' + rowStart);
	    console.log('rowStart:' + rowStart);
	    if (rowStart < 0) {
	        rowStart = 0;
	    }
	    if (rowStart + this.state.visibleRows.length <= this.state.rowData.length && rowStart !== this.state.preloadRowStart) {
	      // console.log('prepareVisibleRows!');
	      
	      this.prepareVisibleRows(rowStart);
	    } 

	    


	    else {
	      // console.log('move smoothly!');
	      var infiniteContainer = this.refs.infiniteContainer.getDOMNode();
	      
	      var totalHeightOfInfiniteContainer = infiniteContainer.clientHeight;
	      var averageHeightOfVisibleRows = totalHeightOfInfiniteContainer/this.state.visibleRows.length;
	      var incrementToMoveInfinteContainerBy = this.state.rowData.length * averageHeightOfVisibleRows / this.state.viewportDimensions.height;
	      //user hasn't dragged far enough to get to a new row, so
	      //scroll the infinite container down or up a lil bit
	      infiniteContainer.scrollTop / 1;
	      // console.log('ui.node.offsetTop ' + ui.node.offsetTop);
	      var changeInScrollerPosition = ui.position.top - this.uiPositionTop;
	      // console.log('changeInScrollerPosition ' + changeInScrollerPosition);
	      this.uiPositionTop = ui.position.top;

	      // var adjustInfiniteContainerByThisAmount = changeInScrollerPosition * incrementToMoveInfinteContainerBy;
	      var adjustInfiniteContainerByThisAmount = changeInScrollerPosition * this.state.visibleRows.length * totalHeightOfInfiniteContainer / this.state.viewportDimensions.height;
	      // console.log('adjustInfiniteContainerByThisAmount:' + adjustInfiniteContainerByThisAmount);
	      infiniteContainer.scrollTop = infiniteContainer.scrollTop + adjustInfiniteContainerByThisAmount;
	    }
	  },
	  handleScrollbarDragStart: function(event, ui) {
	    this.uiPositionTop = ui.position.top;
	    this.initialScrollerTop = this.refs.scroller.getDOMNode().getBoundingClientRect().top;
	    this.scollerBeingDragged = true;
	  },

	  handleScrollbarDragStop: function(event, ui) {
	    this.scollerBeingDragged = false;
	  },

	  getNearestCursorPositionToMouseEvent: function(event) {
	    var rowNotFound = true;
	    var infiniteContainer = this.refs.infiniteContainer.getDOMNode();
	    //loop through all the rendered rows to see if the click event lands in one of them
	    for (var relativeRowNumber = 0; relativeRowNumber < infiniteContainer.childNodes.length; relativeRowNumber++) {
	      var rowDomNode = infiniteContainer.childNodes[relativeRowNumber];
	      // console.log('rowDomNode.getBoundingClientRect().top: ' + rowDomNode.getBoundingClientRect().top);
	      var boundingRowRect = rowDomNode.getBoundingClientRect();
	      if (event.clientY > boundingRowRect.top && event.clientY < boundingRowRect.top + boundingRowRect.height) {
	        //then the click is falls within this row
	        rowNotFound = false;
	        var row = this.state.visibleRows[relativeRowNumber];
	        if (event.clientX - boundingRowRect.left < 0) {
	          console.warn('this should never be 0...');
	          return row.start; //return the first bp in the row
	        } else {
	          var clickXPositionRelativeToRowContainer = event.clientX - boundingRowRect.left;
	          var numberOfBPsInFromRowStart = Math.floor((clickXPositionRelativeToRowContainer + CHAR_WIDTH/2) / CHAR_WIDTH);
	          var nearestBP = numberOfBPsInFromRowStart + row.start;
	          if (nearestBP > row.end + 1) {
	            nearestBP = row.end + 1;
	          }
	          return nearestBP;
	        }
	        break; //break the for loop early because we found the row the click event landed in
	      }
	    }
	    if (rowNotFound) {
	      console.warn('was not able to find the correct row');
	      //return the last bp index in the rendered rows
	      var lastOfRenderedRows = this.state.visibleRows[this.state.visibleRows.length - 1];
	      return lastOfRenderedRows.end;
	    }
	  },

	  onEditorClick: function(event) {
	    //if cursor position is different than the original position, reset the position and clear the selection
	    console.log('onclick!!');
	    var bp = this.getNearestCursorPositionToMouseEvent(event);
	    if (this.editorBeingDragged) {
	      //do nothing because the click was triggered by a drag event
	    } else {
	      appActions.setCursorPosition(bp);
	      appActions.setSelectionLayer(false);
	    }

	    // console.log('bp: ' + bp);
	  }, 

	  handleEditorDrag: function(event, ui) {
	    // console.log('dragging!');
	    this.editorBeingDragged = true;
	    var caretPositionOfDrag = this.getNearestCursorPositionToMouseEvent(event);
	    var start;
	    var end;
	    if (caretPositionOfDrag === this.fixedCursorPositionOnEditorDrag) {
	      appActions.setCursorPosition(caretPositionOfDrag);
	      appActions.setSelectionLayer(false);
	    } else {
	      if (caretPositionOfDrag>this.fixedCursorPositionOnEditorDrag) {
	        start = this.fixedCursorPositionOnEditorDrag;
	        end = caretPositionOfDrag - 1;
	      } else {
	        start = caretPositionOfDrag;
	        end = this.fixedCursorPositionOnEditorDrag - 1;
	        // console.log('this.state.selectionLayer.sequenceSelected '+this.state.selectionLayer.sequenceSelected)
	      }
	      appActions.setSelectionLayer(start, end);
	      appActions.setCursorPosition(-1);
	    }
	  },

	  handleEditorDragStart: function(event, ui) {
	    // console.log('drag start!');
	    // console.log('event: ' + event.target);
	    var caretPosition = this.getNearestCursorPositionToMouseEvent(event);
	    if (event.target.className === "cursor" && this.state.selectionLayer.sequenceSelected) {
	      if (this.state.selectionLayer.start === caretPosition) {
	        this.fixedCursorPositionOnEditorDrag = this.state.selectionLayer.end + 1; 
	        //plus one because the cursor position will be 1 more than the selectionLayer.end
	        //imagine selection from 
	        //0 1 2  <--possible cursor positions
	        // A T G 
	        //if A is selected, selection.start = 0, selection.end = 0
	        //so the caretPosition for the end of the selection is 1! 
	        //which is selection.end+1
	      } else {
	        this.fixedCursorPositionOnEditorDrag = this.state.selectionLayer.start;
	      }
	    } else {
	      this.fixedCursorPositionOnEditorDrag = caretPosition;
	      // console.log('caretPosition '+caretPosition)
	    }
	  },

	  handleEditorDragStop: function(event, ui) {
	    var self = this;
	    if (this.editorBeingDragged) { //check to make sure dragging actually occurred 
	      setTimeout(function (argument) { 
	        //we use setTimeout to put the call to change editorBeingDragged to false
	        //on the bottom of the event stack, thus the click event that is fired because of the drag
	        //will be able to check if editorBeingDragged and not trigger if it is
	        self.editorBeingDragged = false;
	      },0);
	    } else {
	      self.editorBeingDragged = false;
	    }
	  },

	  render: function () {
	    var self = this;
	    var rowItems = this.state.visibleRows.map(function(row) {
	      if (row) {
	        return(React.createElement(RowItem, {key: row.rowNumber, row: row}));
	      }
	    });

	    var infiniteContainerStyle = {
	      height: this.state.viewportDimensions.height,
	      width: this.state.viewportDimensions.width,
	      overflowY: "scroll",
	      float: "left",
	      paddingRight: "20px"
	    };
	    var scrollbarStyle = {
	      height: this.state.viewportDimensions.height,
	      width: 15,
	      top: 0,
	      right: 0,
	      position:"absolute",
	    };
	    var scrollerStyle = {
	      height: 50,
	      background: "black",
	      width: "100%",
	      position: "absolute",
	      top: scrollbarStyle.height*(this.state.preloadRowStart/this.state.rowData.length),
	    };

	    // var moveOnStartChange;
	    // if (this.scollerBeingDragged) {
	    //   // console.log('scollerBeingDragged');
	    //   moveOnStartChange = false; //set this to false because the user is dragging
	    //   // this.newScrollerStart = 0;
	    //   // scrollerStyle.top = this.initialTopOfScoller
	    // } else {
	      // console.log('newScrollerStart');
	      // moveOnStartChange = true; //set to true because user is scrolling (without dragging), and we want the scrollbar position to update
	      // this.newScrollerStart = scrollbarStyle.height*(this.state.preloadRowStart/this.state.rowData.length);
	    // }
	    // console.log('this.newScrollerStart:  ' + this.newScrollerStart);
	    return (
	      React.createElement("div", {style: {width: infiniteContainerStyle.width + scrollbarStyle.width, position: "relative"}}, 
	        React.createElement(Draggable, {
	            zIndex: 100, 
	            bounds: "parent", 
	            onDrag: this.handleEditorDrag, 
	            onStart: this.handleEditorDragStart, 
	            onStop: this.handleEditorDragStop
	            }, 
	          React.createElement("div", {style: {width: infiniteContainerStyle.width, overflowX:"hidden"}}, 
	            React.createElement("div", {
	              ref: "infiniteContainer", 
	              className: "infiniteContainer", 
	              style: infiniteContainerStyle, 
	              onScroll: this.onScroll, 
	              onClick: this.onEditorClick
	              }, 
	                rowItems
	            )
	          )
	        ), 
	        React.createElement("div", {ref: "infiniteContainer-scrollbar", className: "infiniteContainer-scrollbar", style: scrollbarStyle}, 
	          React.createElement(Draggable, {
	            axis: "y", 
	            zIndex: 100, 
	            onDrag: this.handleScrollbarDrag, 
	            onStart: this.handleScrollbarDragStart, 
	            onStop: this.handleScrollbarDragStop
	            }, 
	            React.createElement("span", null, 
	              React.createElement("div", {ref: "scroller", style: scrollerStyle}
	              )
	            )
	          )
	        )
	      )
	    );
	  }
	});



	            // <div ref="topSpacer" className="topSpacer" style={{height: this.state.topSpacerHeight}}/>
	            // <div ref="bottomSpacer" className="bottomSpacer" style={{height: this.state.bottomSpacerHeight}}/> 

	module.exports = RowView;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	//#deprecated
	var editorConstants = {
	  CHAR_WIDTH: 15,
	  CHAR_HEIGHT: 15,
	  // FONT_SIZE: 14,
	  ANNOTATION_HEIGHT: 15,

	  SPACE_BETWEEN_ANNOTATIONS: 3,
	};

	module.exports = editorConstants;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var tree = __webpack_require__(11);
	var arePositiveIntegers = __webpack_require__(48);

	var actions = {
		changeViewportSize: function (newSize) {
			console.log(newSize);
			// tree.select
			var viewportDimensions = tree.select('vectorEditorState', 'viewportDimensions');
			viewportDimensions.set(newSize);
		},
		setCursorPosition: function (newPosition) {
			tree.select('vectorEditorState', 'caretPosition').set(newPosition);
			// viewportDimensions.set(newSize);
		},
		setSelectionLayer: function (x1,x2) {
			if (arePositiveIntegers(x1,x2) && arguments.length === 2) {
				tree.select('vectorEditorState', 'selectionLayer').set({start: x1, end: x2, sequenceSelected: true});
			} else {
				tree.select('vectorEditorState', 'selectionLayer').set({start: -1, end: -1, sequenceSelected: false,});
			}
			// viewportDimensions.set(newSize);
		},
		setMouseIsDown: function (trueOrFalse) {
			tree.select('vectorEditorState', 'mouse', 'isDown').set(trueOrFalse);
			// viewportDimensions.set(newSize);
		},
		cancelSelection: function () {
			tree.select('vectorEditorState', 'selectionLayer').set({});
			// viewportDimensions.set(newSize);
		},
	};

	module.exports = actions;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var sequenceData = {
	        sequence: "agasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagagagasdgasdgasdgagagagasgagagag",
	        features: {
	          12312312455134: {
	            id: "12355134",
	            start: 0,
	            end: 26,
	            name: 'cooljim',
	            color: 'green',
	            topStrand: true,
	            annotationType: "feature"
	          },
	          123574144175134: {
	            id: "1235775134",
	            start: 5,
	            end: 4,
	            name: 'cooljim',
	            color: 'orange',
	            topStrand: false,
	            annotationType: "feature"
	          },
	          1235514141415134: {
	            id: "1235515134",
	            start: 45,
	            end: 5,
	            name: 'cooljim',
	            color: 'blue',
	            topStrand: true,
	            annotationType: "feature"
	          },
	          2212341234123412342: {
	            id: "222",
	            start: 24,
	            end: 53,
	            name: 'cooljim',
	            color: 'orange',
	            topStrand: true,
	            annotationType: "feature"
	          }
	        },
	        parts: {
	          12314414141434: {
	            id: "123141434",
	            start: 4,
	            end: 5,
	            name: 'cooljim',
	            color: 'pink',
	            topStrand: true,
	            annotationType: "part"
	          },
	          12311314141421334: {
	            id: "12311321334",
	            start: 45,
	            end: 5,
	            name: 'cooljim',
	            color: 'orange',
	            topStrand: true,
	            annotationType: "part"
	          },
	          12123141414134: {
	            id: "121234134",
	            start: 24,
	            end: 53,
	            name: 'cooljim',
	            color: 'orange',
	            topStrand: true,
	            annotationType: "part"
	          }
	        }
	      };

	      module.exports = sequenceData;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(53);
	var arePositiveIntegers = __webpack_require__(48);

	function prepareRowData(sequenceData, bpsPerRow) {
	  var sequenceLength = sequenceData.sequence.length;
	  var totalRows = Math.ceil(sequenceLength / bpsPerRow);
	  var rows = [];

	  var featuresToRowsMap = mapAnnotationsToRows(sequenceData.features, sequenceLength, bpsPerRow);
	  var partsToRowsMap = mapAnnotationsToRows(sequenceData.parts, sequenceLength, bpsPerRow);

	  for (var rowNumber = 0; rowNumber < totalRows; rowNumber++) {
	    var row = {};
	    row.rowNumber = rowNumber;
	    row.start = rowNumber * bpsPerRow;
	    row.end = (rowNumber + 1) * (bpsPerRow) - 1 < sequenceLength ? (rowNumber + 1) * (bpsPerRow) - 1 : sequenceLength-1;
	    row.sequence = sequenceData.sequence.slice(row.start, (row.end + 1));
	    row.features = featuresToRowsMap[rowNumber] ? featuresToRowsMap[rowNumber] : [];
	    row.parts = partsToRowsMap[rowNumber] ? partsToRowsMap[rowNumber] : [];
	    // row.cutsites = cutsitesToRowsMap[rowNumber];
	    rows[rowNumber] = row;
	  }
	  return rows;
	}


	function mapAnnotationsToRows(annotations, sequenceLength, bpsPerRow) {
	  var annotationsToRowsMap = {};
	  if (!annotations) {
	    console.warn("no annotations detected")
	  }

	  _.each(annotations, function(annotation) {
	    mapAnnotationToRows(annotation, sequenceLength, bpsPerRow, annotationsToRowsMap);
	  });
	  return annotationsToRowsMap;

	}

	function mapAnnotationToRows(annotation, sequenceLength, bpsPerRow, annotationsToRowsMap) {
	  if (!annotationsToRowsMap) {
	    console.warn("annotationsToRowsMap must be defined");
	    return {};
	  }
	  var ranges = splitRangeOnOrigin(annotation, sequenceLength);
	  ranges.forEach(function(range) {
	    // if (!isPositiveInteger(range.start)) {}
	    var startingRow = Math.floor(range.start / bpsPerRow);
	    var endingRow = Math.floor(range.end / bpsPerRow);
	    var numberOfRows = endingRow - startingRow + 1;
	    for (var rowNumber = 0; rowNumber < numberOfRows; rowNumber++) {
	      if (!annotationsToRowsMap[rowNumber]) {
	        annotationsToRowsMap[rowNumber] = [];
	      }
	      // var start;
	      // var end;
	      // var type;
	      //this logic should maybe be moved to the rendering of the features, parts, whatever..
	      //probably makes more sense to do it there because cutsites and other things aren't going to be concerned with
	      //the "type" of range.. so we shouldn't do it here where all annotation will have to perform calcs..
	      //could be done 
	      // if (rowNumber === startingRow ) {
	      //   start = range.start;
	      //   if (rowNumber === endingRow) { 
	      //     // annotation begins and ends on this row
	      //     end = range.end;
	      //     type = range.type;
	      //   } else {
	      //     // annotation begins but doesn't end on this row
	      //     end = rowNumber * bpsPerRow + bpsPerRow - 1;
	      //     type = range.type === "end" ? "middle" : "beginning"; //if the range.type is an "end", the type can't be a beginning
	      //   }
	      // } else {
	      //   start = rowNumber * bpsPerRow;
	      //   if (rowNumber === endingRow) {
	      //     end = range.end;

	      //   } else {
	      //     end = rowNumber * bpsPerRow + bpsPerRow - 1;
	      //     type = "middle";
	      //   }
	      // }

	      // if (rowNumber === startingRow) {
	      //   start = range.start;
	      // } else {
	      //   start = rowNumber * bpsPerRow;
	      // }
	      // if (rowNumber === endingRow) {
	      //   end = range.end;
	      // } else {
	      //   end = rowNumber * bpsPerRow + bpsPerRow - 1;
	      // }
	      // var end = rowNumber === endingRow ? range.end : rowNumber * bpsPerRow + bpsPerRow - 1;

	      var start = rowNumber === startingRow ? range.start : rowNumber * bpsPerRow;
	      var end = rowNumber === endingRow ? range.end : rowNumber * bpsPerRow + bpsPerRow - 1;

	      yOffset = calculateNecessaryYOffsetForAnnotationInRow(annotationsToRowsMap[rowNumber], {
	        start: start,
	        end: end,
	        id: annotation.id,
	      });

	      annotationsToRowsMap[rowNumber].push({
	        id: annotation.id,
	        annotation: annotation,
	        start: start,
	        end: end,
	        yOffset: yOffset,
	        rangeType: range.type, //either "beginning", "end" or "beginningAndEnd"
	      });
	    }
	  });
	  // return annotationsToRowsMap;
	}

	// 

	function calculateNecessaryYOffsetForAnnotationInRow(annotationsAlreadyAddedToRow, range) {
	  var blockedYOffsets = [];
	  //adjust the yOffset of the range being pushed in by checking its range against other ranges already in the row
	  _.each(annotationsAlreadyAddedToRow, function(comparisonRange) {

	    // don't push a blocked yOffset if the annotation id is the same as the annotation id of the range being added  
	    if (comparisonRange.id === range.id) {
	      //do nothing
	    } else {
	      //check for overlap with other annotations
	      //tnrtodo, abstract out the range comparison check to a helper function
	      if (range.start < comparisonRange.start) {
	        if (range.end < comparisonRange.start) {
	          //----llll
	          //--------cccc
	          //no overlap
	        } else {
	          //----llll
	          //-------cccc
	          //overlap
	          blockedYOffsets.push(comparisonRange.yOffset);
	        }
	      } else {
	        if (range.start > comparisonRange.end) {
	          //------llll
	          // -cccc
	          //no overlap
	        } else {
	          //-----llll
	          // -cccc
	          //overlap
	          blockedYOffsets.push(comparisonRange.yOffset);
	        }
	      }
	    }
	  });

	  var newYOffset = 1;
	  //sort and remove duplicates from the blockedYOffsets array
	  //then starting with newYOffset = 1, see if there is space for the location 
	  if (blockedYOffsets.length > 0) {
	    var sortedBlockedYOffsets = _.sortBy(blockedYOffsets, function(n) {
	      return n;
	    });
	    var sortedUniqueBlockedYOffsets = _.uniq(sortedBlockedYOffsets, true); //true here specifies that the array has already been sorted
	    var stillPotentiallyBlocked = true;
	    while (stillPotentiallyBlocked) {
	      //sortedUniqueBlockedYOffsets is an array starting with 1 eg. [1,2,4,5,6]
	      //so we loop through it using the index of newYOffset-1, and if there is a gap 
	      //in the array, we break the loop and that becomes our final newYOffset
	      if (sortedUniqueBlockedYOffsets[newYOffset - 1] !== newYOffset) {
	        //the newYOffset isn't blocked
	        stillPotentiallyBlocked = false;
	      } else {
	        //it is blocked
	        newYOffset++;
	      }
	    }
	  }
	  return newYOffset;
	}


	function splitRangeOnOrigin(range, sequenceLength) {
	  if (!arePositiveIntegers(range.start, range.end, sequenceLength)) {
	    console.error("invalid inputs!!");
	  }
	  var ranges = [];
	  if (range.start > range.end) {
	    ranges.push({
	      start: 0,
	      end: range.end,
	      type: "end",
	    });
	    ranges.push({
	      start: range.start,
	      end: sequenceLength - 1,
	      type: "beginning",
	    });
	  } else {
	    ranges.push({
	      start: range.start,
	      end: range.end,
	      type: "beginningAndEnd",
	    });
	  }
	  return ranges;
	}

	// function getOverlapOfRowWithAnnotationLocation(annotationLocation, annotation, row) {
	//   var overlap;
	//   if (annotationLocation.start < row.start) {
	//     if (annotationLocation.end < row.start) {
	//       //do nothing
	//     } else { //end of annotation intersects row
	//       if (annotationLocation.end < row.end) {
	//         overlap = {
	//           start: row.start,
	//           end: annotationLocation.end
	//         };
	//       } else {
	//         overlap = {
	//           start: row.start,
	//           end: row.end
	//         };
	//       }
	//     }
	//   } else { //annotationLocation.start >= row.start
	//     if (annotationLocation.start > row.end) {
	//       //do nothing
	//     } else { //annotationLocation.start <= row.end
	//       //start of annotation intersects row
	//       if (annotationLocation.end < row.end) {
	//         //annotation fully enclosed within row
	//         overlap = {
	//           start: annotationLocation.start,
	//           end: annotationLocation.end
	//         };
	//       } else {
	//         //annotation end greater than row end
	//         overlap = {
	//           start: annotationLocation.start,
	//           end: row.end
	//         };
	//       }
	//     }
	//   }
	//   if (overlap) {
	//     //get the overlap type
	//     if (overlap.start === annotation.start) {
	//       if (overlap.end === annotation.end) {
	//         overlap.type = "beginningAndEnd";
	//       } else {
	//         overlap.type = "beginning";
	//       }
	//     } else {
	//       if (overlap.end === annotation.end) {
	//         overlap.type = "end";
	//       } else {
	//         overlap.type = "middle";
	//       }
	//     }
	//     return overlap;
	//   }
	// }

	module.exports = prepareRowData;



	// function mapAnnotationsToRow(annotations, row, sequenceLength) {
	//   var annotationsInRow = {};
	//   var annotationYOffsetMax = 0; //
	//   //convert each anotation into 1 or 2 annotationLocations by spliiting on the origin.
	//   //for each location, add to the row any stetches of the location that overlap the row

	//   _.each(annotations, function(annotation) {
	//     var annotationLocations = splitRangeOnOrigin(annotation, sequenceLength, sequenceLength);
	//     var overlaps;
	//     annotationLocations.forEach(function(annotationLocation) {
	//       var overlap = getOverlapOfRowWithAnnotationLocation(annotationLocation, annotation, row);
	//       if (overlap) { //only if the annotationLocation overlaps with the row do we push anything in
	//         if (!overlaps) {
	//           overlaps = [];
	//         }
	//         overlaps.push(overlap);
	//       }
	//     });
	//     if (overlaps) {
	//       //calculate the yOffset for the new overlaps
	//       var yOffset = calculateNecessaryYOffsetForAnnotationInRow(annotationsInRow, overlaps);
	//       if (yOffset > annotationYOffsetMax) {
	//         annotationYOffsetMax = yOffset;
	//       }
	//       //add the annotation to the row
	//       var annotationId = annotation.id;
	//       annotationsInRow[annotationId] = {
	//         annotation: annotation,
	//         overlaps: overlaps,
	//         yOffset: yOffset
	//       };
	//     }
	//   }, this);
	//   return {
	//     annotations: annotationsInRow,
	//     annotationYOffsetMax: annotationYOffsetMax
	//   };
	// }

	// function splitAnnotationsOnOriginAndSortThem(annotations) {
	//   var startBPMap = {};
	//   var endBPMap = {};
	//   annotations.forEach(function(annotation) {
	//     annotationLocations = splitRangeOnOrigin(annotation, sequenceLength);
	//     annotationLocations.forEach(function(location) {
	//       if (!startBPMap[annotationLocation.start]) {
	//         //initialize the array if there isn't one already
	//         startBPMap[annotationLocation.start] = [];
	//       }
	//       //push the annotation into the array
	//       startBPMap[annotationLocation.start].push(annotation.id);
	//       if (!endBPMap[annotationLocation.end]) {
	//         //initialize the array if there isn't one already
	//         endBPMap[annotationLocation.end] = [];
	//       }
	//       //push the annotation into the array
	//       endBPMap[annotationLocation.end].push(annotation.id);
	//     });
	//   });
	// }

	// //assumes the range doesn't not span the origin!
	// function findAnnotationsThatFallWithinRangeBasedOnTheStartAndEndMaps(range, startBPMap, endBPMap) {
	//   var possibleHitsBasedOnStartValue = {};
	//   _.each(startBPMap, function(annotationIds, startBP) {
	//     if (startBP < range.end) {
	//       annotationIds.forEach(function(annotationId) {
	//         if (!possibleHitsBasedOnStartValue[annotationId]) {
	//           possibleHitsBasedOnStartValue[annotationId] = [];
	//         }
	//         possibleHitsBasedOnStartValue[annotationId].push(startBP);
	//       });
	//     }
	//   });

	//   var hitsBasedOnStartAndEndValues = {};
	//   _.each(endBPMap, function(annotationIds, endBP) {
	//     if (endBP > range.start) {
	//       annotationIds.forEach(function(annotationId) {
	//         if (possibleHitsBasedOnStartValue[annotationId]) {
	//           if (!hitsBasedOnStartAndEndValues[annotationId]) {
	//             hitsBasedOnStartAndEndValues[annotationId] = [];
	//             possibleHitsBasedOnStartValue[annotationId].forEach(function(start) {
	//               hitsBasedOnStartAndEndValues[annotationId].push(start);
	//             });
	//           }
	//           hitsBasedOnStartAndEndValues[annotationId].push(endBP);
	//           // hitsBasedOnStartAndEndValues[annotationId][0].end === null ? 
	//         }
	//       });
	//     }
	//   });

	//   _each(hitsBasedOnStartAndEndValues, function(annotationIds, arrayOfHits) {
	//     if (arrayOfHits.length === 2) {
	//       //normal hit [start,end]
	//       arrayOfHits = {
	//         start: arrayOfHits[0] > range.start ? arrayOfHits[0] : range.start,
	//         end: arrayOfHits[1] < range.end ? arrayOfHits[0] : range.end,
	//       };
	//     } else if (arrayOfHits.length === 3) {
	//       //special case [start1,start2,end]
	//       arrayOfHits = {
	//         start: arrayOfHits[0] > arrayOfHits[1] ? arrayOfHits[0] : arrayOfHits[1],
	//         end: arrayOfHits[2],
	//       };
	//     } else if (arrayOfHits.length === 4) {
	//       //special case [start1,start2,end1,end2]
	//       var start1;
	//       var start2;
	//       var end1;
	//       var end2;
	//       if (arrayOfHits[0] < arrayOfHits[1]) {
	//         start1 = arrayOfHits[0];
	//         start2 = arrayOfHits[1];
	//       } else {
	//         start1 = arrayOfHits[1];
	//         start2 = arrayOfHits[0];
	//       }
	//       if (arrayOfHits[2] < arrayOfHits[3]) { //sub in ends!
	//         end1 = arrayOfHits[2];
	//         end2 = arrayOfHits[3];
	//       } else {
	//         end1 = arrayOfHits[1];
	//         end2 = arrayOfHits[0];
	//       }
	//     }
	//   });

	// }

	// function calculateNecessaryYOffsetForAnnotationInRow(annotationsAlreadyAddedToRow, overlaps) {
	//   var blockedYOffsets = [];
	//   //adjust the yOffset of the location being pushed in by checking its range against other locations in the row
	//   _.each(annotationsAlreadyAddedToRow, function(comparisonAnnotation) {
	//     //loop through every location in the comparisonAnnotation (there is a max of two)
	//     //also note that locations cannot be circular
	//     comparisonAnnotation.overlaps.forEach(function(comparisonOverlap) {
	//       overlaps.forEach(function(overlap) {
	//         //check for overlap with other annotations
	//         if (overlap.start < comparisonOverlap.start) {
	//           if (overlap.end < comparisonOverlap.start) {
	//             //----llll
	//             //--------cccc
	//             //no overlap
	//           } else {
	//             //----llll
	//             //-------cccc
	//             //overlap
	//             blockedYOffsets.push(comparisonAnnotation.yOffset);
	//           }
	//         } else {
	//           if (overlap.start > comparisonOverlap.end) {
	//             //------llll
	//             // -cccc
	//             //no overlap
	//           } else {
	//             //-----llll
	//             // -cccc
	//             //overlap
	//             blockedYOffsets.push(comparisonAnnotation.yOffset);
	//           }
	//         }
	//       });

	//     });
	//   });

	//   var newYOffset = 1;
	//   //sort and remove duplicates from the blockedYOffsets array
	//   //then starting with newYOffset = 1, see if there is space for the location 
	//   if (blockedYOffsets.length > 0) {
	//     var sortedBlockedYOffsets = _.sortBy(blockedYOffsets, function(n) {
	//       return n;
	//     });
	//     var sortedUniqueBlockedYOffsets = _.uniq(sortedBlockedYOffsets, true); //true here specifies that the array has already been sorted
	//     var stillPotentiallyBlocked = true;
	//     while (stillPotentiallyBlocked) {
	//       //sortedUniqueBlockedYOffsets is an array starting with 1 eg. [1,2,4,5,6]
	//       //so we loop through it using the index of newYOffset-1, and if there is a gap 
	//       //in the array, we break the loop and that becomes our final newYOffset
	//       if (sortedUniqueBlockedYOffsets[newYOffset - 1] !== newYOffset) {
	//         //the newYOffset isn't blocked
	//         stillPotentiallyBlocked = false;
	//       } else {
	//         //it is blocked
	//         newYOffset++;
	//       }
	//     }
	//   }
	//   return newYOffset;
	// }

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(53);
	var getOverlapsOfPotentiallyCircularRanges = __webpack_require__(49);

	function computeNumberOfCharsThatFitInGivenViewportWidth (viewportDimensions, CHAR_WIDTH) {
	  return Math.floor(viewportDimensionsWidth/CHAR_WIDTH);
	}

	function computeRowRepresenationOfSequence(sequenceData, viewportDimensionsWidth, CHAR_WIDTH) {
	  debugger;
	  
	  var bpsPerRow = computeNumberOfCharsThatFitInGivenViewportWidth(viewportDimensionsWidth, CHAR_WIDTH);
	  var sequenceLength = sequenceData.sequence.length;
	  var numberOfRows = Math.ciel(sequenceLength/bpsPerRow);

	  //prepare the shell of the row
	  var rows = [];
	  for (var i = 0; i < numberOfRows; i++) {
	    var start = i*bpsPerRow;
	    var end = i*bpsPerRow+bpsPerRow;
	    if (end > sequenceLength-1) { //normalize the end value
	      end = sequenceLength-1;
	    }
	    var row = {
	      rowNumber: i,
	      start: start,
	      end: end,
	      sequence: sequenceData.slice(start,end),
	      features: {},
	      parts: {},
	      orfs: {},
	      cutsites: {},

	    };
	    rows[i] = row;
	  };

	  //add data from features, parts, orfs, cutsites, etc. to the row representation
	  sequenceData.features.forEach(function (annotation) {
	    mapAnnotationToRows(rows,annotation);
	  })

	  //return only the requested rows
	  return requestedRows;
	}

	function mapAnnotationToRows (rows,annotation, rowAnnotationGroup) {
	  rows.forEach(function (row) {
	    var overlaps = getOverlapsOfPotentiallyCircularRanges(row, annotation);
	    if (overlaps.length > 0) {
	      row.features[annotation.id] = {
	        overlaps:overlaps
	      };
	    }
	  });
	}

	function populateRowByRowNumber(sequenceData, bpsPerRow, rowNumber, sequenceLength) {
	  var row = {};
	  row.rowNumber = rowNumber;
	  row.start = rowNumber * bpsPerRow;
	  row.end = (rowNumber + 1) * (bpsPerRow) - 1;
	  row.sequence = sequenceData.sequence.slice(row.start, (row.end + 1));

	  // console.log('row.rowNumber');
	  // console.log(row.rowNumber);
	  // console.log('row.start');
	  // console.log(row.start);
	  // console.log('row.end');
	  // console.log(row.end);
	  // console.log('row.sequence');
	  // console.log(row.sequence);

	  var $__0=
	     
	    mapAnnotationsToRow(sequenceData.features, row, sequenceLength),annotations=$__0.annotations,annotationYOffsetMax=$__0.annotationYOffsetMax;
	  row.features = annotations;
	  row.featuresYOffsetMax = annotationYOffsetMax;

	  var $__1=
	     
	    mapAnnotationsToRow(sequenceData.parts, row, sequenceLength),annotations=$__1.annotations,annotationYOffsetMax=$__1.annotationYOffsetMax;
	  row.parts = annotations;
	  row.partsYOffsetMax = annotationYOffsetMax;

	  // row.parts = mapAnnotationsToRow(sequenceData.parts, row, sequenceLength);
	  // row.orfs = mapAnnotationsToRow(sequenceData.orfs, row, sequenceLength);
	  // row.cutsites = mapAnnotationsToRow(sequenceData.cutsites, row, sequenceLength);

	  return row;
	}

	function mapAnnotationsToRow(annotations, row, sequenceLength) {
	  var annotationsInRow = {};
	  var annotationYOffsetMax = 0; //
	  //convert each anotation into 1 or 2 annotationLocations by spliiting on the origin.
	  //for each location, add to the row any stetches of the location that overlap the row

	  _.each(annotations, function(annotation) {
	    var annotationLocations = splitAnnotationOnOrigin(annotation, sequenceLength);
	    var overlaps;
	    annotationLocations.forEach(function(annotationLocation) {
	      var overlap = getOverlapOfRowWithAnnotationLocation(annotationLocation, annotation, row);
	      if (overlap) { //only if the annotationLocation overlaps with the row do we push anything in
	        if (!overlaps) {
	          overlaps = [];
	        }
	        overlaps.push(overlap);
	      }
	    });
	    if (overlaps) {
	      //calculate the yOffset for the new overlaps
	      var yOffset = calculateNecessaryYOffsetForAnnotationInRow(annotationsInRow, overlaps);
	      if (yOffset > annotationYOffsetMax) {
	        annotationYOffsetMax = yOffset;
	      }
	      //add the annotation to the row
	      var annotationId = annotation.id;
	      annotationsInRow[annotationId] = {
	        annotation: annotation,
	        overlaps: overlaps,
	        yOffset: yOffset
	      };
	    }
	  }, this);
	  return {
	    annotations: annotationsInRow,
	    annotationYOffsetMax: annotationYOffsetMax
	  };
	}

	function calculateNecessaryYOffsetForAnnotationInRow(annotationsAlreadyAddedToRow, overlaps) {
	  var blockedYOffsets = [];
	  //adjust the yOffset of the location being pushed in by checking its range against other locations in the row
	  _.each(annotationsAlreadyAddedToRow, function(comparisonAnnotation) {
	    //loop through every location in the comparisonAnnotation (there is a max of two)
	    //also note that locations cannot be circular
	    comparisonAnnotation.overlaps.forEach(function(comparisonOverlap) {
	      overlaps.forEach(function(overlap) {
	        //check for overlap with other annotations
	        if (overlap.start < comparisonOverlap.start) {
	          if (overlap.end < comparisonOverlap.start) {
	            //----llll
	            //--------cccc
	            //no overlap
	          } else {
	            //----llll
	            //-------cccc
	            //overlap
	            blockedYOffsets.push(comparisonAnnotation.yOffset);
	          }
	        } else {
	          if (overlap.start > comparisonOverlap.end) {
	            //------llll
	            // -cccc
	            //no overlap
	          } else {
	            //-----llll
	            // -cccc
	            //overlap
	            blockedYOffsets.push(comparisonAnnotation.yOffset);
	          }
	        }
	      });

	    });
	  });

	  var newYOffset = 1;
	  //sort and remove duplicates from the blockedYOffsets array
	  //then starting with newYOffset = 1, see if there is space for the location 
	  if (blockedYOffsets.length > 0) {
	    var sortedBlockedYOffsets = _.sortBy(blockedYOffsets, function(n) {
	      return n;
	    });
	    var sortedUniqueBlockedYOffsets = _.uniq(sortedBlockedYOffsets, true); //true here specifies that the array has already been sorted
	    var stillPotentiallyBlocked = true;
	    while (stillPotentiallyBlocked) {
	      //sortedUniqueBlockedYOffsets is an array starting with 1 eg. [1,2,4,5,6]
	      //so we loop through it using the index of newYOffset-1, and if there is a gap 
	      //in the array, we break the loop and that becomes our final newYOffset
	      if (sortedUniqueBlockedYOffsets[newYOffset - 1] !== newYOffset) {
	        //the newYOffset isn't blocked
	        stillPotentiallyBlocked = false;
	      } else {
	        //it is blocked
	        newYOffset++;
	      }
	    }
	  }
	  return newYOffset;
	}

	function splitAnnotationOnOrigin(annotation, sequenceLength) {
	  var annotationLocations = [];
	  if (annotation.start > annotation.end) {
	    annotationLocations.push({
	      start: 0,
	      end: annotation.end
	    });
	    annotationLocations.push({
	      start: annotation.start,
	      end: sequenceLength - 1
	    });
	  } else {
	    annotationLocations.push({
	      start: annotation.start,
	      end: annotation.end
	    });
	  }
	  return annotationLocations;
	}

	function getOverlapOfRowWithAnnotationLocation(annotationLocation, annotation, row) {
	  var overlap;
	  if (annotationLocation.start < row.start) {
	    if (annotationLocation.end < row.start) {
	      //do nothing
	    } else { //end of annotation intersects row
	      if (annotationLocation.end < row.end) {
	        overlap = {
	          start: row.start,
	          end: annotationLocation.end
	        };
	      } else {
	        overlap = {
	          start: row.start,
	          end: row.end
	        };
	      }
	    }
	  } else { //annotationLocation.start >= row.start
	    if (annotationLocation.start > row.end) {
	      //do nothing
	    } else { //annotationLocation.start <= row.end
	      //start of annotation intersects row
	      if (annotationLocation.end < row.end) {
	        //annotation fully enclosed within row
	        overlap = {
	          start: annotationLocation.start,
	          end: annotationLocation.end
	        };
	      } else {
	        //annotation end greater than row end
	        overlap = {
	          start: annotationLocation.start,
	          end: row.end
	        };
	      }
	    }
	  }
	  if (overlap) {
	    //get the overlap type
	    if (overlap.start === annotation.start) {
	      if (overlap.end === annotation.end) {
	        overlap.type = "beginningAndEnd";
	      } else {
	        overlap.type = "beginning";
	      }
	    } else {
	      if (overlap.end === annotation.end) {
	        overlap.type = "end";
	      } else {
	        overlap.type = "middle";
	      }
	    }
	    return overlap;
	  }
	}

	module.exports = computeRowRepresenationOfSequence;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Baobab Public Interface
	 * ========================
	 *
	 * Exposes the main library classes.
	 */
	var Baobab = __webpack_require__(51),
	    helpers = __webpack_require__(52);

	// Non-writable version
	Object.defineProperty(Baobab, 'version', {
	  value: '1.0.2'
	});

	// Exposing helpers
	Baobab.getIn = helpers.getIn;

	// Exporting
	module.exports = Baobab;


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Baobab-React Mixins
	 * ====================
	 *
	 * Old style react mixins.
	 */
	'use strict';

	var PropTypes = __webpack_require__(54);

	/**
	 * Root mixin
	 */
	var RootMixin = {

	  // Component prop Type
	  propTypes: {
	    tree: PropTypes.baobab
	  },

	  // Context prop types
	  childContextTypes: {
	    tree: PropTypes.baobab
	  },

	  // Handling child context
	  getChildContext: function getChildContext() {
	    return {
	      tree: this.props.tree
	    };
	  }
	};

	/**
	 * Branch mixin
	 */
	var BranchMixin = {

	  // Context prop types
	  contextTypes: {
	    tree: PropTypes.baobab
	  },

	  // Building initial state
	  getInitialState: function getInitialState() {

	    // Setting properties
	    this.__facet = this.context.tree.createFacet({
	      cursors: this.cursors,
	      facets: this.facets
	    }, [this.props, this.context]);
	    this.cursors = this.__facet.cursors;

	    if (this.__facet) {
	      return this.__facet.get();
	    }return {};
	  },

	  // On component mount
	  componentDidMount: function componentDidMount() {
	    if (!this.__facet) {
	      return;
	    }var handler = (function () {
	      this.setState(this.__facet.get());
	    }).bind(this);

	    this.__facet.on('update', handler);
	  },

	  // On component unmount
	  componentWillUnmount: function componentWillUnmount() {
	    if (!this.__facet) {
	      return;
	    } // Releasing facet
	    this.__facet.release();
	    this.__facet = null;
	  },

	  // On new props
	  componentWillReceiveProps: function componentWillReceiveProps(props) {
	    if (!this.__facet) {
	      return;
	    }this.__facet.refresh([props, this.context]);
	    this.setState(this.__facet.get());
	  }
	};

	// Exporting
	exports.root = RootMixin;
	exports.branch = BranchMixin;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var EventPluginUtils = __webpack_require__(55);
	var ReactChildren = __webpack_require__(56);
	var ReactComponent = __webpack_require__(57);
	var ReactClass = __webpack_require__(58);
	var ReactContext = __webpack_require__(59);
	var ReactCurrentOwner = __webpack_require__(60);
	var ReactElement = __webpack_require__(61);
	var ReactElementValidator = __webpack_require__(62);
	var ReactDOM = __webpack_require__(63);
	var ReactDOMTextComponent = __webpack_require__(64);
	var ReactDefaultInjection = __webpack_require__(65);
	var ReactInstanceHandles = __webpack_require__(66);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(68);
	var ReactPropTypes = __webpack_require__(69);
	var ReactReconciler = __webpack_require__(70);
	var ReactServerRendering = __webpack_require__(71);

	var assign = __webpack_require__(72);
	var findDOMNode = __webpack_require__(73);
	var onlyChild = __webpack_require__(74);

	ReactDefaultInjection.inject();

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  Component: ReactComponent,
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactClass.createClass,
	  createElement: createElement,
	  cloneElement: cloneElement,
	  createFactory: createFactory,
	  createMixin: function(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  findDOMNode: findDOMNode,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(75);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'https://fb.me/react-devtools'
	        );
	      }
	    }

	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,

	      // shams
	      Object.create,
	      Object.freeze
	    ];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'https://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}

	React.version = '0.13.3';

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(76);
	var RouteHandler = __webpack_require__(31);
	var Route = __webpack_require__(30);

	/**
	 * A <DefaultRoute> component is a special kind of <Route> that
	 * renders when its parent matches but none of its siblings do.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */

	var DefaultRoute = (function (_Route) {
	  function DefaultRoute() {
	    _classCallCheck(this, DefaultRoute);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(DefaultRoute, _Route);

	  return DefaultRoute;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	DefaultRoute.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.falsy,
	  children: PropTypes.falsy,
	  handler: PropTypes.func.isRequired
	};

	DefaultRoute.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = DefaultRoute;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(13);
	var assign = __webpack_require__(72);
	var PropTypes = __webpack_require__(76);

	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	/**
	 * <Link> components are used to create an <a> element that links to a route.
	 * When that route is active, the link gets an "active" class name (or the
	 * value of its `activeClassName` prop).
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route name="showPost" path="/posts/:postID" handler={Post}/>
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} />
	 *
	 * In addition to params, links may pass along query string parameters
	 * using the `query` prop.
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} query={{ show:true }}/>
	 */

	var Link = (function (_React$Component) {
	  function Link() {
	    _classCallCheck(this, Link);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Link, _React$Component);

	  _createClass(Link, [{
	    key: 'handleClick',
	    value: function handleClick(event) {
	      var allowTransition = true;
	      var clickResult;

	      if (this.props.onClick) clickResult = this.props.onClick(event);

	      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
	        return;
	      }if (clickResult === false || event.defaultPrevented === true) allowTransition = false;

	      event.preventDefault();

	      if (allowTransition) this.context.router.transitionTo(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'getHref',

	    /**
	     * Returns the value of the "href" attribute to use on the DOM element.
	     */
	    value: function getHref() {
	      return this.context.router.makeHref(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'getClassName',

	    /**
	     * Returns the value of the "class" attribute to use on the DOM element, which contains
	     * the value of the activeClassName property when this <Link> is active.
	     */
	    value: function getClassName() {
	      var className = this.props.className;

	      if (this.getActiveState()) className += ' ' + this.props.activeClassName;

	      return className;
	    }
	  }, {
	    key: 'getActiveState',
	    value: function getActiveState() {
	      return this.context.router.isActive(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var props = assign({}, this.props, {
	        href: this.getHref(),
	        className: this.getClassName(),
	        onClick: this.handleClick.bind(this)
	      });

	      if (props.activeStyle && this.getActiveState()) props.style = props.activeStyle;

	      return React.DOM.a(props, this.props.children);
	    }
	  }]);

	  return Link;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Link.contextTypes = {
	  router: PropTypes.router.isRequired
	};

	Link.propTypes = {
	  activeClassName: PropTypes.string.isRequired,
	  to: PropTypes.oneOfType([PropTypes.string, PropTypes.route]).isRequired,
	  params: PropTypes.object,
	  query: PropTypes.object,
	  activeStyle: PropTypes.object,
	  onClick: PropTypes.func
	};

	Link.defaultProps = {
	  activeClassName: 'active',
	  className: ''
	};

	module.exports = Link;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(76);
	var RouteHandler = __webpack_require__(31);
	var Route = __webpack_require__(30);

	/**
	 * A <NotFoundRoute> is a special kind of <Route> that
	 * renders when the beginning of its parent's path matches
	 * but none of its siblings do, including any <DefaultRoute>.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */

	var NotFoundRoute = (function (_Route) {
	  function NotFoundRoute() {
	    _classCallCheck(this, NotFoundRoute);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(NotFoundRoute, _Route);

	  return NotFoundRoute;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	NotFoundRoute.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.falsy,
	  children: PropTypes.falsy,
	  handler: PropTypes.func.isRequired
	};

	NotFoundRoute.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = NotFoundRoute;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(76);
	var Route = __webpack_require__(30);

	/**
	 * A <Redirect> component is a special kind of <Route> that always
	 * redirects to another route when it matches.
	 */

	var Redirect = (function (_Route) {
	  function Redirect() {
	    _classCallCheck(this, Redirect);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(Redirect, _Route);

	  return Redirect;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Redirect.propTypes = {
	  path: PropTypes.string,
	  from: PropTypes.string, // Alias for path.
	  to: PropTypes.string,
	  handler: PropTypes.falsy
	};

	// Redirects should not have a default handler
	Redirect.defaultProps = {};

	module.exports = Redirect;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(13);
	var invariant = __webpack_require__(77);
	var PropTypes = __webpack_require__(76);
	var RouteHandler = __webpack_require__(31);

	/**
	 * <Route> components specify components that are rendered to the page when the
	 * URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is requested,
	 * the tree is searched depth-first to find a route whose path matches the URL.
	 * When one is found, all routes in the tree that lead to it are considered
	 * "active" and their components are rendered into the DOM, nested in the same
	 * order as they are in the tree.
	 *
	 * The preferred way to configure a router is using JSX. The XML-like syntax is
	 * a great way to visualize how routes are laid out in an application.
	 *
	 *   var routes = [
	 *     <Route handler={App}>
	 *       <Route name="login" handler={Login}/>
	 *       <Route name="logout" handler={Logout}/>
	 *       <Route name="about" handler={About}/>
	 *     </Route>
	 *   ];
	 *   
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 *
	 * Handlers for Route components that contain children can render their active
	 * child route using a <RouteHandler> element.
	 *
	 *   var App = React.createClass({
	 *     render: function () {
	 *       return (
	 *         <div class="application">
	 *           <RouteHandler/>
	 *         </div>
	 *       );
	 *     }
	 *   });
	 *
	 * If no handler is provided for the route, it will render a matched child route.
	 */

	var Route = (function (_React$Component) {
	  function Route() {
	    _classCallCheck(this, Route);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Route, _React$Component);

	  _createClass(Route, [{
	    key: 'render',
	    value: function render() {
	      invariant(false, '%s elements are for router configuration only and should not be rendered', this.constructor.name);
	    }
	  }]);

	  return Route;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Route.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.string,
	  handler: PropTypes.func,
	  ignoreScrollBehavior: PropTypes.bool
	};

	Route.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = Route;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(13);
	var ContextWrapper = __webpack_require__(78);
	var assign = __webpack_require__(72);
	var PropTypes = __webpack_require__(76);

	var REF_NAME = '__routeHandler__';

	/**
	 * A <RouteHandler> component renders the active child route handler
	 * when routes are nested.
	 */

	var RouteHandler = (function (_React$Component) {
	  function RouteHandler() {
	    _classCallCheck(this, RouteHandler);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(RouteHandler, _React$Component);

	  _createClass(RouteHandler, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        routeDepth: this.context.routeDepth + 1
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._updateRouteComponent(this.refs[REF_NAME]);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._updateRouteComponent(this.refs[REF_NAME]);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this._updateRouteComponent(null);
	    }
	  }, {
	    key: '_updateRouteComponent',
	    value: function _updateRouteComponent(component) {
	      this.context.router.setRouteComponentAtDepth(this.getRouteDepth(), component);
	    }
	  }, {
	    key: 'getRouteDepth',
	    value: function getRouteDepth() {
	      return this.context.routeDepth;
	    }
	  }, {
	    key: 'createChildRouteHandler',
	    value: function createChildRouteHandler(props) {
	      var route = this.context.router.getRouteAtDepth(this.getRouteDepth());

	      if (route == null) {
	        return null;
	      }var childProps = assign({}, props || this.props, {
	        ref: REF_NAME,
	        params: this.context.router.getCurrentParams(),
	        query: this.context.router.getCurrentQuery()
	      });

	      return React.createElement(route.handler, childProps);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var handler = this.createChildRouteHandler();
	      // <script/> for things like <CSSTransitionGroup/> that don't like null
	      return handler ? React.createElement(
	        ContextWrapper,
	        null,
	        handler
	      ) : React.createElement('script', null);
	    }
	  }]);

	  return RouteHandler;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	RouteHandler.contextTypes = {
	  routeDepth: PropTypes.number.isRequired,
	  router: PropTypes.router.isRequired
	};

	RouteHandler.childContextTypes = {
	  routeDepth: PropTypes.number.isRequired
	};

	module.exports = RouteHandler;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(79);
	var History = __webpack_require__(39);

	var _listeners = [];
	var _isListening = false;
	var _actionType;

	function notifyChange(type) {
	  if (type === LocationActions.PUSH) History.length += 1;

	  var change = {
	    path: HashLocation.getCurrentPath(),
	    type: type
	  };

	  _listeners.forEach(function (listener) {
	    listener.call(HashLocation, change);
	  });
	}

	function ensureSlash() {
	  var path = HashLocation.getCurrentPath();

	  if (path.charAt(0) === '/') {
	    return true;
	  }HashLocation.replace('/' + path);

	  return false;
	}

	function onHashChange() {
	  if (ensureSlash()) {
	    // If we don't have an _actionType then all we know is the hash
	    // changed. It was probably caused by the user clicking the Back
	    // button, but may have also been the Forward button or manual
	    // manipulation. So just guess 'pop'.
	    var curActionType = _actionType;
	    _actionType = null;
	    notifyChange(curActionType || LocationActions.POP);
	  }
	}

	/**
	 * A Location that uses `window.location.hash`.
	 */
	var HashLocation = {

	  addChangeListener: function addChangeListener(listener) {
	    _listeners.push(listener);

	    // Do this BEFORE listening for hashchange.
	    ensureSlash();

	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener('hashchange', onHashChange, false);
	      } else {
	        window.attachEvent('onhashchange', onHashChange);
	      }

	      _isListening = true;
	    }
	  },

	  removeChangeListener: function removeChangeListener(listener) {
	    _listeners = _listeners.filter(function (l) {
	      return l !== listener;
	    });

	    if (_listeners.length === 0) {
	      if (window.removeEventListener) {
	        window.removeEventListener('hashchange', onHashChange, false);
	      } else {
	        window.removeEvent('onhashchange', onHashChange);
	      }

	      _isListening = false;
	    }
	  },

	  push: function push(path) {
	    _actionType = LocationActions.PUSH;
	    window.location.hash = path;
	  },

	  replace: function replace(path) {
	    _actionType = LocationActions.REPLACE;
	    window.location.replace(window.location.pathname + window.location.search + '#' + path);
	  },

	  pop: function pop() {
	    _actionType = LocationActions.POP;
	    History.back();
	  },

	  getCurrentPath: function getCurrentPath() {
	    return decodeURI(
	    // We can't use window.location.hash here because it's not
	    // consistent across browsers - Firefox will pre-decode it!
	    window.location.href.split('#')[1] || '');
	  },

	  toString: function toString() {
	    return '<HashLocation>';
	  }

	};

	module.exports = HashLocation;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(79);
	var History = __webpack_require__(39);

	var _listeners = [];
	var _isListening = false;

	function notifyChange(type) {
	  var change = {
	    path: HistoryLocation.getCurrentPath(),
	    type: type
	  };

	  _listeners.forEach(function (listener) {
	    listener.call(HistoryLocation, change);
	  });
	}

	function onPopState(event) {
	  if (event.state === undefined) {
	    return;
	  } // Ignore extraneous popstate events in WebKit.

	  notifyChange(LocationActions.POP);
	}

	/**
	 * A Location that uses HTML5 history.
	 */
	var HistoryLocation = {

	  addChangeListener: function addChangeListener(listener) {
	    _listeners.push(listener);

	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener('popstate', onPopState, false);
	      } else {
	        window.attachEvent('onpopstate', onPopState);
	      }

	      _isListening = true;
	    }
	  },

	  removeChangeListener: function removeChangeListener(listener) {
	    _listeners = _listeners.filter(function (l) {
	      return l !== listener;
	    });

	    if (_listeners.length === 0) {
	      if (window.addEventListener) {
	        window.removeEventListener('popstate', onPopState, false);
	      } else {
	        window.removeEvent('onpopstate', onPopState);
	      }

	      _isListening = false;
	    }
	  },

	  push: function push(path) {
	    window.history.pushState({ path: path }, '', path);
	    History.length += 1;
	    notifyChange(LocationActions.PUSH);
	  },

	  replace: function replace(path) {
	    window.history.replaceState({ path: path }, '', path);
	    notifyChange(LocationActions.REPLACE);
	  },

	  pop: History.back,

	  getCurrentPath: function getCurrentPath() {
	    return decodeURI(window.location.pathname + window.location.search);
	  },

	  toString: function toString() {
	    return '<HistoryLocation>';
	  }

	};

	module.exports = HistoryLocation;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var HistoryLocation = __webpack_require__(33);
	var History = __webpack_require__(39);

	/**
	 * A Location that uses full page refreshes. This is used as
	 * the fallback for HistoryLocation in browsers that do not
	 * support the HTML5 history API.
	 */
	var RefreshLocation = {

	  push: function push(path) {
	    window.location = path;
	  },

	  replace: function replace(path) {
	    window.location.replace(path);
	  },

	  pop: History.back,

	  getCurrentPath: HistoryLocation.getCurrentPath,

	  toString: function toString() {
	    return '<RefreshLocation>';
	  }

	};

	module.exports = RefreshLocation;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var invariant = __webpack_require__(77);

	function throwCannotModify() {
	  invariant(false, 'You cannot modify a static location');
	}

	/**
	 * A location that only ever contains a single path. Useful in
	 * stateless environments like servers where there is no path history,
	 * only the path that was used in the request.
	 */

	var StaticLocation = (function () {
	  function StaticLocation(path) {
	    _classCallCheck(this, StaticLocation);

	    this.path = path;
	  }

	  _createClass(StaticLocation, [{
	    key: 'getCurrentPath',
	    value: function getCurrentPath() {
	      return this.path;
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return '<StaticLocation path="' + this.path + '">';
	    }
	  }]);

	  return StaticLocation;
	})();

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	StaticLocation.prototype.push = throwCannotModify;
	StaticLocation.prototype.replace = throwCannotModify;
	StaticLocation.prototype.pop = throwCannotModify;

	module.exports = StaticLocation;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var invariant = __webpack_require__(77);
	var LocationActions = __webpack_require__(79);
	var History = __webpack_require__(39);

	/**
	 * A location that is convenient for testing and does not require a DOM.
	 */

	var TestLocation = (function () {
	  function TestLocation(history) {
	    _classCallCheck(this, TestLocation);

	    this.history = history || [];
	    this.listeners = [];
	    this._updateHistoryLength();
	  }

	  _createClass(TestLocation, [{
	    key: 'needsDOM',
	    get: function () {
	      return false;
	    }
	  }, {
	    key: '_updateHistoryLength',
	    value: function _updateHistoryLength() {
	      History.length = this.history.length;
	    }
	  }, {
	    key: '_notifyChange',
	    value: function _notifyChange(type) {
	      var change = {
	        path: this.getCurrentPath(),
	        type: type
	      };

	      for (var i = 0, len = this.listeners.length; i < len; ++i) this.listeners[i].call(this, change);
	    }
	  }, {
	    key: 'addChangeListener',
	    value: function addChangeListener(listener) {
	      this.listeners.push(listener);
	    }
	  }, {
	    key: 'removeChangeListener',
	    value: function removeChangeListener(listener) {
	      this.listeners = this.listeners.filter(function (l) {
	        return l !== listener;
	      });
	    }
	  }, {
	    key: 'push',
	    value: function push(path) {
	      this.history.push(path);
	      this._updateHistoryLength();
	      this._notifyChange(LocationActions.PUSH);
	    }
	  }, {
	    key: 'replace',
	    value: function replace(path) {
	      invariant(this.history.length, 'You cannot replace the current path with no history');

	      this.history[this.history.length - 1] = path;

	      this._notifyChange(LocationActions.REPLACE);
	    }
	  }, {
	    key: 'pop',
	    value: function pop() {
	      this.history.pop();
	      this._updateHistoryLength();
	      this._notifyChange(LocationActions.POP);
	    }
	  }, {
	    key: 'getCurrentPath',
	    value: function getCurrentPath() {
	      return this.history[this.history.length - 1];
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return '<TestLocation>';
	    }
	  }]);

	  return TestLocation;
	})();

	module.exports = TestLocation;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(79);

	/**
	 * A scroll behavior that attempts to imitate the default behavior
	 * of modern browsers.
	 */
	var ImitateBrowserBehavior = {

	  updateScrollPosition: function updateScrollPosition(position, actionType) {
	    switch (actionType) {
	      case LocationActions.PUSH:
	      case LocationActions.REPLACE:
	        window.scrollTo(0, 0);
	        break;
	      case LocationActions.POP:
	        if (position) {
	          window.scrollTo(position.x, position.y);
	        } else {
	          window.scrollTo(0, 0);
	        }
	        break;
	    }
	  }

	};

	module.exports = ImitateBrowserBehavior;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A scroll behavior that always scrolls to the top of the page
	 * after a transition.
	 */
	"use strict";

	var ScrollToTopBehavior = {

	  updateScrollPosition: function updateScrollPosition() {
	    window.scrollTo(0, 0);
	  }

	};

	module.exports = ScrollToTopBehavior;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(77);
	var canUseDOM = __webpack_require__(75).canUseDOM;

	var History = {

	  /**
	   * The current number of entries in the history.
	   *
	   * Note: This property is read-only.
	   */
	  length: 1,

	  /**
	   * Sends the browser back one entry in the history.
	   */
	  back: function back() {
	    invariant(canUseDOM, 'Cannot use History.back without a DOM');

	    // Do this first so that History.length will
	    // be accurate in location change listeners.
	    History.length -= 1;

	    window.history.back();
	  }

	};

	module.exports = History;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PropTypes = __webpack_require__(76);

	/**
	 * A mixin for components that modify the URL.
	 *
	 * Example:
	 *
	 *   var MyLink = React.createClass({
	 *     mixins: [ Router.Navigation ],
	 *     handleClick(event) {
	 *       event.preventDefault();
	 *       this.transitionTo('aRoute', { the: 'params' }, { the: 'query' });
	 *     },
	 *     render() {
	 *       return (
	 *         <a onClick={this.handleClick}>Click me!</a>
	 *       );
	 *     }
	 *   });
	 */
	var Navigation = {

	  contextTypes: {
	    router: PropTypes.router.isRequired
	  },

	  /**
	   * Returns an absolute URL path created from the given route
	   * name, URL parameters, and query values.
	   */
	  makePath: function makePath(to, params, query) {
	    return this.context.router.makePath(to, params, query);
	  },

	  /**
	   * Returns a string that may safely be used as the href of a
	   * link to the route with the given name.
	   */
	  makeHref: function makeHref(to, params, query) {
	    return this.context.router.makeHref(to, params, query);
	  },

	  /**
	   * Transitions to the URL specified in the arguments by pushing
	   * a new URL onto the history stack.
	   */
	  transitionTo: function transitionTo(to, params, query) {
	    this.context.router.transitionTo(to, params, query);
	  },

	  /**
	   * Transitions to the URL specified in the arguments by replacing
	   * the current URL in the history stack.
	   */
	  replaceWith: function replaceWith(to, params, query) {
	    this.context.router.replaceWith(to, params, query);
	  },

	  /**
	   * Transitions to the previous URL.
	   */
	  goBack: function goBack() {
	    return this.context.router.goBack();
	  }

	};

	module.exports = Navigation;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PropTypes = __webpack_require__(76);

	/**
	 * A mixin for components that need to know the path, routes, URL
	 * params and query that are currently active.
	 *
	 * Example:
	 *
	 *   var AboutLink = React.createClass({
	 *     mixins: [ Router.State ],
	 *     render() {
	 *       var className = this.props.className;
	 *
	 *       if (this.isActive('about'))
	 *         className += ' is-active';
	 *
	 *       return React.DOM.a({ className: className }, this.props.children);
	 *     }
	 *   });
	 */
	var State = {

	  contextTypes: {
	    router: PropTypes.router.isRequired
	  },

	  /**
	   * Returns the current URL path.
	   */
	  getPath: function getPath() {
	    return this.context.router.getCurrentPath();
	  },

	  /**
	   * Returns the current URL path without the query string.
	   */
	  getPathname: function getPathname() {
	    return this.context.router.getCurrentPathname();
	  },

	  /**
	   * Returns an object of the URL params that are currently active.
	   */
	  getParams: function getParams() {
	    return this.context.router.getCurrentParams();
	  },

	  /**
	   * Returns an object of the query params that are currently active.
	   */
	  getQuery: function getQuery() {
	    return this.context.router.getCurrentQuery();
	  },

	  /**
	   * Returns an array of the routes that are currently active.
	   */
	  getRoutes: function getRoutes() {
	    return this.context.router.getCurrentRoutes();
	  },

	  /**
	   * A helper method to determine if a given route, params, and query
	   * are active.
	   */
	  isActive: function isActive(to, params, query) {
	    return this.context.router.isActive(to, params, query);
	  }

	};

	module.exports = State;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var assign = __webpack_require__(72);
	var invariant = __webpack_require__(77);
	var warning = __webpack_require__(80);
	var PathUtils = __webpack_require__(81);

	var _currentRoute;

	var Route = (function () {
	  function Route(name, path, ignoreScrollBehavior, isDefault, isNotFound, onEnter, onLeave, handler) {
	    _classCallCheck(this, Route);

	    this.name = name;
	    this.path = path;
	    this.paramNames = PathUtils.extractParamNames(this.path);
	    this.ignoreScrollBehavior = !!ignoreScrollBehavior;
	    this.isDefault = !!isDefault;
	    this.isNotFound = !!isNotFound;
	    this.onEnter = onEnter;
	    this.onLeave = onLeave;
	    this.handler = handler;
	  }

	  _createClass(Route, [{
	    key: 'appendChild',

	    /**
	     * Appends the given route to this route's child routes.
	     */
	    value: function appendChild(route) {
	      invariant(route instanceof Route, 'route.appendChild must use a valid Route');

	      if (!this.childRoutes) this.childRoutes = [];

	      this.childRoutes.push(route);
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      var string = '<Route';

	      if (this.name) string += ' name="' + this.name + '"';

	      string += ' path="' + this.path + '">';

	      return string;
	    }
	  }], [{
	    key: 'createRoute',

	    /**
	     * Creates and returns a new route. Options may be a URL pathname string
	     * with placeholders for named params or an object with any of the following
	     * properties:
	     *
	     * - name                     The name of the route. This is used to lookup a
	     *                            route relative to its parent route and should be
	     *                            unique among all child routes of the same parent
	     * - path                     A URL pathname string with optional placeholders
	     *                            that specify the names of params to extract from
	     *                            the URL when the path matches. Defaults to `/${name}`
	     *                            when there is a name given, or the path of the parent
	     *                            route, or /
	     * - ignoreScrollBehavior     True to make this route (and all descendants) ignore
	     *                            the scroll behavior of the router
	     * - isDefault                True to make this route the default route among all
	     *                            its siblings
	     * - isNotFound               True to make this route the "not found" route among
	     *                            all its siblings
	     * - onEnter                  A transition hook that will be called when the
	     *                            router is going to enter this route
	     * - onLeave                  A transition hook that will be called when the
	     *                            router is going to leave this route
	     * - handler                  A React component that will be rendered when
	     *                            this route is active
	     * - parentRoute              The parent route to use for this route. This option
	     *                            is automatically supplied when creating routes inside
	     *                            the callback to another invocation of createRoute. You
	     *                            only ever need to use this when declaring routes
	     *                            independently of one another to manually piece together
	     *                            the route hierarchy
	     *
	     * The callback may be used to structure your route hierarchy. Any call to
	     * createRoute, createDefaultRoute, createNotFoundRoute, or createRedirect
	     * inside the callback automatically uses this route as its parent.
	     */
	    value: function createRoute(options, callback) {
	      options = options || {};

	      if (typeof options === 'string') options = { path: options };

	      var parentRoute = _currentRoute;

	      if (parentRoute) {
	        warning(options.parentRoute == null || options.parentRoute === parentRoute, 'You should not use parentRoute with createRoute inside another route\'s child callback; it is ignored');
	      } else {
	        parentRoute = options.parentRoute;
	      }

	      var name = options.name;
	      var path = options.path || name;

	      if (path && !(options.isDefault || options.isNotFound)) {
	        if (PathUtils.isAbsolute(path)) {
	          if (parentRoute) {
	            invariant(path === parentRoute.path || parentRoute.paramNames.length === 0, 'You cannot nest path "%s" inside "%s"; the parent requires URL parameters', path, parentRoute.path);
	          }
	        } else if (parentRoute) {
	          // Relative paths extend their parent.
	          path = PathUtils.join(parentRoute.path, path);
	        } else {
	          path = '/' + path;
	        }
	      } else {
	        path = parentRoute ? parentRoute.path : '/';
	      }

	      if (options.isNotFound && !/\*$/.test(path)) path += '*'; // Auto-append * to the path of not found routes.

	      var route = new Route(name, path, options.ignoreScrollBehavior, options.isDefault, options.isNotFound, options.onEnter, options.onLeave, options.handler);

	      if (parentRoute) {
	        if (route.isDefault) {
	          invariant(parentRoute.defaultRoute == null, '%s may not have more than one default route', parentRoute);

	          parentRoute.defaultRoute = route;
	        } else if (route.isNotFound) {
	          invariant(parentRoute.notFoundRoute == null, '%s may not have more than one not found route', parentRoute);

	          parentRoute.notFoundRoute = route;
	        }

	        parentRoute.appendChild(route);
	      }

	      // Any routes created in the callback
	      // use this route as their parent.
	      if (typeof callback === 'function') {
	        var currentRoute = _currentRoute;
	        _currentRoute = route;
	        callback.call(route, route);
	        _currentRoute = currentRoute;
	      }

	      return route;
	    }
	  }, {
	    key: 'createDefaultRoute',

	    /**
	     * Creates and returns a route that is rendered when its parent matches
	     * the current URL.
	     */
	    value: function createDefaultRoute(options) {
	      return Route.createRoute(assign({}, options, { isDefault: true }));
	    }
	  }, {
	    key: 'createNotFoundRoute',

	    /**
	     * Creates and returns a route that is rendered when its parent matches
	     * the current URL but none of its siblings do.
	     */
	    value: function createNotFoundRoute(options) {
	      return Route.createRoute(assign({}, options, { isNotFound: true }));
	    }
	  }, {
	    key: 'createRedirect',

	    /**
	     * Creates and returns a route that automatically redirects the transition
	     * to another route. In addition to the normal options to createRoute, this
	     * function accepts the following options:
	     *
	     * - from         An alias for the `path` option. Defaults to *
	     * - to           The path/route/route name to redirect to
	     * - params       The params to use in the redirect URL. Defaults
	     *                to using the current params
	     * - query        The query to use in the redirect URL. Defaults
	     *                to using the current query
	     */
	    value: function createRedirect(options) {
	      return Route.createRoute(assign({}, options, {
	        path: options.path || options.from || '*',
	        onEnter: function onEnter(transition, params, query) {
	          transition.redirect(options.to, options.params || params, options.query || query);
	        }
	      }));
	    }
	  }]);

	  return Route;
	})();

	module.exports = Route;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W084 */
	'use strict';

	var React = __webpack_require__(13);
	var assign = __webpack_require__(72);
	var warning = __webpack_require__(80);
	var DefaultRoute = __webpack_require__(26);
	var NotFoundRoute = __webpack_require__(28);
	var Redirect = __webpack_require__(29);
	var Route = __webpack_require__(42);

	function checkPropTypes(componentName, propTypes, props) {
	  componentName = componentName || 'UnknownComponent';

	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error = propTypes[propName](props, propName, componentName);

	      if (error instanceof Error) warning(false, error.message);
	    }
	  }
	}

	function createRouteOptions(props) {
	  var options = assign({}, props);
	  var handler = options.handler;

	  if (handler) {
	    options.onEnter = handler.willTransitionTo;
	    options.onLeave = handler.willTransitionFrom;
	  }

	  return options;
	}

	function createRouteFromReactElement(element) {
	  if (!React.isValidElement(element)) {
	    return;
	  }var type = element.type;
	  var props = assign({}, type.defaultProps, element.props);

	  if (type.propTypes) checkPropTypes(type.displayName, type.propTypes, props);

	  if (type === DefaultRoute) {
	    return Route.createDefaultRoute(createRouteOptions(props));
	  }if (type === NotFoundRoute) {
	    return Route.createNotFoundRoute(createRouteOptions(props));
	  }if (type === Redirect) {
	    return Route.createRedirect(createRouteOptions(props));
	  }return Route.createRoute(createRouteOptions(props), function () {
	    if (props.children) createRoutesFromReactChildren(props.children);
	  });
	}

	/**
	 * Creates and returns an array of routes created from the given
	 * ReactChildren, all of which should be one of <Route>, <DefaultRoute>,
	 * <NotFoundRoute>, or <Redirect>, e.g.:
	 *
	 *   var { createRoutesFromReactChildren, Route, Redirect } = require('react-router');
	 *
	 *   var routes = createRoutesFromReactChildren(
	 *     <Route path="/" handler={App}>
	 *       <Route name="user" path="/user/:userId" handler={User}>
	 *         <Route name="task" path="tasks/:taskId" handler={Task}/>
	 *         <Redirect from="todos/:taskId" to="task"/>
	 *       </Route>
	 *     </Route>
	 *   );
	 */
	function createRoutesFromReactChildren(children) {
	  var routes = [];

	  React.Children.forEach(children, function (child) {
	    if (child = createRouteFromReactElement(child)) routes.push(child);
	  });

	  return routes;
	}

	module.exports = createRoutesFromReactChildren;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* jshint -W058 */
	'use strict';

	var React = __webpack_require__(13);
	var warning = __webpack_require__(80);
	var invariant = __webpack_require__(77);
	var canUseDOM = __webpack_require__(75).canUseDOM;
	var LocationActions = __webpack_require__(79);
	var ImitateBrowserBehavior = __webpack_require__(37);
	var HashLocation = __webpack_require__(32);
	var HistoryLocation = __webpack_require__(33);
	var RefreshLocation = __webpack_require__(34);
	var StaticLocation = __webpack_require__(35);
	var ScrollHistory = __webpack_require__(82);
	var createRoutesFromReactChildren = __webpack_require__(43);
	var isReactChildren = __webpack_require__(83);
	var Transition = __webpack_require__(84);
	var PropTypes = __webpack_require__(76);
	var Redirect = __webpack_require__(85);
	var History = __webpack_require__(39);
	var Cancellation = __webpack_require__(86);
	var Match = __webpack_require__(87);
	var Route = __webpack_require__(42);
	var supportsHistory = __webpack_require__(88);
	var PathUtils = __webpack_require__(81);

	/**
	 * The default location for new routers.
	 */
	var DEFAULT_LOCATION = canUseDOM ? HashLocation : '/';

	/**
	 * The default scroll behavior for new routers.
	 */
	var DEFAULT_SCROLL_BEHAVIOR = canUseDOM ? ImitateBrowserBehavior : null;

	function hasProperties(object, properties) {
	  for (var propertyName in properties) if (properties.hasOwnProperty(propertyName) && object[propertyName] !== properties[propertyName]) {
	    return false;
	  }return true;
	}

	function hasMatch(routes, route, prevParams, nextParams, prevQuery, nextQuery) {
	  return routes.some(function (r) {
	    if (r !== route) return false;

	    var paramNames = route.paramNames;
	    var paramName;

	    // Ensure that all params the route cares about did not change.
	    for (var i = 0, len = paramNames.length; i < len; ++i) {
	      paramName = paramNames[i];

	      if (nextParams[paramName] !== prevParams[paramName]) return false;
	    }

	    // Ensure the query hasn't changed.
	    return hasProperties(prevQuery, nextQuery) && hasProperties(nextQuery, prevQuery);
	  });
	}

	function addRoutesToNamedRoutes(routes, namedRoutes) {
	  var route;
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    route = routes[i];

	    if (route.name) {
	      invariant(namedRoutes[route.name] == null, 'You may not have more than one route named "%s"', route.name);

	      namedRoutes[route.name] = route;
	    }

	    if (route.childRoutes) addRoutesToNamedRoutes(route.childRoutes, namedRoutes);
	  }
	}

	function routeIsActive(activeRoutes, routeName) {
	  return activeRoutes.some(function (route) {
	    return route.name === routeName;
	  });
	}

	function paramsAreActive(activeParams, params) {
	  for (var property in params) if (String(activeParams[property]) !== String(params[property])) {
	    return false;
	  }return true;
	}

	function queryIsActive(activeQuery, query) {
	  for (var property in query) if (String(activeQuery[property]) !== String(query[property])) {
	    return false;
	  }return true;
	}

	/**
	 * Creates and returns a new router using the given options. A router
	 * is a ReactComponent class that knows how to react to changes in the
	 * URL and keep the contents of the page in sync.
	 *
	 * Options may be any of the following:
	 *
	 * - routes           (required) The route config
	 * - location         The location to use. Defaults to HashLocation when
	 *                    the DOM is available, "/" otherwise
	 * - scrollBehavior   The scroll behavior to use. Defaults to ImitateBrowserBehavior
	 *                    when the DOM is available, null otherwise
	 * - onError          A function that is used to handle errors
	 * - onAbort          A function that is used to handle aborted transitions
	 *
	 * When rendering in a server-side environment, the location should simply
	 * be the URL path that was used in the request, including the query string.
	 */
	function createRouter(options) {
	  options = options || {};

	  if (isReactChildren(options)) options = { routes: options };

	  var mountedComponents = [];
	  var location = options.location || DEFAULT_LOCATION;
	  var scrollBehavior = options.scrollBehavior || DEFAULT_SCROLL_BEHAVIOR;
	  var state = {};
	  var nextState = {};
	  var pendingTransition = null;
	  var dispatchHandler = null;

	  if (typeof location === 'string') location = new StaticLocation(location);

	  if (location instanceof StaticLocation) {
	    warning(!canUseDOM || process.env.NODE_ENV === 'test', 'You should not use a static location in a DOM environment because ' + 'the router will not be kept in sync with the current URL');
	  } else {
	    invariant(canUseDOM || location.needsDOM === false, 'You cannot use %s without a DOM', location);
	  }

	  // Automatically fall back to full page refreshes in
	  // browsers that don't support the HTML history API.
	  if (location === HistoryLocation && !supportsHistory()) location = RefreshLocation;

	  var Router = React.createClass({

	    displayName: 'Router',

	    statics: {

	      isRunning: false,

	      cancelPendingTransition: function cancelPendingTransition() {
	        if (pendingTransition) {
	          pendingTransition.cancel();
	          pendingTransition = null;
	        }
	      },

	      clearAllRoutes: function clearAllRoutes() {
	        Router.cancelPendingTransition();
	        Router.namedRoutes = {};
	        Router.routes = [];
	      },

	      /**
	       * Adds routes to this router from the given children object (see ReactChildren).
	       */
	      addRoutes: function addRoutes(routes) {
	        if (isReactChildren(routes)) routes = createRoutesFromReactChildren(routes);

	        addRoutesToNamedRoutes(routes, Router.namedRoutes);

	        Router.routes.push.apply(Router.routes, routes);
	      },

	      /**
	       * Replaces routes of this router from the given children object (see ReactChildren).
	       */
	      replaceRoutes: function replaceRoutes(routes) {
	        Router.clearAllRoutes();
	        Router.addRoutes(routes);
	        Router.refresh();
	      },

	      /**
	       * Performs a match of the given path against this router and returns an object
	       * with the { routes, params, pathname, query } that match. Returns null if no
	       * match can be made.
	       */
	      match: function match(path) {
	        return Match.findMatch(Router.routes, path);
	      },

	      /**
	       * Returns an absolute URL path created from the given route
	       * name, URL parameters, and query.
	       */
	      makePath: function makePath(to, params, query) {
	        var path;
	        if (PathUtils.isAbsolute(to)) {
	          path = to;
	        } else {
	          var route = to instanceof Route ? to : Router.namedRoutes[to];

	          invariant(route instanceof Route, 'Cannot find a route named "%s"', to);

	          path = route.path;
	        }

	        return PathUtils.withQuery(PathUtils.injectParams(path, params), query);
	      },

	      /**
	       * Returns a string that may safely be used as the href of a link
	       * to the route with the given name, URL parameters, and query.
	       */
	      makeHref: function makeHref(to, params, query) {
	        var path = Router.makePath(to, params, query);
	        return location === HashLocation ? '#' + path : path;
	      },

	      /**
	       * Transitions to the URL specified in the arguments by pushing
	       * a new URL onto the history stack.
	       */
	      transitionTo: function transitionTo(to, params, query) {
	        var path = Router.makePath(to, params, query);

	        if (pendingTransition) {
	          // Replace so pending location does not stay in history.
	          location.replace(path);
	        } else {
	          location.push(path);
	        }
	      },

	      /**
	       * Transitions to the URL specified in the arguments by replacing
	       * the current URL in the history stack.
	       */
	      replaceWith: function replaceWith(to, params, query) {
	        location.replace(Router.makePath(to, params, query));
	      },

	      /**
	       * Transitions to the previous URL if one is available. Returns true if the
	       * router was able to go back, false otherwise.
	       *
	       * Note: The router only tracks history entries in your application, not the
	       * current browser session, so you can safely call this function without guarding
	       * against sending the user back to some other site. However, when using
	       * RefreshLocation (which is the fallback for HistoryLocation in browsers that
	       * don't support HTML5 history) this method will *always* send the client back
	       * because we cannot reliably track history length.
	       */
	      goBack: function goBack() {
	        if (History.length > 1 || location === RefreshLocation) {
	          location.pop();
	          return true;
	        }

	        warning(false, 'goBack() was ignored because there is no router history');

	        return false;
	      },

	      handleAbort: options.onAbort || function (abortReason) {
	        if (location instanceof StaticLocation) throw new Error('Unhandled aborted transition! Reason: ' + abortReason);

	        if (abortReason instanceof Cancellation) {
	          return;
	        } else if (abortReason instanceof Redirect) {
	          location.replace(Router.makePath(abortReason.to, abortReason.params, abortReason.query));
	        } else {
	          location.pop();
	        }
	      },

	      handleError: options.onError || function (error) {
	        // Throw so we don't silently swallow async errors.
	        throw error; // This error probably originated in a transition hook.
	      },

	      handleLocationChange: function handleLocationChange(change) {
	        Router.dispatch(change.path, change.type);
	      },

	      /**
	       * Performs a transition to the given path and calls callback(error, abortReason)
	       * when the transition is finished. If both arguments are null the router's state
	       * was updated. Otherwise the transition did not complete.
	       *
	       * In a transition, a router first determines which routes are involved by beginning
	       * with the current route, up the route tree to the first parent route that is shared
	       * with the destination route, and back down the tree to the destination route. The
	       * willTransitionFrom hook is invoked on all route handlers we're transitioning away
	       * from, in reverse nesting order. Likewise, the willTransitionTo hook is invoked on
	       * all route handlers we're transitioning to.
	       *
	       * Both willTransitionFrom and willTransitionTo hooks may either abort or redirect the
	       * transition. To resolve asynchronously, they may use the callback argument. If no
	       * hooks wait, the transition is fully synchronous.
	       */
	      dispatch: function dispatch(path, action) {
	        Router.cancelPendingTransition();

	        var prevPath = state.path;
	        var isRefreshing = action == null;

	        if (prevPath === path && !isRefreshing) {
	          return;
	        } // Nothing to do!

	        // Record the scroll position as early as possible to
	        // get it before browsers try update it automatically.
	        if (prevPath && action === LocationActions.PUSH) Router.recordScrollPosition(prevPath);

	        var match = Router.match(path);

	        warning(match != null, 'No route matches path "%s". Make sure you have <Route path="%s"> somewhere in your routes', path, path);

	        if (match == null) match = {};

	        var prevRoutes = state.routes || [];
	        var prevParams = state.params || {};
	        var prevQuery = state.query || {};

	        var nextRoutes = match.routes || [];
	        var nextParams = match.params || {};
	        var nextQuery = match.query || {};

	        var fromRoutes, toRoutes;
	        if (prevRoutes.length) {
	          fromRoutes = prevRoutes.filter(function (route) {
	            return !hasMatch(nextRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });

	          toRoutes = nextRoutes.filter(function (route) {
	            return !hasMatch(prevRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });
	        } else {
	          fromRoutes = [];
	          toRoutes = nextRoutes;
	        }

	        var transition = new Transition(path, Router.replaceWith.bind(Router, path));
	        pendingTransition = transition;

	        var fromComponents = mountedComponents.slice(prevRoutes.length - fromRoutes.length);

	        Transition.from(transition, fromRoutes, fromComponents, function (error) {
	          if (error || transition.abortReason) return dispatchHandler.call(Router, error, transition); // No need to continue.

	          Transition.to(transition, toRoutes, nextParams, nextQuery, function (error) {
	            dispatchHandler.call(Router, error, transition, {
	              path: path,
	              action: action,
	              pathname: match.pathname,
	              routes: nextRoutes,
	              params: nextParams,
	              query: nextQuery
	            });
	          });
	        });
	      },

	      /**
	       * Starts this router and calls callback(router, state) when the route changes.
	       *
	       * If the router's location is static (i.e. a URL path in a server environment)
	       * the callback is called only once. Otherwise, the location should be one of the
	       * Router.*Location objects (e.g. Router.HashLocation or Router.HistoryLocation).
	       */
	      run: function run(callback) {
	        invariant(!Router.isRunning, 'Router is already running');

	        dispatchHandler = function (error, transition, newState) {
	          if (error) Router.handleError(error);

	          if (pendingTransition !== transition) return;

	          pendingTransition = null;

	          if (transition.abortReason) {
	            Router.handleAbort(transition.abortReason);
	          } else {
	            callback.call(Router, Router, nextState = newState);
	          }
	        };

	        if (!(location instanceof StaticLocation)) {
	          if (location.addChangeListener) location.addChangeListener(Router.handleLocationChange);

	          Router.isRunning = true;
	        }

	        // Bootstrap using the current path.
	        Router.refresh();
	      },

	      refresh: function refresh() {
	        Router.dispatch(location.getCurrentPath(), null);
	      },

	      stop: function stop() {
	        Router.cancelPendingTransition();

	        if (location.removeChangeListener) location.removeChangeListener(Router.handleLocationChange);

	        Router.isRunning = false;
	      },

	      getLocation: function getLocation() {
	        return location;
	      },

	      getScrollBehavior: function getScrollBehavior() {
	        return scrollBehavior;
	      },

	      getRouteAtDepth: function getRouteAtDepth(routeDepth) {
	        var routes = state.routes;
	        return routes && routes[routeDepth];
	      },

	      setRouteComponentAtDepth: function setRouteComponentAtDepth(routeDepth, component) {
	        mountedComponents[routeDepth] = component;
	      },

	      /**
	       * Returns the current URL path + query string.
	       */
	      getCurrentPath: function getCurrentPath() {
	        return state.path;
	      },

	      /**
	       * Returns the current URL path without the query string.
	       */
	      getCurrentPathname: function getCurrentPathname() {
	        return state.pathname;
	      },

	      /**
	       * Returns an object of the currently active URL parameters.
	       */
	      getCurrentParams: function getCurrentParams() {
	        return state.params;
	      },

	      /**
	       * Returns an object of the currently active query parameters.
	       */
	      getCurrentQuery: function getCurrentQuery() {
	        return state.query;
	      },

	      /**
	       * Returns an array of the currently active routes.
	       */
	      getCurrentRoutes: function getCurrentRoutes() {
	        return state.routes;
	      },

	      /**
	       * Returns true if the given route, params, and query are active.
	       */
	      isActive: function isActive(to, params, query) {
	        if (PathUtils.isAbsolute(to)) {
	          return to === state.path;
	        }return routeIsActive(state.routes, to) && paramsAreActive(state.params, params) && (query == null || queryIsActive(state.query, query));
	      }

	    },

	    mixins: [ScrollHistory],

	    propTypes: {
	      children: PropTypes.falsy
	    },

	    childContextTypes: {
	      routeDepth: PropTypes.number.isRequired,
	      router: PropTypes.router.isRequired
	    },

	    getChildContext: function getChildContext() {
	      return {
	        routeDepth: 1,
	        router: Router
	      };
	    },

	    getInitialState: function getInitialState() {
	      return state = nextState;
	    },

	    componentWillReceiveProps: function componentWillReceiveProps() {
	      this.setState(state = nextState);
	    },

	    componentWillUnmount: function componentWillUnmount() {
	      Router.stop();
	    },

	    render: function render() {
	      var route = Router.getRouteAtDepth(0);
	      return route ? React.createElement(route.handler, this.props) : null;
	    }

	  });

	  Router.clearAllRoutes();

	  if (options.routes) Router.addRoutes(options.routes);

	  return Router;
	}

	module.exports = createRouter;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createRouter = __webpack_require__(44);

	/**
	 * A high-level convenience method that creates, configures, and
	 * runs a router in one shot. The method signature is:
	 *
	 *   Router.run(routes[, location ], callback);
	 *
	 * Using `window.location.hash` to manage the URL, you could do:
	 *
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 * 
	 * Using HTML5 history and a custom "cursor" prop:
	 * 
	 *   Router.run(routes, Router.HistoryLocation, function (Handler) {
	 *     React.render(<Handler cursor={cursor}/>, document.body);
	 *   });
	 *
	 * Returns the newly created router.
	 *
	 * Note: If you need to specify further options for your router such
	 * as error/abort handling or custom scroll behavior, use Router.create
	 * instead.
	 *
	 *   var router = Router.create(options);
	 *   router.run(function (Handler) {
	 *     // ...
	 *   });
	 */
	function runRouter(routes, location, callback) {
	  if (typeof location === 'function') {
	    callback = location;
	    location = null;
	  }

	  var router = createRouter({
	    routes: routes,
	    location: location
	  });

	  router.run(callback);

	  return router;
	}

	module.exports = runRouter;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	var MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10);
	var index = ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);
	var pid = typeof process === 'undefined' ? Math.floor(Math.random() * 100000) : process.pid % 0xFFFF;

	/**
	 * Determine if an object is Buffer
	 *
	 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * License:  MIT
	 *
	 */
	var isBuffer = function (obj) {
	  return !!(
	  obj != null &&
	  obj.constructor &&
	  typeof obj.constructor.isBuffer === 'function' &&
	  obj.constructor.isBuffer(obj)
	  )
	};

	/**
	 * Create a new immutable ObjectID instance
	 *
	 * @class Represents the BSON ObjectID type
	 * @param {String|Number} arg Can be a 24 byte hex string, 12 byte binary string or a Number.
	 * @return {Object} instance of ObjectID.
	 */
	function ObjectID(arg) {
	  if(!(this instanceof ObjectID)) return new ObjectID(arg);
	  if(arg && ((arg instanceof ObjectID) || arg._bsontype==="ObjectID"))
	    return arg;

	  var buf;

	  if(isBuffer(arg) || (Array.isArray(arg) && arg.length===12)) {
	    buf = Array.prototype.slice.call(arg);
	  }
	  else if(typeof arg === "string") {
	    if(arg.length!==12 && !ObjectID.isValid(arg))
	      throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");

	    buf = buffer(arg);
	  }
	  else if(/number|undefined/.test(typeof arg)) {
	    buf = buffer(generate(arg));
	  }

	  Object.defineProperty(this, "id", {
	    enumerable: true,
	    get: function() { return String.fromCharCode.apply(this, buf); }
	  });
	  Object.defineProperty(this, "str", {
	    get: function() { return buf.map(hex.bind(this, 2)).join(''); }
	  });
	}
	module.exports = ObjectID;
	ObjectID.generate = generate;

	/**
	 * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.
	 *
	 * @param {Number} time an integer number representing a number of seconds.
	 * @return {ObjectID} return the created ObjectID
	 * @api public
	 */
	ObjectID.createFromTime = function(time){
	  time = parseInt(time, 10) % 0xFFFFFFFF;
	  return new ObjectID(hex(8,time)+"0000000000000000");
	};

	/**
	 * Creates an ObjectID from a hex string representation of an ObjectID.
	 *
	 * @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.
	 * @return {ObjectID} return the created ObjectID
	 * @api public
	 */
	ObjectID.createFromHexString = function(hexString) {
	  if(!ObjectID.isValid(hexString))
	    throw new Error("Invalid ObjectID hex string");

	  return new ObjectID(hexString);
	};

	/**
	 * Checks if a value is a valid bson ObjectId
	 *
	 * @param {String} objectid Can be a 24 byte hex string or an instance of ObjectID.
	 * @return {Boolean} return true if the value is a valid bson ObjectID, return false otherwise.
	 * @api public
	 *
	 * THE NATIVE DOCUMENTATION ISN'T CLEAR ON THIS GUY!
	 * http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html#objectid-isvalid
	 */
	ObjectID.isValid = function(objectid) {
	  if(!objectid) return false;

	  //call .toString() to get the hex if we're
	  // working with an instance of ObjectID
	  return /^[0-9A-F]{24}$/i.test(objectid.toString());
	};

	ObjectID.prototype = {
	  _bsontype: 'ObjectID',

	  /**
	   * Return the ObjectID id as a 24 byte hex string representation
	   *
	   * @return {String} return the 24 byte hex string representation.
	   * @api public
	   */
	  toHexString: function() {
	    return this.str;
	  },

	  /**
	   * Compares the equality of this ObjectID with `otherID`.
	   *
	   * @param {Object} other ObjectID instance to compare against.
	   * @return {Boolean} the result of comparing two ObjectID's
	   * @api public
	   */
	  equals: function (other){
	    return !!other && this.str === other.toString();
	  },

	  /**
	   * Returns the generation date (accurate up to the second) that this ID was generated.
	   *
	   * @return {Date} the generation date
	   * @api public
	   */
	  getTimestamp: function(){
	    return new Date(parseInt(this.str.substr(0,8), 16) * 1000);
	  }
	};

	function next() {
	  return index = (index+1) % 0xFFFFFF;
	}

	function generate(time) {
	  if (typeof time !== 'number')
	    time = Date.now()/1000;

	  //keep it in the ring!
	  time = parseInt(time, 10) % 0xFFFFFFFF;

	  //FFFFFFFF FFFFFF FFFF FFFFFF
	  return hex(8,time) + hex(6,MACHINE_ID) + hex(4,pid) + hex(6,next());
	}

	function hex(length, n) {
	  n = n.toString(16);
	  return (n.length===length)? n : "00000000".substring(n.length, length) + n;
	}

	function buffer(str) {
	  var i=0,out=[];

	  if(str.length===24)
	    for(;i<24; out.push(parseInt(str[i]+str[i+1], 16)),i+=2);

	  else if(str.length===12)
	    for(;i<12; out.push(str.charCodeAt(i)),i++);

	  return out;
	}

	/**
	 * Converts to a string representation of this Id.
	 *
	 * @return {String} return the 24 byte hex string representation.
	 * @api private
	 */
	ObjectID.prototype.inspect = function() { return "ObjectID("+this+")" };
	ObjectID.prototype.toJSON = ObjectID.prototype.toHexString;
	ObjectID.prototype.toString = ObjectID.prototype.toHexString;


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(13);
	var _ = __webpack_require__(53);
	var classnames = __webpack_require__(92);
	var CHAR_WIDTH = __webpack_require__(18).CHAR_WIDTH;
	var CHAR_HEIGHT = __webpack_require__(18).CHAR_HEIGHT;
	var getOverlapsOfPotentiallyCircularRanges = __webpack_require__(49);
	var ANNOTATION_HEIGHT = __webpack_require__(18).ANNOTATION_HEIGHT;
	var SPACE_BETWEEN_ANNOTATIONS = __webpack_require__(18).SPACE_BETWEEN_ANNOTATIONS;
	var mixin = __webpack_require__(12).branch;
	var appActions = __webpack_require__(19);



	var RowItem = React.createClass({displayName: "RowItem",
	  mixins: [mixin],
	  cursors: {
	    showFeatures: ['vectorEditorState', 'showFeatures'],
	    showParts: ['vectorEditorState', 'showParts'],
	    showReverseSequence: ['vectorEditorState', 'showReverseSequence'],
	    // sequenceData: ['vectorEditorState', 'sequenceData'],
	    selectionLayer: ['vectorEditorState', 'selectionLayer'],
	    mouse: ['vectorEditorState', 'mouse'],
	    caretPosition: ['vectorEditorState', 'caretPosition'],
	  },
	  facets: {
	    sequenceLength: 'sequenceLength',
	    bpsPerRow: 'bpsPerRow',
	  },

	  getDefaultProps: function() {
	    return {
	      row: {
	        features: {
	        }
	      },
	      showFeatures: true,
	      showReverseSequence: true,
	      
	    };
	  },
	  
	  // onCursorHover: function (argument) {
	  //   // body...
	  // }

	  render: function () {
	    var $__0=  this.props,row=$__0.row;
	    var bpsPerRow = this.state.bpsPerRow;
	    var showFeatures = this.state.showFeatures;
	    var showParts = this.state.showParts;
	    var showReverseSequence = this.state.showReverseSequence;
	    var selectionLayer = this.state.selectionLayer;
	    var caretPosition = this.state.caretPosition;
	    var combinedHeightOfChildElements = 0;
	    var self = this;
	    function createFeatureRawPath ($__0     ) {var xStart=$__0.xStart,yStart=$__0.yStart,height=$__0.height,width=$__0.width,direction=$__0.direction,type=$__0.type;
	      var xEnd = xStart + width;
	      var yEnd = yStart  + height;
	      var path = "M"+xStart+","+ yStart
	                      +" L"+xEnd+","+ yStart
	                      +" L"+xEnd+","+ yEnd
	                      +" L"+xStart+","+yEnd+" Z";
	      return path;
	    }

	    // function makeAnnotation(xStart, yStart, height, length, direction, strokeColor, fill, id, pathMaker) {
	    //   var path = pathMaker(xStart, yStart, height, length, direction, strokeColor);
	    // }
	    // if (showReverseSequence) {
	    //   combinedHeightOfChildElements+= (SPACE_BETWEEN_ANNOTATIONS + ANNOTATION_HEIGHT); //tnrtodo work out these spacing issues
	    // }
	    if (showFeatures) {
	      // combinedHeightOfChildElements+= (row.featuresYOffsetMax + 1) * ANNOTATION_HEIGHT + SPACE_BETWEEN_ANNOTATIONS;
	      var featuresSVG = createAnnotationPaths({
	        annotationRanges: row.features,
	        createAnnotationRawPath: createFeatureRawPath,
	        annotationHeight: ANNOTATION_HEIGHT,
	        spaceBetweenAnnotations: SPACE_BETWEEN_ANNOTATIONS,
	        charWidth: CHAR_WIDTH,
	        // annotationYOffsetMax: row.featuresYOffsetMax,
	      });
	    }

	    if (showParts) {
	      // combinedHeightOfChildElements+= (row.featuresYOffsetMax + 1) * ANNOTATION_HEIGHT + SPACE_BETWEEN_ANNOTATIONS;
	      var partsSVG = createAnnotationPaths({
	        annotationRanges: row.parts,
	        createAnnotationRawPath: createFeatureRawPath,
	        annotationHeight: ANNOTATION_HEIGHT,
	        spaceBetweenAnnotations: SPACE_BETWEEN_ANNOTATIONS,
	        charWidth: CHAR_WIDTH,
	        // annotationYOffsetMax: row.featuresYOffsetMax,
	      });
	    }

	    function getXStartAndWidthOfRowAnnotation(range, bpsPerRow, charWidth) {
	      // 24 bps long: 
	      // 
	      // if (range.end + 1 - range.start > 0 && )
	      // (range.end + 1 - range.start) % bpsPerRow
	      return {
	        xStart: (range.start % bpsPerRow) * charWidth,
	        width: ((range.end + 1 - range.start)) * charWidth,
	      };
	    }

	    function createAnnotationPaths($__0    ) {var annotationRanges=$__0.annotationRanges,createAnnotationRawPath=$__0.createAnnotationRawPath,annotationHeight=$__0.annotationHeight,spaceBetweenAnnotations=$__0.spaceBetweenAnnotations,charWidth=$__0.charWidth;
	      if (annotationRanges.length === 0) {
	        return [];
	      }
	      var maxAnnotationYOffset = 0;
	      var annotationsSVG = _.map(annotationRanges, function(annotationRange) {
	        if (annotationRange.yOffset > maxAnnotationYOffset) {
	          maxAnnotationYOffset = annotationRange.yOffset;
	        }
	        // var overlapPaths = annotationRange.overlaps.map(function(overlap) {
	          // console.log(annotationRange);
	          var annotation = annotationRange.annotation; 

	          var drawingParameters = {
	            xStart: (annotationRange.start % bpsPerRow) * charWidth,
	            width: ((annotationRange.end + 1 - annotationRange.start)) * charWidth,
	            yStart: annotationRange.yOffset * (annotationHeight + spaceBetweenAnnotations),
	            height: annotationHeight,
	            type: annotationRange.type,
	            topStrand: annotation.topStrand,
	          };
	          var path = createAnnotationRawPath(drawingParameters);

	          var attributes = {
	            classnames: classnames(annotation.id, annotation.type),
	            strokeColor: annotation.color, 
	            fill: annotation.color,
	            path: path,
	            fillOpacity: 0.4, //come back and change this to a passed var
	          };
	          var annotationPath = createAnnotationPath(attributes);
	          return annotationPath;
	        // });
	        // return (overlapPaths);

	        function createAnnotationPath ($__0    ) {var strokeColor=$__0.strokeColor,fill=$__0.fill,classnames=$__0.classnames,path=$__0.path,fillOpacity=$__0.fillOpacity;
	            return(React.createElement("path", {className: classnames, d: path, stroke: strokeColor, fillOpacity: fillOpacity, fill: fill}));
	        }
	      });
	      var height = (maxAnnotationYOffset + 1) * (annotationHeight + spaceBetweenAnnotations);
	      return (
	        React.createElement("svg", {className: "annotationContainer", width: "100%", height: height}, 
	          annotationsSVG
	        )
	        );
	    }

	    var fontSize = CHAR_WIDTH + "px";
	    var textStyle = {
	      fontSize: fontSize,
	      fontFamily: "'Courier New', Courier, monospace", 
	      // transform: "scale(2,1)",
	      // width: "100%"
	    };
	    var highlightLayerStyle = {
	      height: "90%",
	      // width: "100%",
	      background: 'blue',
	      position: "absolute",
	      top: "0",
	      // left: "0",
	      // fillOpacity: ".3",
	      opacity: ".3",
	    };

	    var cursorStyle = {
	      height: "90%",
	      // width: "100%",
	      background: 'black',
	      position: "absolute",
	      top: "0",
	      width: "2px",
	      cursor: "ew-resize",
	      // left: "0",
	      // fillOpacity: "1",
	      // opacity: ".3",
	    };
	    
	    var selectionCursorStart;
	    var selectionCursorEnd;
	    var highlightLayerForRow = getHighlightLayerForRow(selectionLayer, row, bpsPerRow, highlightLayerStyle, CHAR_WIDTH, cursorStyle);
	    function getHighlightLayerForRow(selectionLayer, row, bpsPerRow, highlightLayerStyle, charWidth, cursorStyle) {
	      var overlaps = getOverlapsOfPotentiallyCircularRanges(selectionLayer, row);
	      var selectionLayers = overlaps.map(function (overlap) {
	        if (overlap.start === selectionLayer.start) {
	          selectionCursorStart = getCursorForRow(overlap.start, row, bpsPerRow, cursorStyle, charWidth);
	        }
	        if (overlap.end === selectionLayer.end) {
	          selectionCursorEnd = getCursorForRow(overlap.end + 1, row, bpsPerRow, cursorStyle, charWidth);
	        }
	        var $__0=   getXStartAndWidthOfRowAnnotation(overlap, bpsPerRow, charWidth),xStart=$__0.xStart,width=$__0.width;
	        highlightLayerStyle.width = width;
	        highlightLayerStyle.left = xStart;
	        return (React.createElement("div", {className: "selectionLayer", style: highlightLayerStyle}));
	      });
	      return selectionLayers;
	    }

	    

	    var cursor = getCursorForRow(caretPosition, row, bpsPerRow, cursorStyle, CHAR_WIDTH);
	    function getCursorForRow (caretPosition, row, bpsPerRow, cursorStyle, charWidth) {
	      if(row.start<= caretPosition && row.end + 1 >= caretPosition || (row.end === self.state.sequenceLength - 1 && row.end < caretPosition) ) {
	        //the second logical operator catches the special case where we're at the very end of the sequence..
	        var newCursorStyle = _.assign({}, cursorStyle, {left: (caretPosition - row.start) * charWidth});
	        return (React.createElement("div", {className: "cursor", style: newCursorStyle}));
	        // onHover={self.onCursorHover}
	      }
	    }


	    // var enclosingTextDivStyle = {
	    //   width: "100%"
	    // };
	    // console.log( (CHAR_WIDTH * (row.sequence.length - 1))); //tnr: -1 because everything else we're drawing is 0-based whereas the length is 1 based
	    //maybe use text-align middle with the x-position in the middle of the block.. something seems just a touch off with the character width stuff...
	    //not sure what it is exactly...
	    //should probably change the row.sequence.length -1 to no -1
	    //text-anchor="middle"
	    
	    // var sequenceArray = row.sequence.split("");
	    // charArray = [];
	    // sequenceArray.forEach(function (char, index) {
	    //   var left = CHAR_WIDTH * index - (CHAR_WIDTH/2)
	    //   sequenceTextStyle = {
	    //   display: "inline",
	    //   position: "absolute",
	    //   left: left,
	    // }
	    //   // charArray.left = CHAR_WIDTH * i + (CHAR_WIDTH/2);
	    //   // {left: CHAR_WIDTH * i + (CHAR_WIDTH/2)}
	    //   charArray.push(
	    //     <div style={sequenceTextStyle}> 
	    //       {char}
	    //     </div>
	    //   )
	    // })
	    

	    // if (charArray.length > 0) {
	    //   var sequenceText = (
	    //     <div>
	    //       {charArray}
	    //     </div>
	    //     )
	    // }

	            // {sequenceText}


	    // for (var i = 0; i < row.sequence.length; i++) {
	    //   // var left = CHAR_WIDTH * i + (CHAR_WIDTH/2)
	    //   charArray.left = CHAR_WIDTH * i + (CHAR_WIDTH/2);
	    //   // {left: CHAR_WIDTH * i + (CHAR_WIDTH/2)}
	    //   charArray.push(
	    //     <div style={sequenceTextStyle}> 
	    //       {row.sequence[i]}
	    //     </div>
	    //   )
	    // };
	    // return charArray;
	    var rowContainerStyle = {
	      overflow: "hidden",
	      position: "relative",
	      width: "100%",
	    };

	    var textHTML = 
	    '<text font-family="Courier New, Courier, monospace" x="'+ (CHAR_WIDTH/4) + '" y="10" textLength="'+ (CHAR_WIDTH * (row.sequence.length)) + '" length-adjust="spacing">' + row.sequence + '</text>'
	    // console.log(row);
	    // var className = "row" + row.rowNumber;
	      // <div className={className}>
	    return (
	        React.createElement("div", {className: "rowContainer", 
	          style: rowContainerStyle, 
	          onClick: this.onClick, 
	          onMouseMove: this.onMouseMove, 
	          onMouseUp: this.onMouseUp, 
	          onMouseDown: this.onMouseDown
	          }, 
	            featuresSVG, 
	            partsSVG, 
	            React.createElement("svg", {ref: "textContainer", className: "textContainer", width: "100%", height: CHAR_WIDTH, dangerouslySetInnerHTML: {__html: textHTML}}), 
	            row.rowNumber, 
	            "//", 
	            row.start, 
	            highlightLayerForRow, 
	            selectionCursorStart, 
	            selectionCursorEnd, 
	            cursor
	        )
	    );
	  }
	});


	// <div style={textStyle}>
	//             {row.sequence}
	//           </div>

	// <div fontSize={fontSize} fontFamily="'Courier New', Courier, monospace">

	// <svg className= "textContainer" width="100%" height={CHAR_HEIGHT}>
	//             <text fontSize={fontSize} fontFamily="'Courier New', Courier, monospace" style={{"textLength": 100}} lengthAdjust="spacingAndGlyphs">
	//               {row.sequence}
	//             </text> 
	//           </svg>

	module.exports = RowItem;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var isPositiveInteger = __webpack_require__(89);

	module.exports = function arePositiveIntegers() {
	  if (arguments) {
	  	var args = Array.prototype.slice.call(arguments); //convert the arguments into a normal array so we can use the every method on it
	    return args.every(function(argument) {
	      return isPositiveInteger(argument);
	    });
	  } else {
	    console.warn("no inputs passed");
	    return false;
	  }
	};

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var arePositiveIntegers = __webpack_require__(48);
	//returns an array of the overlaps between two potentially circular ranges
	module.exports = function getOverlapsOfPotentiallyCircularRanges(rangeA, rangeB, maxLength) {
	  if (!arePositiveIntegers(rangeA.start, rangeA.end, rangeB.start, rangeB.end)) {
	    console.warn("unable to calculate ranges of  inputs");
	    return [];
	  }
	  var normalizedRangeA = splitRangeIntoTwoPartsIfItIsCircular(rangeA, maxLength);
	  var normalizedRangeB = splitRangeIntoTwoPartsIfItIsCircular(rangeB, maxLength);

	  var overlaps = [];
	  normalizedRangeA.forEach(function(nonCircularRangeA) {
	    normalizedRangeB.forEach(function(nonCircularRangeB) {
	      var overlap = getOverlapOfNonCircularRanges(nonCircularRangeA, nonCircularRangeB);
	      if (overlap) {
	        overlaps.push(overlap);
	      }
	    });
	  });
	  
	  return overlaps;
	};

	//takes a potentially circular range and returns an array containing the range split on the origin
	function splitRangeIntoTwoPartsIfItIsCircular(range, maxLength) {
	  if (range.start <= range.end) {
	    //the range isn't circular, so we just return the range
	    return [{
	      start: range.start,
	      end: range.end
	    }];
	  } else {
	    //the range is cicular, so we return an array of two ranges
	    return [{
	      start: 0,
	      end: range.end
	    }, {
	      start: range.start,
	      end: maxLength - 1
	    }];
	  }
	}

	function getOverlapOfNonCircularRanges(rangeA, rangeB) {
	  if (!arePositiveIntegers(rangeA.start, rangeA.end, rangeB.start, rangeB.end)) {
	    console.warn("unable to calculate ranges of  inputs");
	    return null;
	  }
	  if (rangeA.start < rangeB.start) {
	    if (rangeA.end < rangeB.start) {
	      //no overlap
	    } else {
	      if (rangeA.end < rangeB.end) {
	        return {
	          start: rangeB.start,
	          end: rangeA.end
	        };
	      } else {
	        return {
	          start: rangeB.start,
	          end: rangeB.end
	        };
	      }
	    }
	  } else {
	    if (rangeA.start > rangeB.end) {
	      //no overlap
	    } else {
	      if (rangeA.end < rangeB.end) {
	        return {
	          start: rangeA.start,
	          end: rangeA.end
	        };
	      } else {
	        return {
	          start: rangeA.start,
	          end: rangeB.end
	        };
	      }
	    }
	  }
	}

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(91);


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Baobab Data Structure
	 * ======================
	 *
	 * A handy data tree with cursors.
	 */
	var Cursor = __webpack_require__(93),
	    EventEmitter = __webpack_require__(166),
	    Facet = __webpack_require__(94),
	    helpers = __webpack_require__(52),
	    update = __webpack_require__(95),
	    merge = __webpack_require__(96),
	    defaults = __webpack_require__(97),
	    type = __webpack_require__(98);

	function complexHash(type) {
	  return type + '$' +
	    (new Date()).getTime() + (''  + Math.random()).replace('0.', '');
	}

	/**
	 * Main Class
	 */
	function Baobab(initialData, opts) {
	  if (arguments.length < 1)
	    initialData = {};

	  // New keyword optional
	  if (!(this instanceof Baobab))
	    return new Baobab(initialData, opts);

	  if (!type.Object(initialData) && !type.Array(initialData))
	    throw Error('Baobab: invalid data.');

	  // Extending
	  EventEmitter.call(this);

	  // Merging defaults
	  this.options = helpers.shallowMerge(defaults, opts);

	  // Privates
	  this._transaction = {};
	  this._future = undefined;
	  this._cursors = {};
	  this._identity = '[object Baobab]';

	  // Properties
	  this.data = helpers.deepClone(initialData);
	  this.root = this.select([]);
	  this.facets = {};

	  // Boostrapping root cursor's methods
	  function bootstrap(name) {
	    this[name] = function() {
	      var r = this.root[name].apply(this.root, arguments);
	      return r instanceof Cursor ? this : r;
	    };
	  }

	  ['get', 'set', 'unset', 'update'].forEach(bootstrap.bind(this));

	  // Facets
	  if (!type.Object(this.options.facets))
	    throw Error('Baobab: invalid facets.');

	  for (var k in this.options.facets)
	    this.addFacet(k, this.options.facets[k]);
	}

	helpers.inherits(Baobab, EventEmitter);

	/**
	 * Prototype
	 */
	Baobab.prototype.addFacet = function(name, definition, args) {
	  this.facets[name] = this.createFacet(definition, args);
	  return this;
	};

	Baobab.prototype.createFacet = function(definition, args) {
	  return new Facet(this, definition, args);
	};

	Baobab.prototype.select = function(path) {
	  if (arguments.length > 1)
	    path = helpers.arrayOf(arguments);

	  if (!type.Path(path))
	    throw Error('Baobab.select: invalid path.');

	  // Casting to array
	  path = [].concat(path);

	  // Complex path?
	  var complex = type.ComplexPath(path);

	  var solvedPath;

	  if (complex)
	    solvedPath = helpers.solvePath(this.data, path, this);

	  // Registering a new cursor or giving the already existing one for path
	  var hash = path.map(function(step) {
	    if (type.Function(step))
	      return complexHash('fn');
	    else if (type.Object(step))
	      return complexHash('ob');
	    else
	      return step;
	  }).join('|λ|');

	  if (!this._cursors[hash]) {
	    var cursor = new Cursor(this, path, solvedPath, hash);
	    this._cursors[hash] = cursor;
	    return cursor;
	  }
	  else {
	    return this._cursors[hash];
	  }
	};

	Baobab.prototype.stack = function(spec, skipMerge) {
	  var self = this;

	  if (!type.Object(spec))
	    throw Error('Baobab.update: wrong specification.');

	  this._transaction = (skipMerge && !Object.keys(this._transaction).length) ?
	    spec :
	    merge(this._transaction, spec);

	  // Should we let the user commit?
	  if (!this.options.autoCommit)
	    return this;

	  // Should we update synchronously?
	  if (!this.options.asynchronous)
	    return this.commit();

	  // Updating asynchronously
	  if (!this._future)
	    this._future = setTimeout(self.commit.bind(self, null), 0);

	  return this;
	};

	Baobab.prototype.commit = function() {
	  var self = this;

	  // Applying modifications
	  var result = update(this.data, this._transaction, this.options);

	  var oldData = this.data;

	  // Resetting
	  this._transaction = {};

	  if (this._future)
	    this._future = clearTimeout(this._future);

	  // Validate?
	  var validate = this.options.validate,
	      behavior = this.options.validationBehavior;

	  if (typeof validate === 'function') {
	    var error = validate.call(this, oldData, result.data, result.log);

	    if (error instanceof Error) {
	      this.emit('invalid', {error: error});

	      if (behavior === 'rollback')
	        return this;
	    }
	  }

	  // Switching tree's data
	  this.data = result.data;

	  // Baobab-level update event
	  this.emit('update', {
	    log: result.log,
	    previousState: oldData
	  });

	  return this;
	};

	Baobab.prototype.release = function() {
	  var k;

	  delete this.data;
	  delete this._transaction;

	  // Releasing cursors
	  for (k in this._cursors)
	    this._cursors[k].release();
	  delete this._cursors;

	  // Releasing facets
	  for (k in this.facets)
	    this.facets[k].release();
	  delete this.facets;

	  // Killing event emitter
	  this.kill();
	};

	/**
	 * Output
	 */
	Baobab.prototype.toJSON = function() {
	  return this.get();
	};

	Baobab.prototype.toString = function() {
	  return this._identity;
	};

	/**
	 * Export
	 */
	module.exports = Baobab;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Baobab Helpers
	 * ===============
	 *
	 * Miscellaneous helper functions.
	 */
	var type = __webpack_require__(98);

	// Make a real array of an array-like object
	function arrayOf(o) {
	  return Array.prototype.slice.call(o);
	}

	// Decorate a function by applying something before it
	function before(decorator, fn) {
	  return function() {
	    decorator();
	    fn.apply(null, arguments);
	  };
	}

	// Non-mutative splice function
	function splice(array, index, nb /*, &elements */) {
	  var elements = arrayOf(arguments).slice(3);

	  return array
	    .slice(0, index)
	    .concat(elements)
	    .concat(array.slice(index + nb));
	}

	// Shallow merge
	function shallowMerge(o1, o2) {
	  var o = {},
	      k;

	  for (k in o1) o[k] = o1[k];
	  for (k in o2) o[k] = o2[k];

	  return o;
	}

	// Clone a regexp
	function cloneRegexp(re) {
	  var pattern = re.source,
	      flags = '';

	  if (re.global) flags += 'g';
	  if (re.multiline) flags += 'm';
	  if (re.ignoreCase) flags += 'i';
	  if (re.sticky) flags += 'y';
	  if (re.unicode) flags += 'u';

	  return new RegExp(pattern, flags);
	}

	// Cloning function
	function clone(deep, item) {
	  if (!item ||
	      typeof item !== 'object' ||
	      item instanceof Error ||
	      ('ArrayBuffer' in global && item instanceof ArrayBuffer))
	    return item;

	  // Array
	  if (type.Array(item)) {
	    if (deep) {
	      var i, l, a = [];
	      for (i = 0, l = item.length; i < l; i++)
	        a.push(deepClone(item[i]));
	      return a;
	    }
	    else {
	      return item.slice(0);
	    }
	  }

	  // Date
	  if (type.Date(item))
	    return new Date(item.getTime());

	  // RegExp
	  if (item instanceof RegExp)
	    return cloneRegexp(item);

	  // Object
	  if (type.Object(item)) {
	    var k, o = {};

	    if (item.constructor && item.constructor !== Object)
	      o = Object.create(item.constructor.prototype);

	    for (k in item)
	      if (item.hasOwnProperty(k))
	        o[k] = deep ? deepClone(item[k]) : item[k];
	    return o;
	  }

	  return item;
	}

	// Shallow & deep cloning functions
	var shallowClone = clone.bind(null, false),
	    deepClone = clone.bind(null, true);

	// Simplistic composition
	function compose(fn1, fn2) {
	  return function(arg) {
	    return fn2(fn1(arg));
	  };
	}

	// Get first item matching predicate in list
	function first(a, fn) {
	  var i, l;
	  for (i = 0, l = a.length; i < l; i++) {
	    if (fn(a[i]))
	      return a[i];
	  }
	  return;
	}

	function index(a, fn) {
	  var i, l;
	  for (i = 0, l = a.length; i < l; i++) {
	    if (fn(a[i]))
	      return i;
	  }
	  return -1;
	}

	// Compare object to spec
	function compare(object, spec) {
	  var ok = true,
	      k;

	  // If we reached here via a recursive call, object may be undefined because
	  // not all items in a collection will have the same deep nesting structure
	  if (!object) {
	    return false;
	  }

	  for (k in spec) {
	    if (type.Object(spec[k])) {
	      ok = ok && compare(object[k], spec[k]);
	    }
	    else if (type.Array(spec[k])) {
	      ok = ok && !!~spec[k].indexOf(object[k]);
	    }
	    else {
	      if (object[k] !== spec[k])
	        return false;
	    }
	  }

	  return ok;
	}

	function firstByComparison(object, spec) {
	  return first(object, function(e) {
	    return compare(e, spec);
	  });
	}

	function indexByComparison(object, spec) {
	  return index(object, function(e) {
	    return compare(e, spec);
	  });
	}

	// Retrieve nested objects
	function getIn(object, path, tree) {
	  path = path || [];

	  var c = object,
	      p,
	      i,
	      l;

	  for (i = 0, l = path.length; i < l; i++) {
	    if (!c)
	      return;

	    if (typeof path[i] === 'function') {
	      if (!type.Array(c))
	        return;

	      c = first(c, path[i]);
	    }
	    else if (typeof path[i] === 'object') {
	      if (tree && '$cursor' in path[i]) {
	        if (!type.Path(path[i].$cursor))
	          throw Error('baobab.getIn: $cursor path must be an array.');

	        p = tree.get(path[i].$cursor);
	        c = c[p];
	      }

	      else if (!type.Array(c)) {
	        return;
	      }

	      else {
	        c = firstByComparison(c, path[i]);
	      }
	    }
	    else {
	      c = c[path[i]];
	    }
	  }

	  return c;
	}

	// Solve a complex path
	function solvePath(object, path, tree) {
	  var solvedPath = [],
	      c = object,
	      idx,
	      i,
	      l;

	  for (i = 0, l = path.length; i < l; i++) {
	    if (!c)
	      return null;

	    if (typeof path[i] === 'function') {
	      if (!type.Array(c))
	        return;

	      idx = index(c, path[i]);
	      solvedPath.push(idx);
	      c = c[idx];
	    }
	    else if (typeof path[i] === 'object') {
	      if (tree && '$cursor' in path[i]) {
	        if (!type.Path(path[i].$cursor))
	          throw Error('baobab.getIn: $cursor path must be an array.');

	        p = tree.get(path[i].$cursor);
	        solvedPath.push(p);
	        c = c[p];
	      }

	      else if (!type.Array(c)) {
	        return;
	      }

	      else {
	        idx = indexByComparison(c, path[i]);
	        solvedPath.push(idx);
	        c = c[idx];
	      }
	    }
	    else {
	      solvedPath.push(path[i]);
	      c = c[path[i]] || {};
	    }
	  }

	  return solvedPath;
	}

	// Determine whether an update should fire for the given paths
	// NOTES: 1) if performance becomes an issue, the threefold loop can be
	//           simplified to become a complex twofold one.
	//        2) a regex version could also work but I am not confident it would be
	//           faster.
	function solveUpdate(log, paths) {
	  var i, j, k, l, m, n, p, c, s;

	  // Looping through possible paths
	  for (i = 0, l = paths.length; i < l; i++) {
	    p = paths[i];

	    // Looping through logged paths
	    for (j = 0, m = log.length; j < m; j++) {
	      c = log[j];

	      // Looping through steps
	      for (k = 0, n = c.length; k < n; k++) {
	        s = c[k];

	        // If path is not relevant, we break
	        if (s != p[k])
	          break;

	        // If we reached last item and we are relevant
	        if (k + 1 === n || k + 1 === p.length)
	          return true;
	      }
	    }
	  }

	  return false;
	}

	// Return a fake object relative to the given path
	function pathObject(path, spec) {
	  var l = path.length,
	      o = {},
	      c = o,
	      i;

	  if (!l)
	    o = spec;

	  for (i = 0; i < l; i++) {
	    c[path[i]] = (i + 1 === l) ? spec : {};
	    c = c[path[i]];
	  }

	  return o;
	}

	// Shim used for cross-compatible event emitting extension
	function inherits(ctor, superCtor) {
	  ctor.super_ = superCtor;
	  var TempCtor = function () {};
	  TempCtor.prototype = superCtor.prototype;
	  ctor.prototype = new TempCtor();
	  ctor.prototype.constructor = ctor;
	}

	// Archive
	function archive(size) {
	  var records = [];

	  return {
	    add: function(record) {
	      records.unshift(record);

	      if (records.length > size)
	        records.length = size;
	    },
	    back: function(steps) {
	      var record = records[steps - 1];

	      if (record)
	        records = records.slice(steps);
	      return record;
	    },
	    get: function() {
	      return records;
	    }
	  };
	}

	module.exports = {
	  archive: archive,
	  arrayOf: arrayOf,
	  before: before,
	  deepClone: deepClone,
	  shallowClone: shallowClone,
	  shallowMerge: shallowMerge,
	  compose: compose,
	  getIn: getIn,
	  inherits: inherits,
	  pathObject: pathObject,
	  solvePath: solvePath,
	  solveUpdate: solveUpdate,
	  splice: splice
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.7.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.7.0';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_DROP_WHILE_FLAG = 0,
	      LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]+|(["'])(?:(?!\1)[^\n\\]|\\.)*?)\1\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp` [special characters](http://www.regular-expressions.info/characters.html#special).
	   * In addition to special characters the forward slash is escaped to allow for
	   * easier `eval` use and `Function` compilation.
	   */
	  var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to detect and test for whitespace. */
	  var whitespace = (
	    // Basic whitespace characters.
	    ' \t\x0b\f\xa0\ufeff' +

	    // Line terminators.
	    '\n\r\u2028\u2029' +

	    // Unicode category "Zs" space separators.
	    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
	  );

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'document',
	    'isFinite', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    'window'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used as an internal `_.debounce` options object by `_.throttle`. */
	  var debounceOptions = {
	    'leading': false,
	    'maxWait': 0,
	    'trailing': false
	  };

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it is the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare to `other`.
	   * @param {*} other The value to compare to `value`.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsReflexive = value === value,
	          othIsReflexive = other === other;

	      if (value > other || !valIsReflexive || (value === undefined && othIsReflexive)) {
	        return 1;
	      }
	      if (value < other || !othIsReflexive || (other === undefined && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it is not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    if (typeof value == 'string') {
	      return value;
	    }
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.max` and `_.min` as the default callback for string values.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the code unit of the first character of the string.
	   */
	  function charAtCallback(string) {
	    return string.charCodeAt(0);
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare to `other`.
	   * @param {Object} other The object to compare to `object`.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of each element
	   * in a collection and stable sort them in the following order:
	   *
	   * If `orders` is unspecified, sort in ascending order for all properties.
	   * Otherwise, for each property, sort in ascending order if its corresponding value in
	   * orders is true, and descending order if false.
	   *
	   * @private
	   * @param {Object} object The object to compare to `other`.
	   * @param {Object} other The object to compare to `object`.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        return result * (orders[index] ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled
	   * string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to detect DOM support. */
	    var document = (document = context.window) && document.document;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the [`toStringTag`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = context._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      escapeRegExp(objToString)
	      .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = isNative(ArrayBuffer = context.ArrayBuffer) && ArrayBuffer,
	        bufferSlice = isNative(bufferSlice = ArrayBuffer && new ArrayBuffer(0).slice) && bufferSlice,
	        ceil = Math.ceil,
	        clearTimeout = context.clearTimeout,
	        floor = Math.floor,
	        getOwnPropertySymbols = isNative(getOwnPropertySymbols = Object.getOwnPropertySymbols) && getOwnPropertySymbols,
	        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
	        push = arrayProto.push,
	        preventExtensions = isNative(Object.preventExtensions = Object.preventExtensions) && preventExtensions,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = isNative(Set = context.Set) && Set,
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = isNative(Uint8Array = context.Uint8Array) && Uint8Array,
	        WeakMap = isNative(WeakMap = context.WeakMap) && WeakMap;

	    /** Used to clone array buffers. */
	    var Float64Array = (function() {
	      // Safari 5 errors when using an array buffer to initialize a typed array
	      // where the array buffer's `byteLength` is not a multiple of the typed
	      // array's `BYTES_PER_ELEMENT`.
	      try {
	        var func = isNative(func = context.Float64Array) && func,
	            result = new func(new ArrayBuffer(10), 0, 1) && func;
	      } catch(e) {}
	      return result;
	    }());

	    /** Used as `baseAssign`. */
	    var nativeAssign = (function() {
	      // Avoid `Object.assign` in Firefox 34-37 which have an early implementation
	      // with a now defunct try/catch behavior. See https://bugzilla.mozilla.org/show_bug.cgi?id=1103344
	      // for more details.
	      //
	      // Use `Object.preventExtensions` on a plain object instead of simply using
	      // `Object('x')` because Chrome and IE fail to throw an error when attempting
	      // to assign values to readonly indexes of strings in strict mode.
	      var object = { '1': 0 },
	          func = preventExtensions && isNative(func = Object.assign) && func;

	      try { func(preventExtensions(object), 'xo'); } catch(e) {}
	      return !object[1] && func;
	    }());

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
	        nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
	        nativeIsFinite = context.isFinite,
	        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = isNative(nativeNow = Date.now) && nativeNow,
	        nativeNumIsFinite = isNative(nativeNumIsFinite = Number.isFinite) && nativeNumIsFinite,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1,
	        MAX_ARRAY_INDEX =  MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /** Used as the size, in bytes, of each `Float64Array` element. */
	    var FLOAT64_BYTES_PER_ELEMENT = Float64Array ? Float64Array.BYTES_PER_ELEMENT : 0;

	    /**
	     * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that return a boolean or single value will
	     * automatically end the chain returning the unwrapped value. Explicit chaining
	     * may be enabled using `_.chain`. The execution of chained methods is lazy,
	     * that is, execution is deferred until `_#value` is implicitly or explicitly
	     * called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization that merges iteratees to avoid creating intermediate
	     * arrays and reduce the number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defer`, `delay`,
	     * `difference`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `fill`,
	     * `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`, `forEach`,
	     * `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `functions`,
	     * `groupBy`, `indexBy`, `initial`, `intersection`, `invert`, `invoke`, `keys`,
	     * `keysIn`, `map`, `mapValues`, `matches`, `matchesProperty`, `memoize`,
	     * `merge`, `mixin`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `reverse`,
	     * `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`, `sortByOrder`, `splice`,
	     * `spread`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`,
	     * `throttle`, `thru`, `times`, `toArray`, `toPlainObject`, `transform`,
	     * `union`, `uniq`, `unshift`, `unzip`, `values`, `valuesIn`, `where`,
	     * `without`, `wrap`, `xor`, `zip`, and `zipObject`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `clone`, `cloneDeep`, `deburr`,
	     * `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
	     * `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`, `has`,
	     * `identity`, `includes`, `indexOf`, `inRange`, `isArguments`, `isArray`,
	     * `isBoolean`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isError`, `isFinite`
	     * `isFunction`, `isMatch`, `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`,
	     * `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `isTypedArray`,
	     * `join`, `kebabCase`, `last`, `lastIndexOf`, `max`, `min`, `noConflict`,
	     * `noop`, `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`,
	     * `reduce`, `reduceRight`, `repeat`, `result`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`, `startsWith`,
	     * `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`, `unescape`,
	     * `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    (function(x) {
	      var Ctor = function() { this.x = x; },
	          object = { '0': x, 'length': x },
	          props = [];

	      Ctor.prototype = { 'valueOf': x, 'y': x };
	      for (var key in new Ctor) { props.push(key); }

	      /**
	       * Detect if functions can be decompiled by `Function#toString`
	       * (all but Firefox OS certified apps, older Opera mobile browsers, and
	       * the PlayStation 3; forced `false` for Windows 8 apps).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.funcDecomp = /\bthis\b/.test(function() { return this; });

	      /**
	       * Detect if `Function#name` is supported (all but IE).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.funcNames = typeof Function.name == 'string';

	      /**
	       * Detect if the DOM is supported.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      try {
	        support.dom = document.createDocumentFragment().nodeType === 11;
	      } catch(e) {
	        support.dom = false;
	      }

	      /**
	       * Detect if `arguments` object indexes are non-enumerable.
	       *
	       * In Firefox < 4, IE < 9, PhantomJS, and Safari < 5.1 `arguments` object
	       * indexes are non-enumerable. Chrome < 25 and Node.js < 0.11.0 treat
	       * `arguments` object indexes as non-enumerable and fail `hasOwnProperty`
	       * checks for indexes that exceed the number of function parameters and
	       * whose associated argument values are `0`.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      try {
	        support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);
	      } catch(e) {
	        support.nonEnumArgs = true;
	      }
	    }(1, 0));

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = null;
	      this.__dir__ = 1;
	      this.__dropCount__ = 0;
	      this.__filtered__ = false;
	      this.__iteratees__ = null;
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = null;
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var actions = this.__actions__,
	          iteratees = this.__iteratees__,
	          views = this.__views__,
	          result = new LazyWrapper(this.__wrapped__);

	      result.__actions__ = actions ? arrayCopy(actions) : null;
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = iteratees ? arrayCopy(iteratees) : null;
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = views ? arrayCopy(views) : null;
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value();
	      if (!isArray(array)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var dir = this.__dir__,
	          isRight = dir < 0,
	          view = getView(0, array.length, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          takeCount = nativeMin(length, this.__takeCount__),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees ? iteratees.length : 0,
	          resIndex = 0,
	          result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type;

	          if (type == LAZY_DROP_WHILE_FLAG) {
	            if (data.done && (isRight ? (index > data.index) : (index < data.index))) {
	              data.count = 0;
	              data.done = false;
	            }
	            data.index = index;
	            if (!data.done) {
	              var limit = data.limit;
	              if (!(data.done = limit > -1 ? (data.count++ >= limit) : !iteratee(value))) {
	                continue outer;
	              }
	            }
	          } else {
	            var computed = iteratee(value);
	            if (type == LAZY_MAP_FLAG) {
	              value = computed;
	            } else if (!computed) {
	              if (type == LAZY_FILTER_FLAG) {
	                continue outer;
	              } else {
	                break outer;
	              }
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.max` for arrays without support for iteratees.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     */
	    function arrayMax(array) {
	      var index = -1,
	          length = array.length,
	          result = NEGATIVE_INFINITY;

	      while (++index < length) {
	        var value = array[index];
	        if (value > result) {
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.min` for arrays without support for iteratees.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     */
	    function arrayMin(array) {
	      var index = -1,
	          length = array.length,
	          result = POSITIVE_INFINITY;

	      while (++index < length) {
	        var value = array[index];
	        if (value < result) {
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `_.sum` for arrays without support for iteratees.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array) {
	      var length = array.length,
	          result = 0;

	      while (length--) {
	        result += +array[length] || 0;
	      }
	      return result;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var props = keys(source);
	      push.apply(props, getSymbols(source));

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    var baseAssign = nativeAssign || function(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, getSymbols(source), baseCopy(source, keys(source), object));
	    };

	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          length = collection.length,
	          isArr = isLength(length),
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function Object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          Object.prototype = prototype;
	          var result = new Object;
	          Object.prototype = null;
	        }
	        return result || context.Object();
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= 200) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} isDeep Specify a deep flatten.
	     * @param {boolean} isStrict Restrict flattening to arrays and `arguments` objects.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];

	        if (isObjectLike(value) && isLength(value.length) && (isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            value = baseFlatten(value, isDeep, isStrict);
	          }
	          var valIndex = -1,
	              valLength = value.length;

	          result.length += valLength;
	          while (++valIndex < valLength) {
	            result[++resIndex] = value[valIndex];
	          }
	        } else if (!isStrict) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = -1,
	          length = path.length;

	      while (object != null && ++index < length) {
	        var result = object = object[path[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      // Exit early for identical values.
	      if (value === other) {
	        // Treat `+0` vs. `-0` as not equal.
	        return value !== 0 || (1 / value == 1 / other);
	      }
	      var valType = typeof value,
	          othType = typeof other;

	      // Exit early for unlike primitive values.
	      if ((valType != 'function' && valType != 'object' && othType != 'function' && othType != 'object') ||
	          value == null || other == null) {
	        // Return `false` unless both values are `NaN`.
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var valWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (valWrapped || othWrapped) {
	          return equalFunc(valWrapped ? object.value() : object, othWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The source property names to match.
	     * @param {Array} values The source values to match.
	     * @param {Array} strictCompareFlags Strict comparison flags for source values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, props, values, strictCompareFlags, customizer) {
	      var index = -1,
	          length = props.length,
	          noCustomizer = !customizer;

	      while (++index < length) {
	        if ((noCustomizer && strictCompareFlags[index])
	              ? values[index] !== object[props[index]]
	              : !(props[index] in object)
	            ) {
	          return false;
	        }
	      }
	      index = -1;
	      while (++index < length) {
	        var key = props[index],
	            objValue = object[key],
	            srcValue = values[index];

	        if (noCustomizer && strictCompareFlags[index]) {
	          var result = objValue !== undefined || (key in object);
	        } else {
	          result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (result === undefined) {
	            result = baseIsEqual(srcValue, objValue, customizer, true);
	          }
	        }
	        if (!result) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          length = getLength(collection),
	          result = isLength(length) ? Array(length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var props = keys(source),
	          length = props.length;

	      if (!length) {
	        return constant(true);
	      }
	      if (length == 1) {
	        var key = props[0],
	            value = source[key];

	        if (isStrictComparable(value)) {
	          return function(object) {
	            if (object == null) {
	              return false;
	            }
	            return object[key] === value && (value !== undefined || (key in toObject(object)));
	          };
	        }
	      }
	      var values = Array(length),
	          strictCompareFlags = Array(length);

	      while (length--) {
	        value = source[props[length]];
	        values[length] = value;
	        strictCompareFlags[length] = isStrictComparable(value);
	      }
	      return function(object) {
	        return object != null && baseIsMatch(toObject(object), props, values, strictCompareFlags);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not which does
	     * not clone `value`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} value The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, value) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(value),
	          pathKey = (path + '');

	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === value
	          ? (value !== undefined || (key in object))
	          : baseIsEqual(value, object[key], null, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merging properties.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isLength(source.length) && (isArray(source) || isTypedArray(source));
	      if (!isSrcArr) {
	        var props = keys(source);
	        push.apply(props, getSymbols(source));
	      }
	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;

	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((isSrcArr || result !== undefined) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merging properties.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	        if (isLength(srcValue.length) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (getLength(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = indexes.length;
	      while (length--) {
	        var index = parseFloat(indexes[length]);
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + floor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;

	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= 200,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var args = [result],
	            action = actions[index];

	        push.apply(args, action.args);
	        result = action.func.apply(action.thisArg, args);
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (retHighest ? (computed <= value) : (computed < value)) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = floor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || computed !== undefined);
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      return bufferSlice.call(buffer, 0);
	    }
	    if (!bufferSlice) {
	      // PhantomJS has `ArrayBuffer` and `Uint8Array` but not `Float64Array`.
	      bufferClone = !(ArrayBuffer && Uint8Array) ? constant(null) : function(buffer) {
	        var byteLength = buffer.byteLength,
	            floatLength = Float64Array ? floor(byteLength / FLOAT64_BYTES_PER_ELEMENT) : 0,
	            offset = floatLength * FLOAT64_BYTES_PER_ELEMENT,
	            result = new ArrayBuffer(byteLength);

	        if (floatLength) {
	          var view = new Float64Array(result, 0, floatLength);
	          view.set(new Float64Array(buffer, 0, floatLength));
	        }
	        if (byteLength != offset) {
	          view = new Uint8Array(result, offset);
	          view.set(new Uint8Array(buffer, offset));
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(argsLength + leftLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var pad = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[pad + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[pad + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a function that aggregates a collection, creating an accumulator
	     * object composed from the results of running each element in the collection
	     * through an iteratee.
	     *
	     * **Note:** This function is used to create `_.countBy`, `_.groupBy`, `_.indexBy`,
	     * and `_.partition`.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that assigns properties of source object(s) to a given
	     * destination object.
	     *
	     * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 && sources[length - 2],
	            guard = length > 2 && sources[2],
	            thisArg = length > 1 && sources[length - 1];

	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : null;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? null : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;

	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    var createCache = !(nativeCreate && Set) ? constant(null) : function(values) {
	      return new SetCache(values);
	    };

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, arguments);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = null;
	        }
	        var result = createWrapper(func, flag, null, null, null, null, null, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }

	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to get the extremum value from an array.
	     * @param {boolean} [isMin] Specify returning the minimum, instead of the maximum,
	     *  extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(arrayFunc, isMin) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = null;
	        }
	        var func = getCallback(),
	            noIteratee = iteratee == null;

	        if (!(func === baseCallback && noIteratee)) {
	          noIteratee = false;
	          iteratee = func(iteratee, thisArg, 3);
	        }
	        if (noIteratee) {
	          var isArr = isArray(collection);
	          if (!isArr && isString(collection)) {
	            iteratee = charAtCallback;
	          } else {
	            return arrayFunc(isArr ? collection : toIterable(collection));
	          }
	        }
	        return extremumBy(collection, iteratee, isMin);
	      };
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      }
	    }

	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }

	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var length = arguments.length;
	        if (!length) {
	          return function() { return arguments[0]; };
	        }
	        var wrapper,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);

	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          var funcName = wrapper ? '' : getFuncName(func);
	          wrapper = funcName == 'wrapper' ? new LodashWrapper([]) : wrapper;
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];
	          funcName = getFuncName(func);

	          var data = funcName == 'wrapper' ? getData(func) : null;
	          if (data && isLaziable(data[0])) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments;
	          if (wrapper && args.length == 1 && isArray(args[0])) {
	            return wrapper.plant(args[0]).value();
	          }
	          var index = 0,
	              result = funcs[index].apply(this, args);

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }

	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }

	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }

	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return string && ((fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string));
	      };
	    }

	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, null, partials, holders);
	      });
	      return partialFunc;
	    }

	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG;

	      var Ctor = !isBindKey && createCtorWrapper(func),
	          key = func;

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : null,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : null,
	                newHoldersRight = isCurry ? null : argsHolders,
	                newPartials = isCurry ? args : null,
	                newPartialsRight = isCurry ? null : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);

	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this;
	        if (isBindKey) {
	          func = thisBinding[key];
	        }
	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? (Ctor || createCtorWrapper(func)) : func;
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, ceil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(argsLength + leftLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var func = getCallback(iteratee);
	        return (func === baseCallback && iteratee == null)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, func(iteratee, thisArg, 1), retHighest);
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = null;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = null;
	      }
	      var data = isBindKey ? null : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length,
	          result = true;

	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (result && ++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        result = undefined;
	        if (customizer) {
	          result = isLoose
	            ? customizer(othValue, arrValue, index)
	            : customizer(arrValue, othValue, index);
	        }
	        if (result === undefined) {
	          // Recursively compare arrays (susceptible to call stack limits).
	          if (isLoose) {
	            var othIndex = othLength;
	            while (othIndex--) {
	              othValue = other[othIndex];
	              result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              if (result) {
	                break;
	              }
	            }
	          } else {
	            result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	          }
	        }
	      }
	      return !!result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} value The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            // But, treat `-0` vs. `+0` as not equal.
	            : (object == 0 ? ((1 / object) == (1 / other)) : object == +other);

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var skipCtor = isLoose,
	          index = -1;

	      while (++index < objLength) {
	        var key = objProps[index],
	            result = isLoose ? key in other : hasOwnProperty.call(other, key);

	        if (result) {
	          var objValue = object[key],
	              othValue = other[key];

	          result = undefined;
	          if (customizer) {
	            result = isLoose
	              ? customizer(othValue, objValue, key)
	              : customizer(objValue, othValue, key);
	          }
	          if (result === undefined) {
	            // Recursively compare objects (susceptible to call stack limits).
	            result = (objValue && objValue === othValue) || equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB);
	          }
	        }
	        if (!result) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [isMin] Specify returning the minimum, instead of the
	     *  maximum, extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function extremumBy(collection, iteratee, isMin) {
	      var exValue = isMin ? POSITIVE_INFINITY : NEGATIVE_INFINITY,
	          computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = iteratee(value, index, collection);
	        if ((isMin ? (current < computed) : (current > computed)) ||
	            (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    var getFuncName = (function() {
	      if (!support.funcNames) {
	        return constant('');
	      }
	      if (constant.name == 'constant') {
	        return baseProperty('name');
	      }
	      return function(func) {
	        var result = func.name,
	            array = realNames[result],
	            length = array ? array.length : 0;

	        while (length--) {
	          var data = array[length],
	              otherFunc = data.func;

	          if (otherFunc == null || otherFunc == func) {
	            return data.name;
	          }
	        }
	        return result;
	      };
	    }());

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * in Safari on iOS 8.1 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Creates an array of the own symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !getOwnPropertySymbols ? constant([]) : function(object) {
	      return getOwnPropertySymbols(toObject(object));
	    };

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} [transforms] The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms ? transforms.length : 0;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = +value;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number') {
	        var length = getLength(object),
	            prereq = isLength(length) && isIndex(index, length);
	      } else {
	        prereq = type == 'string' && index in object;
	      }
	      if (prereq) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      return !!funcName && func === lodash[funcName] && funcName in LazyWrapper.prototype;
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && (value === 0 ? ((1 / value) > 0) : !isObject(value));
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;

	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * A specialized version of `_.pick` that picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` that picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `_.isPlainObject` which checks if `value`
	     * is an object created by the `Object` constructor or has a `[[Prototype]]`
	     * of `null`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     */
	    function shimIsPlainObject(value) {
	      var Ctor,
	          support = lodash.support;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag) ||
	          (!hasOwnProperty.call(value, 'constructor') &&
	            (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length,
	          support = lodash.support;

	      var allowIndexes = length && isLength(length) &&
	        (isArray(object) || (support.nonEnumArgs && isArguments(object)));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it is not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isLength(getLength(value))) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it is not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to property path array if it is not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(+size || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(ceil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array excluding all values of the provided arrays using
	     * `SameValueZero` for equality comparisons.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isArray(array) || isArguments(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using `SameValueZero` for equality comparisons. If `fromIndex` is negative,
	     * it is used as the offset from the end of `array`. If `array` is sorted
	     * providing `true` for `fromIndex` performs a faster binary search.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value),
	            other = array[index];

	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values in all provided arrays using `SameValueZero`
	     * for equality comparisons.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    function intersection() {
	      var args = [],
	          argsIndex = -1,
	          argsLength = arguments.length,
	          caches = [],
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];

	      while (++argsIndex < argsLength) {
	        var value = arguments[argsIndex];
	        if (isArray(value) || isArguments(value)) {
	          args.push(value);
	          caches.push((isCommon && value.length >= 120) ? createCache(argsIndex && value) : null);
	        }
	      }
	      argsLength = args.length;
	      if (argsLength < 2) {
	        return result;
	      }
	      var array = args[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          argsIndex = argsLength;
	          while (--argsIndex) {
	            var cache = caches[argsIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using `SameValueZero` for equality
	     * comparisons.
	     *
	     * **Notes:**
	     *  - Unlike `_.without`, this method mutates `array`
	     *  - [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     *    comparisons are like strict equality comparisons, e.g. `===`, except
	     *    that `NaN` matches `NaN`
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      array || (array = []);
	      indexes = baseFlatten(indexes);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, of the provided arrays using
	     * `SameValueZero` for equality comparisons.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });

	    /**
	     * Creates a duplicate-free version of an array, using `SameValueZero` for
	     * equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? null : isSorted;
	        isSorted = false;
	      }
	      var func = getCallback();
	      if (!(func === baseCallback && iteratee == null)) {
	        iteratee = func(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-`_.zip`
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      var index = -1,
	          length = (array && array.length && arrayMax(arrayMap(array, getLength))) >>> 0,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * Creates an array excluding all provided values using `SameValueZero` for
	     * equality comparisons.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return (isArray(array) || isArguments(array))
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArray(array) || isArguments(array)) {
	          var result = result
	            ? baseDifference(result, array).concat(baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);

	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapper = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapper = wrapper.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapper.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapper = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapper = wrapper.plant(other);
	     *
	     * otherWrapper.value();
	     * // => [9, 16]
	     *
	     * wrapper.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        if (this.__actions__.length) {
	          value = new LazyWrapper(this);
	        }
	        return new LodashWrapper(value.reverse(), this.__chain__);
	      }
	      return this.thru(function(value) {
	        return value.reverse();
	      });
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      var length = collection ? getLength(collection) : 0;
	      if (isLength(length)) {
	        collection = toIterable(collection);
	      }
	      return baseAt(collection, baseFlatten(props));
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = null;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection` using `SameValueZero` for equality
	     * comparisons. If `fromIndex` is negative, it is used as the offset from
	     * the end of `collection`.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (!length) {
	        return false;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex < length && collection.indexOf(target, fromIndex) > -1)
	        : (getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method at `path` on each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          length = getLength(collection),
	          result = isLength(length) ? Array(length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : (isProp && value != null && value[path]);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as interatees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`, `drop`,
	     * `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`, `parseInt`,
	     * `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimLeft`,
	     * `trimRight`, `trunc`, `random`, `range`, `sample`, `some`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as interatees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `includes`, `merge`, `sortByAll`, and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight =  createReduce(arrayReduceRight, baseEachRight);

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var result = shuffle(collection);
	      result.length = nativeMin(n < 0 ? 0 : (+n || 0), result.length);
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      collection = toIterable(collection);

	      var index = -1,
	          length = collection.length,
	          result = Array(length);

	      while (++index < length) {
	        var rand = baseRandom(0, index);
	        if (index != rand) {
	          result[index] = result[rand];
	        }
	        result[rand] = collection[index];
	      }
	      return result;
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = null;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = null;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);

	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. A truthy value in `orders` will
	     * sort the corresponding property name in ascending order while a falsey
	     * value will sort it in descending order.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], [true, false]), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = null;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = null;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, null, null, null, null, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = null;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);

	    /**
	     * Creates a function that delays invoking `func` until after `wait` milliseconds
	     * have elapsed since the last time it was invoked. The created function comes
	     * with a `cancel` method to cancel delayed invocations. Provide an options
	     * object to indicate that `func` should be invoked on the leading and/or
	     * trailing edge of the `wait` timeout. Subsequent calls to the debounced
	     * function return the result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          if (maxTimeoutId) {
	            clearTimeout(maxTimeoutId);
	          }
	          var isCalled = trailingCall;
	          maxTimeoutId = timeoutId = trailingCall = undefined;
	          if (isCalled) {
	            lastCalled = now();
	            result = func.apply(thisArg, args);
	            if (!timeoutId && !maxTimeoutId) {
	              args = thisArg = null;
	            }
	          }
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (trailing || (maxWait !== wait)) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = null;
	          }
	        }
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = null;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            cache = memoized.cache,
	            key = resolver ? resolver.apply(this, args) : args[0];

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, null, null, null, baseFlatten(indexes));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);

	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a function that only invokes `func` at most once per every `wait`
	     * milliseconds. The created function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the throttled function return the result of the last
	     * `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      debounceOptions.leading = leading;
	      debounceOptions.maxWait = +wait;
	      debounceOptions.trailing = trailing;
	      return debounce(func, wait, debounceOptions);
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, null, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
	      return baseClone(value, isDeep, customizer);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
	      return baseClone(value, true, customizer);
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      var length = isObjectLike(value) ? value.length : undefined;
	      return isLength(length) && objToString.call(value) == argsTag;
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) &&
	        (objToString.call(value).indexOf('Element') > -1);
	    }
	    // Fallback for environments without DOM support.
	    if (!support.dom) {
	      isElement = function(value) {
	        return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	      };
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      var length = getLength(value);
	      if (isLength(length) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
	      if (!customizer && isStrictComparable(value) && isStrictComparable(other)) {
	        return value === other;
	      }
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    var isFinite = nativeNumIsFinite || function(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    };

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    var isFunction = !(baseIsFunction(/x/) || (Uint8Array && !baseIsFunction(Uint8Array))) ? baseIsFunction : function(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return objToString.call(value) == funcTag;
	    };

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return type == 'function' || (!!value && type == 'object');
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      var props = keys(source),
	          length = props.length;

	      if (!length) {
	        return true;
	      }
	      if (object == null) {
	        return false;
	      }
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
	      object = toObject(object);
	      if (!customizer && length == 1) {
	        var key = props[0],
	            value = source[key];

	        if (isStrictComparable(value)) {
	          return value === object[key] && (value !== undefined || (key in object));
	        }
	      }
	      var values = Array(length),
	          strictCompareFlags = Array(length);

	      while (length--) {
	        value = values[length] = source[props[length]];
	        strictCompareFlags[length] = isStrictComparable(value);
	      }
	      return baseIsMatch(object, props, values, strictCompareFlags, customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (objToString.call(value) == funcTag) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
	      if (!(value && objToString.call(value) == objectTag)) {
	        return false;
	      }
	      var valueOf = value.valueOf,
	          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

	      return objProto
	        ? (value == objProto || getPrototypeOf(value) == objProto)
	        : shimIsPlainObject(value);
	    };

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return (isObjectLike(value) && objToString.call(value) == regexpTag) || false;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).
	     *
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = null;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = restParam(function(args) {
	      var object = args[0];
	      if (object == null) {
	        return object;
	      }
	      args.push(assignDefaults);
	      return assign.apply(undefined, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the property value of `path` on `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	        result = object != null && hasOwnProperty.call(object, path);
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = null;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      if (object) {
	        var Ctor = object.constructor,
	            length = object.length;
	      }
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isLength(length))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee, thisArg) {
	      var result = {};
	      iteratee = getCallback(iteratee, thisArg, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[key] = iteratee(value, key, object);
	      });
	      return result;
	    }

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     * Property names may be specified as individual arguments or as arrays of
	     * property names. If `predicate` is provided it is invoked for each property
	     * of `object` omitting the properties `predicate` returns truthy for. The
	     * predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

	      var index = -1,
	          length = path.length,
	          endIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == endIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) && Ctor.prototype);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (typeof end === 'undefined') {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = null;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't require escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it is shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = floor(mid),
	          rightLength = ceil(mid);

	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it is shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();

	    /**
	     * Pads `string` on the right side if it is shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard && isIterateeCall(string, radix, guard)) {
	        radix = 0;
	      }
	      return nativeParseInt(string, radix);
	    }
	    // Fallback for environments with pre-ES5 implementations.
	    if (nativeParseInt(whitespace + '08') != 8) {
	      parseInt = function(string, radix, guard) {
	        // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	        // Chrome fails to trim leading <BOM> whitespace characters.
	        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	        if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	          radix = 0;
	        } else if (radix) {
	          radix = +radix;
	        }
	        string = trim(string);
	        return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	      };
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = floor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = null;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it is longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = null;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = null;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = null;
	      }
	      return baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function which performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function which compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} value The value to compare.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, value) {
	      return baseMatchesProperty(path, baseClone(value, true));
	    }

	    /**
	     * Creates a function which invokes the method at `path` on a given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      }
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function which invokes
	     * the method at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * // use `_.runInContext` to avoid conflicts (esp. in Node.js)
	     * var _ = require('lodash').runInContext();
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj && keys(source),
	            methodNames = props && props.length && baseFunctions(source, props);

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);

	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              var args = [this.value()];
	              push.apply(args, arguments);
	              return func.apply(object, args);
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      context._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function which returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function which returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function which returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = null;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(ceil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = floor(n);

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(arrayMax);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(arrayMin, true);

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = null;
	      }
	      var func = getCallback(),
	          noIteratee = iteratee == null;

	      if (!(func === baseCallback && noIteratee)) {
	        noIteratee = false;
	        iteratee = func(iteratee, thisArg, 3);
	      }
	      return noIteratee
	        ? arraySum(isArray(collection) ? collection : toIterable(collection))
	        : baseSum(collection, iteratee);
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.get = get;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['dropWhile', 'filter', 'map', 'takeWhile'], function(methodName, type) {
	      var isFilter = type != LAZY_MAP_FLAG,
	          isDropWhile = type == LAZY_DROP_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var filtered = this.__filtered__,
	            result = (filtered && isDropWhile) ? new LazyWrapper(this) : this.clone(),
	            iteratees = result.__iteratees__ || (result.__iteratees__ = []);

	        iteratees.push({
	          'done': false,
	          'count': 0,
	          'index': 0,
	          'iteratee': getCallback(iteratee, thisArg, 1),
	          'limit': -1,
	          'type': type
	        });

	        result.__filtered__ = filtered || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      var whileName = methodName + 'While';

	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__,
	            result = (filtered && !index) ? this.dropWhile() : this.clone();

	        n = n == null ? 1 : nativeMax(floor(n) || 0, 0);
	        if (filtered) {
	          if (index) {
	            result.__takeCount__ = nativeMin(result.__takeCount__, n);
	          } else {
	            last(result.__iteratees__).limit = n;
	          }
	        } else {
	          var views = result.__views__ || (result.__views__ = []);
	          views.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };

	      LazyWrapper.prototype[methodName + 'RightWhile'] = function(predicate, thisArg) {
	        return this.reverse()[whileName](predicate, thisArg).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);
	      var result = start < 0 ? this.takeRight(-start) : this.drop(start);

	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.drop(0);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (!lodashFunc) {
	        return;
	      }
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments,
	            length = args.length,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // avoid lazy use if the iteratee has a "length" value other than `1`
	          isLazy = useLazy = false;
	        }
	        var onlyLazy = isLazy && !isHybrid;
	        if (retUnwrapped && !chainAll) {
	          return onlyLazy
	            ? func.call(value)
	            : lodashFunc.call(lodash, this.value());
	        }
	        var interceptor = function(value) {
	          var otherArgs = [value];
	          push.apply(otherArgs, args);
	          return lodashFunc.apply(lodash, otherArgs);
	        };
	        if (useLazy) {
	          var wrapper = onlyLazy ? value : new LazyWrapper(this),
	              result = func.apply(wrapper, args);

	          if (!retUnwrapped && (isHybrid || result.__actions__)) {
	            var actions = result.__actions__ || (result.__actions__ = []);
	            actions.push({ 'func': thru, 'args': [interceptor], 'thisArg': lodash });
	          }
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['concat', 'join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(null, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': null }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Narwhal or Rhino -require.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(163)(module), (function() { return this; }())))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Baobab-React Custom Prop Types
	 * ===============================
	 *
	 * PropTypes used to propagate context safely.
	 */
	'use strict';

	var type = __webpack_require__(99);

	function errorMessage(propName, what) {
	  return 'prop type `' + propName + '` is invalid; it must be ' + what + '.';
	}

	var PropTypes = {};

	PropTypes.baobab = function (props, propName) {
	  if (!type.Baobab(props[propName])) return new Error(errorMessage(propName, 'a Baobab tree'));
	};

	PropTypes.cursors = function (props, propName) {
	  var p = props[propName];

	  var valid = type.Object(p) && Object.keys(p).every(function (k) {
	    return type.Cursor(p[k]);
	  });

	  if (!valid) return new Error(errorMessage(propName, 'Baobab cursors'));
	};

	module.exports = PropTypes;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);

	var invariant = __webpack_require__(77);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}


	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}

	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}

	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, cb) {
	  forEachEventDispatch(event, cb);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};

	module.exports = EventPluginUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(101);
	var ReactFragment = __webpack_require__(102);

	var traverseAllChildren = __webpack_require__(103);
	var warning = __webpack_require__(80);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;

	  var keyUnique = !mapResult.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'ReactChildren.map(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }

	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return ReactFragment.create(mapResult);
	}

	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};

	module.exports = ReactChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactUpdateQueue = __webpack_require__(104);

	var invariant = __webpack_require__(77);
	var warning = __webpack_require__(80);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context) {
	  this.props = props;
	  this.context = context;
	}

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function(partialState, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof partialState === 'object' ||
	    typeof partialState === 'function' ||
	    partialState == null,
	    'setState(...): takes an object of state variables to update or a ' +
	    'function which returns an object of state variables.'
	  ) : invariant(typeof partialState === 'object' ||
	  typeof partialState === 'function' ||
	  partialState == null));
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      partialState != null,
	      'setState(...): You passed an undefined or null state object; ' +
	      'instead, use forceUpdate().'
	    ) : null);
	  }
	  ReactUpdateQueue.enqueueSetState(this, partialState);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function(callback) {
	  ReactUpdateQueue.enqueueForceUpdate(this);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ("production" !== process.env.NODE_ENV) {
	  var deprecatedAPIs = {
	    getDOMNode: [
	      'getDOMNode',
	      'Use React.findDOMNode(component) instead.'
	    ],
	    isMounted: [
	      'isMounted',
	      'Instead, make sure to clean up subscriptions and pending requests in ' +
	      'componentWillUnmount to prevent memory leaks.'
	    ],
	    replaceProps: [
	      'replaceProps',
	      'Instead, call React.render again at the top level.'
	    ],
	    replaceState: [
	      'replaceState',
	      'Refactor your code to use setState instead (see ' +
	      'https://github.com/facebook/react/issues/3236).'
	    ],
	    setProps: [
	      'setProps',
	      'Instead, call React.render again at the top level.'
	    ]
	  };
	  var defineDeprecationWarning = function(methodName, info) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function() {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            '%s(...) is deprecated in plain JavaScript React classes. %s',
	            info[0],
	            info[1]
	          ) : null);
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(57);
	var ReactCurrentOwner = __webpack_require__(60);
	var ReactElement = __webpack_require__(61);
	var ReactErrorUtils = __webpack_require__(105);
	var ReactInstanceMap = __webpack_require__(106);
	var ReactLifeCycle = __webpack_require__(107);
	var ReactPropTypeLocations = __webpack_require__(108);
	var ReactPropTypeLocationNames = __webpack_require__(109);
	var ReactUpdateQueue = __webpack_require__(104);

	var assign = __webpack_require__(72);
	var invariant = __webpack_require__(77);
	var keyMirror = __webpack_require__(110);
	var keyOf = __webpack_require__(111);
	var warning = __webpack_require__(80);

	var MIXINS_KEY = keyOf({mixins: null});

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,



	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,



	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        childContextTypes,
	        ReactPropTypeLocations.childContext
	      );
	    }
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        contextTypes,
	        ReactPropTypeLocations.context
	      );
	    }
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        propTypes,
	        ReactPropTypeLocations.prop
	      );
	    }
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof typeDef[propName] === 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactClass',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : null);
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
	    ReactClassInterface[name] :
	    null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactClassInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactClassInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec !== 'function',
	    'ReactClass: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(typeof spec !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactClass: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod =
	        ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isReactClassMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isReactClassMethod && (
	              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	            ),
	            'ReactClass: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isReactClassMethod && (
	            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	          )));

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactClass: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));

	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactClass: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        one[key] === undefined,
	        'mergeIntoWithNoDuplicateKeys(): ' +
	        'Tried to merge two objects with the same key: `%s`. This conflict ' +
	        'may be due to a mixin; in particular, this may be caused by two ' +
	        'getInitialState() or getDefaultProps() methods returning objects ' +
	        'with clashing keys.',
	        key
	      ) : invariant(one[key] === undefined));
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if ("production" !== process.env.NODE_ENV) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): React component methods may only be bound to the ' +
	          'component instance. See %s',
	          componentName
	        ) : null);
	      } else if (!args.length) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): You are binding a component method to the component. ' +
	          'React does this for you automatically in a high-performance ' +
	          'way, so you can safely remove this call. See %s',
	          componentName
	        ) : null);
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(
	        component,
	        ReactErrorUtils.guard(
	          method,
	          component.constructor.displayName + '.' + autoBindKey
	        )
	      );
	    }
	  }
	}

	var typeDeprecationDescriptor = {
	  enumerable: false,
	  get: function() {
	    var displayName = this.displayName || this.name || 'Component';
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      '%s.type is deprecated. Use %s directly to access the class.',
	      displayName,
	      displayName
	    ) : null);
	    Object.defineProperty(this, 'type', {
	      value: this
	    });
	    return this;
	  }
	};

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function(newState, callback) {
	    ReactUpdateQueue.enqueueReplaceState(this, newState);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          owner._warnedAboutRefsInRender,
	          '%s is accessing isMounted inside its render() function. ' +
	          'render() should be a pure function of props and state. It should ' +
	          'never access something that requires stale data from the previous ' +
	          'render, such as refs. Move this logic to componentDidMount and ' +
	          'componentDidUpdate instead.',
	          owner.getName() || 'A component'
	        ) : null);
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(this);
	    return (
	      internalInstance &&
	      internalInstance !== ReactLifeCycle.currentlyMountingInstance
	    );
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function(partialProps, callback) {
	    ReactUpdateQueue.enqueueSetProps(this, partialProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function(newProps, callback) {
	    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function() {};
	assign(
	  ReactClassComponent.prototype,
	  ReactComponent.prototype,
	  ReactClassMixin
	);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, context) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	          'JSX instead. See: https://fb.me/react-legacyfactory'
	        ) : null);
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ("production" !== process.env.NODE_ENV) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' &&
	            this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        spec.displayName || 'A component'
	      ) : null);
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    // Legacy hook
	    Constructor.type = Constructor;
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */

	'use strict';

	var assign = __webpack_require__(72);
	var emptyObject = __webpack_require__(112);
	var warning = __webpack_require__(80);

	var didWarn = false;

	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {

	  /**
	   * @internal
	   * @type {object}
	   */
	  current: emptyObject,

	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        didWarn,
	        'withContext is deprecated and will be removed in a future version. ' +
	        'Use a wrapper component with getChildContext instead.'
	      ) : null);

	      didWarn = true;
	    }

	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }

	};

	module.exports = ReactContext;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactContext = __webpack_require__(59);
	var ReactCurrentOwner = __webpack_require__(60);

	var assign = __webpack_require__(72);
	var warning = __webpack_require__(80);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {

	    configurable: false,
	    enumerable: true,

	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },

	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the %s property of the React element. Instead, ' +
	        'specify the correct value when initially creating the element.',
	        key
	      ) : null);
	      this._store[key] = value;
	    }

	  });
	}

	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;

	  // Record the component responsible for creating this element.
	  this._owner = owner;

	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;

	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = {props: props, originalProps: assign({}, props)};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    try {
	      Object.defineProperty(this._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true
	      });
	    } catch (x) {
	    }
	    this._store.validated = false;

	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }

	  this.props = props;
	};

	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};

	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}

	ReactElement.createElement = function(type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};

	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );

	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};

	ReactElement.cloneElement = function(element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return new ReactElement(
	    element.type,
	    key,
	    ref,
	    owner,
	    element._context,
	    props
	  );
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};

	module.exports = ReactElement;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(61);
	var ReactFragment = __webpack_require__(102);
	var ReactPropTypeLocations = __webpack_require__(108);
	var ReactPropTypeLocationNames = __webpack_require__(109);
	var ReactCurrentOwner = __webpack_require__(60);
	var ReactNativeComponent = __webpack_require__(113);

	var getIteratorFn = __webpack_require__(114);
	var invariant = __webpack_require__(77);
	var warning = __webpack_require__(80);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	var NUMERIC_PROPERTY_REGEX = /^\d+$/;

	/**
	 * Gets the instance's name for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getName(instance) {
	  var publicInstance = instance && instance.getPublicInstance();
	  if (!publicInstance) {
	    return undefined;
	  }
	  var constructor = publicInstance.constructor;
	  if (!constructor) {
	    return undefined;
	  }
	  return constructor.displayName || constructor.name || undefined;
	}

	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return (
	    current && getName(current) || undefined
	  );
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  warnAndMonitorForKeyUse(
	    'Each child in an array or iterator should have a unique "key" prop.',
	    element,
	    parentType
	  );
	}

	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validatePropertyKey(name, element, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    element,
	    parentType
	  );
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} message The base warning that gets output.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function warnAndMonitorForKeyUse(message, element, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = typeof parentType === 'string' ?
	    parentType : parentType.displayName || parentType.name;

	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[message] || (
	    (ownerHasKeyUseWarning[message] = {})
	  );
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;

	  var parentOrOwnerAddendum =
	    ownerName ? (" Check the render method of " + ownerName + ".") :
	    parentName ? (" Check the React.render call using <" + parentName + ">.") :
	    '';

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerAddendum = '';
	  if (element &&
	      element._owner &&
	      element._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    var childOwnerName = getName(element._owner);

	    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    message + '%s%s See https://fb.me/react-warning-keys for more information.',
	    parentOrOwnerAddendum,
	    childOwnerAddendum
	  ) : null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    node._store.validated = true;
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    } else if (typeof node === 'object') {
	      var fragment = ReactFragment.extractIfFragment(node);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          validatePropertyKey(key, fragment[key], parentType);
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        ("production" !== process.env.NODE_ENV ? invariant(
	          typeof propTypes[propName] === 'function',
	          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	          'React.PropTypes.',
	          componentName || 'React class',
	          ReactPropTypeLocationNames[location],
	          propName
	        ) : invariant(typeof propTypes[propName] === 'function'));
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(this);
	        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
	      }
	    }
	  }
	}

	var warnedPropsMutations = {};

	/**
	 * Warn about mutating props when setting `propName` on `element`.
	 *
	 * @param {string} propName The string key within props that was set
	 * @param {ReactElement} element
	 */
	function warnForPropsMutation(propName, element) {
	  var type = element.type;
	  var elementName = typeof type === 'string' ? type : type.displayName;
	  var ownerName = element._owner ?
	    element._owner.getPublicInstance().constructor.displayName : null;

	  var warningKey = propName + '|' + elementName + '|' + ownerName;
	  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
	    return;
	  }
	  warnedPropsMutations[warningKey] = true;

	  var elementInfo = '';
	  if (elementName) {
	    elementInfo = ' <' + elementName + ' />';
	  }
	  var ownerInfo = '';
	  if (ownerName) {
	    ownerInfo = ' The element was created by ' + ownerName + '.';
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
	    'correct value when initially creating the element or use ' +
	    'React.cloneElement to make a new element with updated props.%s',
	    propName,
	    elementInfo,
	    ownerInfo
	  ) : null);
	}

	// Inline Object.is polyfill
	function is(a, b) {
	  if (a !== a) {
	    // NaN
	    return b !== b;
	  }
	  if (a === 0 && b === 0) {
	    // +-0
	    return 1 / a === 1 / b;
	  }
	  return a === b;
	}

	/**
	 * Given an element, check if its props have been mutated since element
	 * creation (or the last call to this function). In particular, check if any
	 * new props have been added, which we can't directly catch by defining warning
	 * properties on the props object.
	 *
	 * @param {ReactElement} element
	 */
	function checkAndWarnForMutatedProps(element) {
	  if (!element._store) {
	    // Element was created using `new ReactElement` directly or with
	    // `ReactElement.createElement`; skip mutation checking
	    return;
	  }

	  var originalProps = element._store.originalProps;
	  var props = element.props;

	  for (var propName in props) {
	    if (props.hasOwnProperty(propName)) {
	      if (!originalProps.hasOwnProperty(propName) ||
	          !is(originalProps[propName], props[propName])) {
	        warnForPropsMutation(propName, element);

	        // Copy over the new value so that the two props objects match again
	        originalProps[propName] = props[propName];
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  if (element.type == null) {
	    // This has already warned. Don't throw.
	    return;
	  }
	  // Extract the component class from the element. Converts string types
	  // to a composite class which may have propTypes.
	  // TODO: Validating a string's propTypes is not decoupled from the
	  // rendering target which is problematic.
	  var componentClass = ReactNativeComponent.getComponentClassForElement(
	    element
	  );
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(
	      name,
	      componentClass.propTypes,
	      element.props,
	      ReactPropTypeLocations.prop
	    );
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    ("production" !== process.env.NODE_ENV ? warning(
	      componentClass.getDefaultProps.isReactClassApproved,
	      'getDefaultProps is only used on classic React.createClass ' +
	      'definitions. Use a static property named `defaultProps` instead.'
	    ) : null);
	  }
	}

	var ReactElementValidator = {

	  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(
	          validatedFactory,
	          'type',
	          {
	            enumerable: false,
	            get: function() {
	              ("production" !== process.env.NODE_ENV ? warning(
	                false,
	                'Factory.type is deprecated. Access the class directly ' +
	                'before passing it to createFactory.'
	              ) : null);
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          }
	        );
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }


	    return validatedFactory;
	  },

	  cloneElement: function(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(61);
	var ReactElementValidator = __webpack_require__(62);

	var mapObject = __webpack_require__(115);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOM;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMPropertyOperations = __webpack_require__(116);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(117);
	var ReactDOMComponent = __webpack_require__(118);

	var assign = __webpack_require__(72);
	var escapeTextContentForBrowser = __webpack_require__(119);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function(props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    var escapedText = escapeTextContentForBrowser(this._stringText);

	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }

	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
	          this._rootNodeID,
	          nextStringText
	        );
	      }
	    }
	  },

	  unmountComponent: function() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(120);
	var ChangeEventPlugin = __webpack_require__(121);
	var ClientReactRootIndex = __webpack_require__(122);
	var DefaultEventPluginOrder = __webpack_require__(123);
	var EnterLeaveEventPlugin = __webpack_require__(124);
	var ExecutionEnvironment = __webpack_require__(75);
	var HTMLDOMPropertyConfig = __webpack_require__(125);
	var MobileSafariClickEventPlugin = __webpack_require__(126);
	var ReactBrowserComponentMixin = __webpack_require__(127);
	var ReactClass = __webpack_require__(58);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(117);
	var ReactDefaultBatchingStrategy = __webpack_require__(128);
	var ReactDOMComponent = __webpack_require__(118);
	var ReactDOMButton = __webpack_require__(129);
	var ReactDOMForm = __webpack_require__(130);
	var ReactDOMImg = __webpack_require__(131);
	var ReactDOMIDOperations = __webpack_require__(132);
	var ReactDOMIframe = __webpack_require__(133);
	var ReactDOMInput = __webpack_require__(134);
	var ReactDOMOption = __webpack_require__(135);
	var ReactDOMSelect = __webpack_require__(136);
	var ReactDOMTextarea = __webpack_require__(137);
	var ReactDOMTextComponent = __webpack_require__(64);
	var ReactElement = __webpack_require__(61);
	var ReactEventListener = __webpack_require__(138);
	var ReactInjection = __webpack_require__(139);
	var ReactInstanceHandles = __webpack_require__(66);
	var ReactMount = __webpack_require__(67);
	var ReactReconcileTransaction = __webpack_require__(140);
	var SelectEventPlugin = __webpack_require__(141);
	var ServerReactRootIndex = __webpack_require__(142);
	var SimpleEventPlugin = __webpack_require__(143);
	var SVGDOMPropertyConfig = __webpack_require__(144);

	var createFullPageComponent = __webpack_require__(145);

	function autoGenerateWrapperClass(type) {
	  return ReactClass.createClass({
	    tagName: type.toUpperCase(),
	    render: function() {
	      return new ReactElement(
	        type,
	        null,
	        null,
	        null,
	        null,
	        this.props
	      );
	    }
	  });
	}

	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );

	  ReactInjection.NativeComponent.injectTextComponentClass(
	    ReactDOMTextComponent
	  );

	  ReactInjection.NativeComponent.injectAutoWrapper(
	    autoGenerateWrapperClass
	  );

	  // This needs to happen before createFullPageComponent() otherwise the mixin
	  // won't be included.
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'iframe': ReactDOMIframe,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,

	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );

	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(146);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(147);

	var invariant = __webpack_require__(77);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(148);
	var ReactBrowserEventEmitter = __webpack_require__(149);
	var ReactCurrentOwner = __webpack_require__(60);
	var ReactElement = __webpack_require__(61);
	var ReactElementValidator = __webpack_require__(62);
	var ReactEmptyComponent = __webpack_require__(150);
	var ReactInstanceHandles = __webpack_require__(66);
	var ReactInstanceMap = __webpack_require__(106);
	var ReactMarkupChecksum = __webpack_require__(151);
	var ReactPerf = __webpack_require__(68);
	var ReactReconciler = __webpack_require__(70);
	var ReactUpdateQueue = __webpack_require__(104);
	var ReactUpdates = __webpack_require__(152);

	var emptyObject = __webpack_require__(112);
	var containsNode = __webpack_require__(153);
	var getReactRootElementInContainer = __webpack_require__(154);
	var instantiateReactComponent = __webpack_require__(155);
	var invariant = __webpack_require__(77);
	var setInnerHTML = __webpack_require__(156);
	var shouldUpdateReactComponent = __webpack_require__(157);
	var warning = __webpack_require__(80);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponent.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup) {
	  var markup = ReactReconciler.mountComponent(
	    componentInstance, rootID, transaction, emptyObject
	  );
	  componentInstance._isTopLevel = true;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    shouldReuseMarkup) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  transaction.perform(
	    mountComponentIntoNode,
	    null,
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup
	  );
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextElement,
	      container,
	      callback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    ReactMount.scrollMonitor(container, function() {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function(
	    nextElement,
	    container,
	    shouldReuseMarkup
	  ) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      '_renderNewRootComponent(): Render methods should be a pure function ' +
	      'of props and state; triggering nested component updates from ' +
	      'render is not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(
	      componentInstance,
	      container
	    );

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(
	      batchedMountComponentIntoNode,
	      componentInstance,
	      reactRootID,
	      container,
	      shouldReuseMarkup
	    );

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] =
	        getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'React.render(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        typeof nextElement === 'function' ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like an element
	        nextElement != null && nextElement.props !== undefined ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        ).getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

	    if ("production" !== process.env.NODE_ENV) {
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (ReactMount.isRenderedByReact(rootElementSibling)) {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'render(): Target node has markup rendered by React, but there ' +
	              'are unrelated nodes as well. This is most commonly caused by ' +
	              'white-space inserted around server-rendered markup.'
	            ) : null);
	            break;
	          }

	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    ).getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = ReactElement.createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'unmountComponentAtNode(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    ReactReconciler.unmountComponent(instance);

	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }

	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));

	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          ) : null);
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }

	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },

	  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'mountComponentIntoNode(...): Target container is not valid.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	        );
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
	          checksum
	        );

	        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
	        var difference = ' (client) ' +
	          markup.substring(diffIndex - 20, diffIndex + 20) +
	          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        ("production" !== process.env.NODE_ENV ? invariant(
	          container.nodeType !== DOC_NODE_TYPE,
	          'You\'re trying to render a component to the document using ' +
	          'server rendering but the checksum was invalid. This usually ' +
	          'means you rendered a different component type or props on ' +
	          'the client from the one on the server, or your render() ' +
	          'methods are impure. React cannot handle this case due to ' +
	          'cross-browser quirks by rendering at the document root. You ' +
	          'should look for environment dependent code in your components ' +
	          'and ensure the props are the same client and server side:\n%s',
	          difference
	        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'React attempted to reuse markup in a container but the ' +
	            'checksum was invalid. This generally means that you are ' +
	            'using server rendering and the markup generated on the ' +
	            'server was not what the client was expecting. React injected ' +
	            'new markup to compensate which works but you have lost many ' +
	            'of the benefits of server rendering. Instead, figure out ' +
	            'why the markup being generated is different on the client ' +
	            'or server:\n%s',
	            difference
	          ) : null);
	        }
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container.nodeType !== DOC_NODE_TYPE,
	      'You\'re trying to render a component to the document but ' +
	        'you didn\'t use server rendering. We can\'t do this ' +
	        'without using server rendering due to cross-browser quirks. ' +
	        'See React.renderToString() for server rendering.'
	    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	    setInnerHTML(container, markup);
	  },

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function(object, objectName, methodNames) {
	    if ("production" !== process.env.NODE_ENV) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(
	          objectName,
	          methodNames[key],
	          object[key]
	        );
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(61);
	var ReactFragment = __webpack_require__(102);
	var ReactPropTypeLocationNames = __webpack_require__(109);

	var emptyFunction = __webpack_require__(158);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ") +
	          ("`" + componentName + "`.")
	        );
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      propValue = ReactFragment.extractIfFragment(propValue);
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	module.exports = ReactPropTypes;


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(159);
	var ReactElementValidator = __webpack_require__(62);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(
	        internalInstance._currentElement
	      );
	    }
	    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function(
	    internalInstance, nextElement, transaction, context
	  ) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(
	      prevElement,
	      nextElement
	    );

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(
	    internalInstance,
	    transaction
	  ) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactElement = __webpack_require__(61);
	var ReactInstanceHandles = __webpack_require__(66);
	var ReactMarkupChecksum = __webpack_require__(151);
	var ReactServerRenderingTransaction =
	  __webpack_require__(160);

	var emptyObject = __webpack_require__(112);
	var instantiateReactComponent = __webpack_require__(155);
	var invariant = __webpack_require__(77);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup =
	        componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(60);
	var ReactInstanceMap = __webpack_require__(106);
	var ReactMount = __webpack_require__(67);

	var invariant = __webpack_require__(77);
	var isNode = __webpack_require__(161);
	var warning = __webpack_require__(80);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ("production" !== process.env.NODE_ENV) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        owner._warnedAboutRefsInRender,
	        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
	        'render() should be a pure function of props and state. It should ' +
	        'never access something that requires stale data from the previous ' +
	        'render, such as refs. Move this logic to componentDidMount and ' +
	        'componentDidUpdate instead.',
	        owner.getName() || 'A component'
	      ) : null);
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (isNode(componentOrElement)) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    componentOrElement.render == null ||
	    typeof componentOrElement.render !== 'function',
	    'Component (with keys: %s) contains `render` method ' +
	    'but is not mounted in the DOM',
	    Object.keys(componentOrElement)
	  ) : invariant(componentOrElement.render == null ||
	  typeof componentOrElement.render !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    false,
	    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
	    Object.keys(componentOrElement)
	  ) : invariant(false));
	}

	module.exports = findDOMNode;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(61);

	var invariant = __webpack_require__(77);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}

	module.exports = onlyChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var canUseDOM = !!(
	  (typeof window !== 'undefined' &&
	  window.document && window.document.createElement)
	);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assign = __webpack_require__(72);
	var ReactPropTypes = __webpack_require__(13).PropTypes;
	var Route = __webpack_require__(42);

	var PropTypes = assign({}, ReactPropTypes, {

	  /**
	   * Indicates that a prop should be falsy.
	   */
	  falsy: function falsy(props, propName, componentName) {
	    if (props[propName]) {
	      return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	    }
	  },

	  /**
	   * Indicates that a prop should be a Route object.
	   */
	  route: ReactPropTypes.instanceOf(Route),

	  /**
	   * Indicates that a prop should be a Router object.
	   */
	  //router: ReactPropTypes.instanceOf(Router) // TODO
	  router: ReactPropTypes.func

	});

	module.exports = PropTypes;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	/**
	 * This component is necessary to get around a context warning
	 * present in React 0.13.0. It sovles this by providing a separation
	 * between the "owner" and "parent" contexts.
	 */

	var React = __webpack_require__(13);

	var ContextWrapper = (function (_React$Component) {
	  function ContextWrapper() {
	    _classCallCheck(this, ContextWrapper);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(ContextWrapper, _React$Component);

	  _createClass(ContextWrapper, [{
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);

	  return ContextWrapper;
	})(React.Component);

	module.exports = ContextWrapper;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Actions that modify the URL.
	 */
	'use strict';

	var LocationActions = {

	  /**
	   * Indicates a new location is being pushed to the history stack.
	   */
	  PUSH: 'push',

	  /**
	   * Indicates the current location should be replaced.
	   */
	  REPLACE: 'replace',

	  /**
	   * Indicates the most recent entry should be removed from the history stack.
	   */
	  POP: 'pop'

	};

	module.exports = LocationActions;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(158);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(77);
	var assign = __webpack_require__(164);
	var qs = __webpack_require__(165);

	var paramCompileMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g;
	var paramInjectMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g;
	var paramInjectTrailingSlashMatcher = /\/\/\?|\/\?\/|\/\?/g;
	var queryMatcher = /\?(.*)$/;

	var _compiledPatterns = {};

	function compilePattern(pattern) {
	  if (!(pattern in _compiledPatterns)) {
	    var paramNames = [];
	    var source = pattern.replace(paramCompileMatcher, function (match, paramName) {
	      if (paramName) {
	        paramNames.push(paramName);
	        return '([^/?#]+)';
	      } else if (match === '*') {
	        paramNames.push('splat');
	        return '(.*?)';
	      } else {
	        return '\\' + match;
	      }
	    });

	    _compiledPatterns[pattern] = {
	      matcher: new RegExp('^' + source + '$', 'i'),
	      paramNames: paramNames
	    };
	  }

	  return _compiledPatterns[pattern];
	}

	var PathUtils = {

	  /**
	   * Returns true if the given path is absolute.
	   */
	  isAbsolute: function isAbsolute(path) {
	    return path.charAt(0) === '/';
	  },

	  /**
	   * Joins two URL paths together.
	   */
	  join: function join(a, b) {
	    return a.replace(/\/*$/, '/') + b;
	  },

	  /**
	   * Returns an array of the names of all parameters in the given pattern.
	   */
	  extractParamNames: function extractParamNames(pattern) {
	    return compilePattern(pattern).paramNames;
	  },

	  /**
	   * Extracts the portions of the given URL path that match the given pattern
	   * and returns an object of param name => value pairs. Returns null if the
	   * pattern does not match the given path.
	   */
	  extractParams: function extractParams(pattern, path) {
	    var _compilePattern = compilePattern(pattern);

	    var matcher = _compilePattern.matcher;
	    var paramNames = _compilePattern.paramNames;

	    var match = path.match(matcher);

	    if (!match) {
	      return null;
	    }var params = {};

	    paramNames.forEach(function (paramName, index) {
	      params[paramName] = match[index + 1];
	    });

	    return params;
	  },

	  /**
	   * Returns a version of the given route path with params interpolated. Throws
	   * if there is a dynamic segment of the route path for which there is no param.
	   */
	  injectParams: function injectParams(pattern, params) {
	    params = params || {};

	    var splatIndex = 0;

	    return pattern.replace(paramInjectMatcher, function (match, paramName) {
	      paramName = paramName || 'splat';

	      // If param is optional don't check for existence
	      if (paramName.slice(-1) === '?') {
	        paramName = paramName.slice(0, -1);

	        if (params[paramName] == null) return '';
	      } else {
	        invariant(params[paramName] != null, 'Missing "%s" parameter for path "%s"', paramName, pattern);
	      }

	      var segment;
	      if (paramName === 'splat' && Array.isArray(params[paramName])) {
	        segment = params[paramName][splatIndex++];

	        invariant(segment != null, 'Missing splat # %s for path "%s"', splatIndex, pattern);
	      } else {
	        segment = params[paramName];
	      }

	      return segment;
	    }).replace(paramInjectTrailingSlashMatcher, '/');
	  },

	  /**
	   * Returns an object that is the result of parsing any query string contained
	   * in the given path, null if the path contains no query string.
	   */
	  extractQuery: function extractQuery(path) {
	    var match = path.match(queryMatcher);
	    return match && qs.parse(match[1]);
	  },

	  /**
	   * Returns a version of the given path without the query string.
	   */
	  withoutQuery: function withoutQuery(path) {
	    return path.replace(queryMatcher, '');
	  },

	  /**
	   * Returns a version of the given path with the parameters in the given
	   * query merged into the query string.
	   */
	  withQuery: function withQuery(path, query) {
	    var existingQuery = PathUtils.extractQuery(path);

	    if (existingQuery) query = query ? assign(existingQuery, query) : existingQuery;

	    var queryString = qs.stringify(query, { arrayFormat: 'brackets' });

	    if (queryString) {
	      return PathUtils.withoutQuery(path) + '?' + queryString;
	    }return PathUtils.withoutQuery(path);
	  }

	};

	module.exports = PathUtils;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(77);
	var canUseDOM = __webpack_require__(75).canUseDOM;
	var getWindowScrollPosition = __webpack_require__(162);

	function shouldUpdateScroll(state, prevState) {
	  if (!prevState) {
	    return true;
	  } // Don't update scroll position when only the query has changed.
	  if (state.pathname === prevState.pathname) {
	    return false;
	  }var routes = state.routes;
	  var prevRoutes = prevState.routes;

	  var sharedAncestorRoutes = routes.filter(function (route) {
	    return prevRoutes.indexOf(route) !== -1;
	  });

	  return !sharedAncestorRoutes.some(function (route) {
	    return route.ignoreScrollBehavior;
	  });
	}

	/**
	 * Provides the router with the ability to manage window scroll position
	 * according to its scroll behavior.
	 */
	var ScrollHistory = {

	  statics: {

	    /**
	     * Records curent scroll position as the last known position for the given URL path.
	     */
	    recordScrollPosition: function recordScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};

	      this.scrollHistory[path] = getWindowScrollPosition();
	    },

	    /**
	     * Returns the last known scroll position for the given URL path.
	     */
	    getScrollPosition: function getScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};

	      return this.scrollHistory[path] || null;
	    }

	  },

	  componentWillMount: function componentWillMount() {
	    invariant(this.constructor.getScrollBehavior() == null || canUseDOM, 'Cannot use scroll behavior without a DOM');
	  },

	  componentDidMount: function componentDidMount() {
	    this._updateScroll();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    this._updateScroll(prevState);
	  },

	  _updateScroll: function _updateScroll(prevState) {
	    if (!shouldUpdateScroll(this.state, prevState)) {
	      return;
	    }var scrollBehavior = this.constructor.getScrollBehavior();

	    if (scrollBehavior) scrollBehavior.updateScrollPosition(this.constructor.getScrollPosition(this.state.path), this.state.action);
	  }

	};

	module.exports = ScrollHistory;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(13);

	function isValidChild(object) {
	  return object == null || React.isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	module.exports = isReactChildren;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W058 */

	'use strict';

	var Cancellation = __webpack_require__(86);
	var Redirect = __webpack_require__(85);

	/**
	 * Encapsulates a transition to a given path.
	 *
	 * The willTransitionTo and willTransitionFrom handlers receive
	 * an instance of this class as their first argument.
	 */
	function Transition(path, retry) {
	  this.path = path;
	  this.abortReason = null;
	  // TODO: Change this to router.retryTransition(transition)
	  this.retry = retry.bind(this);
	}

	Transition.prototype.abort = function (reason) {
	  if (this.abortReason == null) this.abortReason = reason || 'ABORT';
	};

	Transition.prototype.redirect = function (to, params, query) {
	  this.abort(new Redirect(to, params, query));
	};

	Transition.prototype.cancel = function () {
	  this.abort(new Cancellation());
	};

	Transition.from = function (transition, routes, components, callback) {
	  routes.reduce(function (callback, route, index) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onLeave) {
	        try {
	          route.onLeave(transition, components[index], callback);

	          // If there is no callback in the argument list, call it automatically.
	          if (route.onLeave.length < 3) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};

	Transition.to = function (transition, routes, params, query, callback) {
	  routes.reduceRight(function (callback, route) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onEnter) {
	        try {
	          route.onEnter(transition, params, query, callback);

	          // If there is no callback in the argument list, call it automatically.
	          if (route.onEnter.length < 4) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};

	module.exports = Transition;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Encapsulates a redirect to the given route.
	 */
	"use strict";

	function Redirect(to, params, query) {
	  this.to = to;
	  this.params = params;
	  this.query = query;
	}

	module.exports = Redirect;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Represents a cancellation caused by navigating away
	 * before the previous transition has fully resolved.
	 */
	"use strict";

	function Cancellation() {}

	module.exports = Cancellation;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	/* jshint -W084 */
	var PathUtils = __webpack_require__(81);

	function deepSearch(route, pathname, query) {
	  // Check the subtree first to find the most deeply-nested match.
	  var childRoutes = route.childRoutes;
	  if (childRoutes) {
	    var match, childRoute;
	    for (var i = 0, len = childRoutes.length; i < len; ++i) {
	      childRoute = childRoutes[i];

	      if (childRoute.isDefault || childRoute.isNotFound) continue; // Check these in order later.

	      if (match = deepSearch(childRoute, pathname, query)) {
	        // A route in the subtree matched! Add this route and we're done.
	        match.routes.unshift(route);
	        return match;
	      }
	    }
	  }

	  // No child routes matched; try the default route.
	  var defaultRoute = route.defaultRoute;
	  if (defaultRoute && (params = PathUtils.extractParams(defaultRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, defaultRoute]);
	  } // Does the "not found" route match?
	  var notFoundRoute = route.notFoundRoute;
	  if (notFoundRoute && (params = PathUtils.extractParams(notFoundRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, notFoundRoute]);
	  } // Last attempt: check this route.
	  var params = PathUtils.extractParams(route.path, pathname);
	  if (params) {
	    return new Match(pathname, params, query, [route]);
	  }return null;
	}

	var Match = (function () {
	  function Match(pathname, params, query, routes) {
	    _classCallCheck(this, Match);

	    this.pathname = pathname;
	    this.params = params;
	    this.query = query;
	    this.routes = routes;
	  }

	  _createClass(Match, null, [{
	    key: 'findMatch',

	    /**
	     * Attempts to match depth-first a route in the given route's
	     * subtree against the given path and returns the match if it
	     * succeeds, null if no match can be made.
	     */
	    value: function findMatch(routes, path) {
	      var pathname = PathUtils.withoutQuery(path);
	      var query = PathUtils.extractQuery(path);
	      var match = null;

	      for (var i = 0, len = routes.length; match == null && i < len; ++i) match = deepSearch(routes[i], pathname, query);

	      return match;
	    }
	  }]);

	  return Match;
	})();

	module.exports = Match;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function supportsHistory() {
	  /*! taken from modernizr
	   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	   * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	   */
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}

	module.exports = supportsHistory;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function isPositiveInteger(value) {
	  if (
	    value % 1 === 0 &&
	    value > -1
	  ) {
	    return true;
	  } else {
	    return false;
	  }
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    draining = true;
	    var currentQueue;
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        var i = -1;
	        while (++i < len) {
	            currentQueue[i]();
	        }
	        len = queue.length;
	    }
	    draining = false;
	}
	process.nextTick = function (fun) {
	    queue.push(fun);
	    if (!draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(13);
	var emptyFunction = function(){};
	var assign = __webpack_require__(164);
	var classNames = __webpack_require__(210);

	//
	// Helpers. See Element definition below this section.
	//

	function createUIEvent(draggable) {
	  // State changes are often (but not always!) async. We want the latest value.
	  var state = draggable._pendingState || draggable.state;
	  return {
	    node: draggable.getDOMNode(),
	    position: {
	      top: state.clientY,
	      left: state.clientX
	    }
	  };
	}

	function canDragY(draggable) {
	  return draggable.props.axis === 'both' ||
	      draggable.props.axis === 'y';
	}

	function canDragX(draggable) {
	  return draggable.props.axis === 'both' ||
	      draggable.props.axis === 'x';
	}

	function isFunction(func) {
	  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';
	}

	// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
	function findInArray(array, callback) {
	  for (var i = 0, length = array.length; i < length; i++) {
	    if (callback.apply(callback, [array[i], i, array])) return array[i];
	  }
	}

	function matchesSelector(el, selector) {
	  var method = findInArray([
	    'matches',
	    'webkitMatchesSelector',
	    'mozMatchesSelector',
	    'msMatchesSelector',
	    'oMatchesSelector'
	  ], function(method){
	    return isFunction(el[method]);
	  });

	  return el[method].call(el, selector);
	}

	// @credits: http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript/4819886#4819886
	/* Conditional to fix node server side rendering of component */
	if (typeof window === 'undefined') {
	    // Do Node Stuff
	    var isTouchDevice = false;
	} else {
	    // Do Browser Stuff
	    var isTouchDevice = 'ontouchstart' in window || // works on most browsers
	                        'onmsgesturechange' in window; // works on ie10 on ms surface

	}

	// look ::handleDragStart
	//function isMultiTouch(e) {
	//  return e.touches && Array.isArray(e.touches) && e.touches.length > 1
	//}

	/**
	 * simple abstraction for dragging events names
	 * */
	var dragEventFor = (function () {
	  var eventsFor = {
	    touch: {
	      start: 'touchstart',
	      move: 'touchmove',
	      end: 'touchend'
	    },
	    mouse: {
	      start: 'mousedown',
	      move: 'mousemove',
	      end: 'mouseup'
	    }
	  };
	  return eventsFor[isTouchDevice ? 'touch' : 'mouse'];
	})();

	/**
	 * get {clientX, clientY} positions of control
	 * */
	function getControlPosition(e) {
	  var position = (e.touches && e.touches[0]) || e;
	  return {
	    clientX: position.clientX,
	    clientY: position.clientY
	  };
	}

	function addEvent(el, event, handler) {
	  if (!el) { return; }
	  if (el.attachEvent) {
	    el.attachEvent('on' + event, handler);
	  } else if (el.addEventListener) {
	    el.addEventListener(event, handler, true);
	  } else {
	    el['on' + event] = handler;
	  }
	}

	function removeEvent(el, event, handler) {
	  if (!el) { return; }
	  if (el.detachEvent) {
	    el.detachEvent('on' + event, handler);
	  } else if (el.removeEventListener) {
	    el.removeEventListener(event, handler, true);
	  } else {
	    el['on' + event] = null;
	  }
	}

	function outerHeight(node) {
	  // This is deliberately excluding margin for our calculations, since we are using
	  // offsetTop which is including margin. See getBoundPosition
	  var height = node.clientHeight;
	  var computedStyle = window.getComputedStyle(node);
	  height += int(computedStyle.borderTopWidth);
	  height += int(computedStyle.borderBottomWidth);
	  return height;
	}

	function outerWidth(node) {
	  // This is deliberately excluding margin for our calculations, since we are using
	  // offsetLeft which is including margin. See getBoundPosition
	  var width = node.clientWidth;
	  var computedStyle = window.getComputedStyle(node);
	  width += int(computedStyle.borderLeftWidth);
	  width += int(computedStyle.borderRightWidth);
	  return width;
	}
	function innerHeight(node) {
	  var height = node.clientHeight;
	  var computedStyle = window.getComputedStyle(node);
	  height -= int(computedStyle.paddingTop);
	  height -= int(computedStyle.paddingBottom);
	  return height;
	}

	function innerWidth(node) {
	  var width = node.clientWidth;
	  var computedStyle = window.getComputedStyle(node);
	  width -= int(computedStyle.paddingLeft);
	  width -= int(computedStyle.paddingRight);
	  return width;
	}

	function isNum(num) {
	  return typeof num === 'number' && !isNaN(num);
	}

	function int(a) {
	  return parseInt(a, 10);
	}

	function getBoundPosition(draggable, clientX, clientY) {
	  var bounds = JSON.parse(JSON.stringify(draggable.props.bounds));
	  var node = draggable.getDOMNode();
	  var parent = node.parentNode;

	  if (bounds === 'parent') {
	    var nodeStyle = window.getComputedStyle(node);
	    var parentStyle = window.getComputedStyle(parent);
	    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.
	    bounds = {
	      left: -node.offsetLeft + int(parentStyle.paddingLeft) +
	            int(nodeStyle.borderLeftWidth) + int(nodeStyle.marginLeft),
	      top: -node.offsetTop + int(parentStyle.paddingTop) +
	            int(nodeStyle.borderTopWidth) + int(nodeStyle.marginTop),
	      right: innerWidth(parent) - outerWidth(node) - node.offsetLeft,
	      bottom: innerHeight(parent) - outerHeight(node) - node.offsetTop
	    };
	  }

	  // Keep x and y below right and bottom limits...
	  if (isNum(bounds.right)) clientX = Math.min(clientX, bounds.right);
	  if (isNum(bounds.bottom)) clientY = Math.min(clientY, bounds.bottom);

	  // But above left and top limits.
	  if (isNum(bounds.left)) clientX = Math.max(clientX, bounds.left);
	  if (isNum(bounds.top)) clientY = Math.max(clientY, bounds.top);

	  return [clientX, clientY];
	}

	function snapToGrid(grid, pendingX, pendingY) {
	  var x = Math.round(pendingX / grid[0]) * grid[0];
	  var y = Math.round(pendingY / grid[1]) * grid[1];
	  return [x, y];
	}

	// Useful for preventing blue highlights all over everything when dragging.
	var userSelectStyle = ';user-select: none;-webkit-user-select:none;-moz-user-select:none;' +
	  '-o-user-select:none;-ms-user-select:none;';

	function addUserSelectStyles(draggable) {
	  if (!draggable.props.enableUserSelectHack) return;
	  var style = document.body.getAttribute('style') || '';
	  document.body.setAttribute('style', style + userSelectStyle);
	}

	function removeUserSelectStyles(draggable) {
	  if (!draggable.props.enableUserSelectHack) return;
	  var style = document.body.getAttribute('style') || '';
	  document.body.setAttribute('style', style.replace(userSelectStyle, ''));
	}

	function createCSSTransform(style) {
	  // Replace unitless items with px
	  var x = style.x + 'px';
	  var y = style.y + 'px';
	  return {
	    transform: 'translate(' + x + ',' + y + ')',
	    WebkitTransform: 'translate(' + x + ',' + y + ')',
	    OTransform: 'translate(' + x + ',' + y + ')',
	    msTransform: 'translate(' + x + ',' + y + ')',
	    MozTransform: 'translate(' + x + ',' + y + ')'
	  };
	}


	//
	// End Helpers.
	//

	//
	// Define <Draggable>
	//

	module.exports = React.createClass({
	  displayName: 'Draggable',

	  propTypes: {
	    /**
	     * `axis` determines which axis the draggable can move.
	     *
	     * 'both' allows movement horizontally and vertically.
	     * 'x' limits movement to horizontal axis.
	     * 'y' limits movement to vertical axis.
	     *
	     * Defaults to 'both'.
	     */
	    axis: React.PropTypes.oneOf(['both', 'x', 'y']),

	    /**
	     * `bounds` determines the range of movement available to the element.
	     * Available values are:
	     *
	     * 'parent' restricts movement within the Draggable's parent node.
	     *
	     * Alternatively, pass an object with the following properties, all of which are optional:
	     *
	     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
	     *
	     * All values are in px.
	     *
	     * Example:
	     *
	     * ```jsx
	     *   var App = React.createClass({
	     *       render: function () {
	     *         return (
	     *            <Draggable bounds={{right: 300, bottom: 300}}>
	     *              <div>Content</div>
	     *           </Draggable>
	     *         );
	     *       }
	     *   });
	     * ```
	     */
	    bounds: React.PropTypes.oneOfType([
	      React.PropTypes.shape({
	        left: React.PropTypes.Number,
	        right: React.PropTypes.Number,
	        top: React.PropTypes.Number,
	        bottom: React.PropTypes.Number
	      }),
	      React.PropTypes.oneOf(['parent', false])
	    ]),

	    /**
	     * By default, we add 'user-select:none' attributes to the document body
	     * to prevent ugly text selection during drag. If this is causing problems
	     * for your app, set this to `false`.
	     */
	    enableUserSelectHack: React.PropTypes.bool,

	    /**
	     * `handle` specifies a selector to be used as the handle that initiates drag.
	     *
	     * Example:
	     *
	     * ```jsx
	     *   var App = React.createClass({
	     *       render: function () {
	     *         return (
	     *            <Draggable handle=".handle">
	     *              <div>
	     *                  <div className="handle">Click me to drag</div>
	     *                  <div>This is some other content</div>
	     *              </div>
	     *           </Draggable>
	     *         );
	     *       }
	     *   });
	     * ```
	     */
	    handle: React.PropTypes.string,

	    /**
	     * `cancel` specifies a selector to be used to prevent drag initialization.
	     *
	     * Example:
	     *
	     * ```jsx
	     *   var App = React.createClass({
	     *       render: function () {
	     *           return(
	     *               <Draggable cancel=".cancel">
	     *                   <div>
	     *                     <div className="cancel">You can't drag from here</div>
	     *            <div>Dragging here works fine</div>
	     *                   </div>
	     *               </Draggable>
	     *           );
	     *       }
	     *   });
	     * ```
	     */
	    cancel: React.PropTypes.string,

	    /**
	     * `grid` specifies the x and y that dragging should snap to.
	     *
	     * Example:
	     *
	     * ```jsx
	     *   var App = React.createClass({
	     *       render: function () {
	     *           return (
	     *               <Draggable grid={[25, 25]}>
	     *                   <div>I snap to a 25 x 25 grid</div>
	     *               </Draggable>
	     *           );
	     *       }
	     *   });
	     * ```
	     */
	    grid: React.PropTypes.arrayOf(React.PropTypes.number),

	    /**
	     * `start` specifies the x and y that the dragged item should start at
	     *
	     * Example:
	     *
	     * ```jsx
	     *      var App = React.createClass({
	     *          render: function () {
	     *              return (
	     *                  <Draggable start={{x: 25, y: 25}}>
	     *                      <div>I start with transformX: 25px and transformY: 25px;</div>
	     *                  </Draggable>
	     *              );
	     *          }
	     *      });
	     * ```
	     */
	    start: React.PropTypes.shape({
	      x: React.PropTypes.number,
	      y: React.PropTypes.number
	    }),

	    /**
	     * `moveOnStartChange`, if true (default false) will move the element if the `start`
	     * property changes.
	     */
	    moveOnStartChange: React.PropTypes.bool,


	    /**
	     * `zIndex` specifies the zIndex to use while dragging.
	     *
	     * Example:
	     *
	     * ```jsx
	     *   var App = React.createClass({
	     *       render: function () {
	     *           return (
	     *               <Draggable zIndex={100}>
	     *                   <div>I have a zIndex</div>
	     *               </Draggable>
	     *           );
	     *       }
	     *   });
	     * ```
	     */
	    zIndex: React.PropTypes.number,

	    /**
	     * Called when dragging starts.
	     * If this function returns the boolean false, dragging will be canceled.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onStart: React.PropTypes.func,

	    /**
	     * Called while dragging.
	     * If this function returns the boolean false, dragging will be canceled.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onDrag: React.PropTypes.func,

	    /**
	     * Called when dragging stops.
	     *
	     * Example:
	     *
	     * ```js
	     *  function (event, ui) {}
	     * ```
	     *
	     * `event` is the Event that was triggered.
	     * `ui` is an object:
	     *
	     * ```js
	     *  {
	     *    position: {top: 0, left: 0}
	     *  }
	     * ```
	     */
	    onStop: React.PropTypes.func,

	    /**
	     * A workaround option which can be passed if onMouseDown needs to be accessed,
	     * since it'll always be blocked (due to that there's internal use of onMouseDown)
	     */
	    onMouseDown: React.PropTypes.func,
	  },

	  componentWillReceiveProps: function(newProps) {
	    // React to changes in the 'start' param.
	    if (newProps.moveOnStartChange && newProps.start) {
	      this.setState(this.getInitialState(newProps));
	    }
	  },

	  componentWillUnmount: function() {
	    // Remove any leftover event handlers
	    removeEvent(window, dragEventFor['move'], this.handleDrag);
	    removeEvent(window, dragEventFor['end'], this.handleDragEnd);
	    removeUserSelectStyles(this);
	  },

	  getDefaultProps: function () {
	    return {
	      axis: 'both',
	      bounds: false,
	      handle: null,
	      cancel: null,
	      grid: null,
	      moveOnStartChange: false,
	      start: {x: 0, y: 0},
	      zIndex: NaN,
	      enableUserSelectHack: true,
	      onStart: emptyFunction,
	      onDrag: emptyFunction,
	      onStop: emptyFunction,
	      onMouseDown: emptyFunction
	    };
	  },

	  getInitialState: function (props) {
	    // Handle call from CWRP
	    props = props || this.props;
	    return {
	      // Whether or not we are currently dragging.
	      dragging: false,

	      // Offset between start top/left and mouse top/left while dragging.
	      offsetX: 0, offsetY: 0,

	      // Current transform x and y.
	      clientX: props.start.x, clientY: props.start.y
	    };
	  },

	  handleDragStart: function (e) {
	    // todo: write right implementation to prevent multitouch drag
	    // prevent multi-touch events
	    // if (isMultiTouch(e)) {
	    //     this.handleDragEnd.apply(e, arguments);
	    //     return
	    // }

	    // Make it possible to attach event handlers on top of this one
	    this.props.onMouseDown(e);

	    // Short circuit if handle or cancel prop was provided and selector doesn't match
	    if ((this.props.handle && !matchesSelector(e.target, this.props.handle)) ||
	      (this.props.cancel && matchesSelector(e.target, this.props.cancel))) {
	      return;
	    }

	    // Call event handler. If it returns explicit false, cancel.
	    var shouldStart = this.props.onStart(e, createUIEvent(this));
	    if (shouldStart === false) return;

	    var dragPoint = getControlPosition(e);

	    // Add a style to the body to disable user-select. This prevents text from
	    // being selected all over the page.
	    addUserSelectStyles(this);

	    // Initiate dragging. Set the current x and y as offsets
	    // so we know how much we've moved during the drag. This allows us
	    // to drag elements around even if they have been moved, without issue.
	    this.setState({
	      dragging: true,
	      offsetX: dragPoint.clientX - this.state.clientX,
	      offsetY: dragPoint.clientY - this.state.clientY
	    });


	    // Add event handlers
	    addEvent(window, dragEventFor['move'], this.handleDrag);
	    addEvent(window, dragEventFor['end'], this.handleDragEnd);
	  },

	  handleDragEnd: function (e) {
	    // Short circuit if not currently dragging
	    if (!this.state.dragging) {
	      return;
	    }

	    removeUserSelectStyles(this);

	    // Turn off dragging
	    this.setState({
	      dragging: false
	    });

	    // Call event handler
	    this.props.onStop(e, createUIEvent(this));

	    // Remove event handlers
	    removeEvent(window, dragEventFor['move'], this.handleDrag);
	    removeEvent(window, dragEventFor['end'], this.handleDragEnd);
	  },

	  handleDrag: function (e) {
	    var dragPoint = getControlPosition(e);

	    // Calculate X and Y
	    var clientX = dragPoint.clientX - this.state.offsetX;
	    var clientY = dragPoint.clientY - this.state.offsetY;

	    // Snap to grid if prop has been provided
	    if (Array.isArray(this.props.grid)) {
	      var coords = snapToGrid(this.props.grid, clientX, clientY);
	      clientX = coords[0], clientY = coords[1];
	    }

	    if (this.props.bounds) {
	      var pos = getBoundPosition(this, clientX, clientY);
	      clientX = pos[0], clientY = pos[1];
	    }

	    // Call event handler. If it returns explicit false, cancel.
	    var shouldUpdate = this.props.onDrag(e, createUIEvent(this));
	    if (shouldUpdate === false) return this.handleDragEnd();

	    // Update transform
	    this.setState({
	      clientX: clientX,
	      clientY: clientY
	    });
	  },

	  render: function () {
	    // Create style object. We extend from existing styles so we don't
	    // remove anything already set (like background, color, etc).
	    var childStyle = this.props.children.props.style || {};

	    // Add a CSS transform to move the element around. This allows us to move the element around
	    // without worrying about whether or not it is relatively or absolutely positioned.
	    // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>
	    // has a clean slate.
	    var transform = createCSSTransform({
	      // Set left if horizontal drag is enabled
	      x: canDragX(this) ?
	        this.state.clientX :
	        0,

	      // Set top if vertical drag is enabled
	      y: canDragY(this) ?
	        this.state.clientY :
	        0
	    });
	    var style = assign({}, childStyle, transform);

	    // Set zIndex if currently dragging and prop has been provided
	    if (this.state.dragging && !isNaN(this.props.zIndex)) {
	      style.zIndex = this.props.zIndex;
	    }

	    var className = classNames((this.props.children.props.className || ''), 'react-draggable', {
	      'react-draggable-dragging': this.state.dragging,
	      'react-draggable-dragged': this.state.dragged
	    });

	    // Reuse the child provided
	    // This makes it flexible to use whatever element is wanted (div, ul, etc)
	    return React.cloneElement(React.Children.only(this.props.children), {
	      style: style,
	      className: className,

	      onMouseDown: this.handleDragStart,
	      onTouchStart: function(ev){
	        ev.preventDefault(); // prevent for scroll
	        return this.handleDragStart.apply(this, arguments);
	      }.bind(this),

	      onMouseUp: this.handleDragEnd,
	      onTouchEnd: this.handleDragEnd
	    });
	  }
	});


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	function classNames() {
		var classes = '';
		var arg;

		for (var i = 0; i < arguments.length; i++) {
			arg = arguments[i];
			if (!arg) {
				continue;
			}

			if ('string' === typeof arg || 'number' === typeof arg) {
				classes += ' ' + arg;
			} else if (Object.prototype.toString.call(arg) === '[object Array]') {
				classes += ' ' + classNames.apply(null, arg);
			} else if ('object' === typeof arg) {
				for (var key in arg) {
					if (!arg.hasOwnProperty(key) || !arg[key]) {
						continue;
					}
					classes += ' ' + key;
				}
			}
		}
		return classes.substr(1);
	}

	// safely export classNames in case the script is included directly on a page
	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	}


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Baobab Cursor Abstraction
	 * ==========================
	 *
	 * Nested selection into a baobab tree.
	 */
	var EventEmitter = __webpack_require__(166),
	    helpers = __webpack_require__(52),
	    defaults = __webpack_require__(97),
	    type = __webpack_require__(98);

	/**
	 * Main Class
	 */
	function Cursor(tree, path, solvedPath, hash) {
	  var self = this;

	  // Extending event emitter
	  EventEmitter.call(this);

	  // Enforcing array
	  path = path || [];

	  // Properties
	  this.tree = tree;
	  this.path = path;
	  this.hash = hash;
	  this.archive = null;
	  this.recording = false;
	  this.undoing = false;

	  // Privates
	  this._identity = '[object Cursor]';

	  // Complex path?
	  this.complexPath = !!solvedPath;
	  this.solvedPath = this.complexPath ? solvedPath : this.path;

	  // Relevant?
	  this.relevant = this.get() !== undefined;

	  // Root listeners
	  function update(previousState) {
	    if (self.recording && !self.undoing) {

	      // Handle archive
	      var record = helpers.getIn(previousState, self.solvedPath, self.tree);
	      self.archive.add(record);
	    }

	    self.undoing = false;
	    return self.emit('update');
	  }

	  this.updateHandler = function(e) {
	    var log = e.data.log,
	        previousState = e.data.previousState,
	        shouldFire = false,
	        c, p, l, m, i, j;

	    // Solving path if needed
	    if (self.complexPath)
	      self.solvedPath = helpers.solvePath(self.tree.data, self.path, self.tree);

	    // If selector listens at tree, we fire
	    if (!self.path.length)
	      return update(previousState);

	    // Checking update log to see whether the cursor should update.
	    if (self.solvedPath)
	      shouldFire = helpers.solveUpdate(log, [self.solvedPath]);

	    // Handling relevancy
	    var data = self.get() !== undefined;

	    if (self.relevant) {
	      if (data && shouldFire) {
	        update(previousState);
	      }
	      else if (!data) {
	        self.emit('irrelevant');
	        self.relevant = false;
	      }
	    }
	    else {
	      if (data && shouldFire) {
	        self.emit('relevant');
	        update(previousState);
	        self.relevant = true;
	      }
	    }
	  };

	  // Lazy binding
	  var bound = false;

	  this._lazyBind = function() {
	    if (bound)
	      return;
	    bound = true;
	    self.tree.on('update', self.updateHandler);
	  };

	  this.on = helpers.before(this._lazyBind, this.on.bind(this));
	  this.once = helpers.before(this._lazyBind, this.once.bind(this));

	  if (this.complexPath)
	    this._lazyBind();
	}

	helpers.inherits(Cursor, EventEmitter);

	/**
	 * Predicates
	 */
	Cursor.prototype.isRoot = function() {
	  return !this.path.length;
	};

	Cursor.prototype.isLeaf = function() {
	  return type.Primitive(this.get());
	};

	Cursor.prototype.isBranch = function() {
	  return !this.isLeaf() && !this.isRoot();
	};

	/**
	 * Traversal
	 */
	Cursor.prototype.root = function() {
	  return this.tree.root();
	};

	Cursor.prototype.select = function(path) {
	  if (arguments.length > 1)
	    path = helpers.arrayOf(arguments);

	  if (!type.Path(path))
	    throw Error('baobab.Cursor.select: invalid path.');
	  return this.tree.select(this.path.concat(path));
	};

	Cursor.prototype.up = function() {
	  if (this.solvedPath && this.solvedPath.length)
	    return this.tree.select(this.path.slice(0, -1));
	  else
	    return null;
	};

	Cursor.prototype.left = function() {
	  var last = +this.solvedPath[this.solvedPath.length - 1];

	  if (isNaN(last))
	    throw Error('baobab.Cursor.left: cannot go left on a non-list type.');

	  return last ?
	    this.tree.select(this.solvedPath.slice(0, -1).concat(last - 1)) :
	    null;
	};

	Cursor.prototype.leftmost = function() {
	  var last = +this.solvedPath[this.solvedPath.length - 1];

	  if (isNaN(last))
	    throw Error('baobab.Cursor.leftmost: cannot go left on a non-list type.');

	  return this.tree.select(this.solvedPath.slice(0, -1).concat(0));
	};

	Cursor.prototype.right = function() {
	  var last = +this.solvedPath[this.solvedPath.length - 1];

	  if (isNaN(last))
	    throw Error('baobab.Cursor.right: cannot go right on a non-list type.');

	  if (last + 1 === this.up().get().length)
	    return null;

	  return this.tree.select(this.solvedPath.slice(0, -1).concat(last + 1));
	};

	Cursor.prototype.rightmost = function() {
	  var last = +this.solvedPath[this.solvedPath.length - 1];

	  if (isNaN(last))
	    throw Error('baobab.Cursor.right: cannot go right on a non-list type.');

	  var list = this.up().get();

	  return this.tree.select(this.solvedPath.slice(0, -1).concat(list.length - 1));
	};

	Cursor.prototype.down = function() {
	  var last = +this.solvedPath[this.solvedPath.length - 1];

	  if (!(this.get() instanceof Array))
	    return null;

	  return this.tree.select(this.solvedPath.concat(0));
	};

	/**
	 * Access
	 */
	Cursor.prototype.get = function(path) {
	  if (arguments.length > 1)
	    path = helpers.arrayOf(arguments);

	  var fullPath = this.solvedPath.concat(
	    [].concat(path || path === 0 ? path : [])
	  );

	  return helpers.getIn(this.tree.data, fullPath, this.tree);
	};

	/**
	 * Update
	 */
	function pathPolymorphism(method, allowedType, key, val) {
	  if (arguments.length > 5)
	    throw Error('baobab.Cursor.' + method + ': too many arguments.');

	  if (method === 'unset') {
	    val = true;

	    if (arguments.length === 2)
	      key = [];
	  }

	  else if (arguments.length < 4) {
	    val = key;
	    key = [];
	  }

	  if (!type.Path(key))
	    throw Error('baobab.Cursor.' + method + ': invalid path "' + key + '".');

	  // Splice exception
	  if (method === 'splice' &&
	      !type.Splicer(val)) {
	    if (type.Array(val))
	      val = [val];
	    else
	      throw Error('baobab.Cursor.splice: incorrect value.');
	  }

	  // Checking value validity
	  if (allowedType && !allowedType(val))
	    throw Error('baobab.Cursor.' + method + ': incorrect value.');

	  var path = [].concat(key),
	      solvedPath = helpers.solvePath(this.get(), path, this.tree);

	  if (!solvedPath)
	    throw Error('baobab.Cursor.' + method + ': could not solve dynamic path.');

	  var leaf = {};
	  leaf['$' + method] = val;

	  var spec = helpers.pathObject(solvedPath, leaf);

	  return spec;
	}

	function makeUpdateMethod(command, type) {
	  Cursor.prototype[command] = function() {
	    var spec = pathPolymorphism.bind(this, command, type).apply(this, arguments);

	    return this.update(spec, true);
	  };
	}

	makeUpdateMethod('set');
	makeUpdateMethod('apply', type.Function);
	makeUpdateMethod('chain', type.Function);
	makeUpdateMethod('push');
	makeUpdateMethod('unshift');
	makeUpdateMethod('merge', type.Object);
	makeUpdateMethod('splice');

	Cursor.prototype.unset = function(key) {
	  if (key === undefined && this.isRoot())
	    throw Error('baobab.Cursor.unset: cannot remove root node.');

	  var spec = pathPolymorphism.bind(this, 'unset', null).apply(this, arguments);

	  return this.update(spec, true);
	};

	Cursor.prototype.update = function(spec, skipMerge) {
	  if (!type.Object(spec))
	    throw Error('baobab.Cursor.update: invalid specifications.');

	  this.tree.stack(helpers.pathObject(this.solvedPath, spec), skipMerge);
	  return this;
	};

	/**
	 * History
	 */
	Cursor.prototype.startRecording = function(maxRecords) {
	  maxRecords = maxRecords || 5;

	  if (maxRecords < 1)
	    throw Error('baobab.Cursor.startRecording: invalid maximum number of records.');

	  if (this.archive)
	    return this;

	  // Lazy bind
	  this._lazyBind();

	  this.archive = helpers.archive(maxRecords);
	  this.recording = true;
	  return this;
	};

	Cursor.prototype.stopRecording = function() {
	  this.recording = false;
	  return this;
	};

	Cursor.prototype.undo = function(steps) {
	  steps = steps || 1;

	  if (!this.recording)
	    throw Error('baobab.Cursor.undo: cursor is not recording.');

	  if (!type.PositiveInteger(steps))
	    throw Error('baobab.Cursor.undo: expecting a positive integer.');

	  var record = this.archive.back(steps);

	  if (!record)
	    throw Error('boabab.Cursor.undo: cannot find a relevant record (' + steps + ' back).');

	  this.undoing = true;
	  return this.set(record);
	};

	Cursor.prototype.hasHistory = function() {
	  return !!(this.archive && this.archive.get().length);
	};

	Cursor.prototype.getHistory = function() {
	  return this.archive ? this.archive.get() : [];
	};

	Cursor.prototype.clearHistory = function() {
	  this.archive = null;
	  return this;
	};

	/**
	 * Releasing
	 */
	Cursor.prototype.release = function() {

	  // Removing listener on parent
	  this.tree.off('update', this.updateHandler);

	  // If the cursor is hashed, we unsubscribe from the parent
	  if (this.hash)
	    delete this.tree._cursors[this.hash];

	  // Dereferencing
	  delete this.tree;
	  delete this.path;
	  delete this.solvedPath;
	  delete this.archive;

	  // Killing emitter
	  this.kill();
	};

	/**
	 * Output
	 */
	Cursor.prototype.toJSON = function() {
	  return this.get();
	};

	Cursor.prototype.toString = function() {
	  return this._identity;
	};

	/**
	 * Export
	 */
	module.exports = Cursor;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Baobab Facet Abstraction
	 * =========================
	 *
	 * Facets enable the user to define views on a given Baobab tree.
	 */
	var EventEmitter = __webpack_require__(166),
	    Cursor = __webpack_require__(93),
	    helpers = __webpack_require__(52),
	    type = __webpack_require__(98);

	function Facet(tree, definition, args) {
	  var self = this;

	  var firstTime = true,
	      solved = false,
	      getter = definition.get,
	      facetData = null;

	  // Extending event emitter
	  EventEmitter.call(this);

	  // Properties
	  this.tree = tree;
	  this.cursors = {};
	  this.facets = {};

	  var cursorsMapping = definition.cursors,
	      facetsMapping = definition.facets,
	      complexCursors = typeof definition.cursors === 'function',
	      complexFacets = typeof definition.facets === 'function';

	  // Refreshing the internal mapping
	  function refresh(complexity, targetMapping, targetProperty, mappingType, refreshArgs) {
	    if (!complexity && !firstTime)
	      return;

	    solved = false;

	    var solvedMapping = targetMapping;

	    if (complexity)
	      solvedMapping = targetMapping.apply(this, refreshArgs);

	    if (!mappingType(solvedMapping))
	      throw Error('baobab.Facet: incorrect ' + targetProperty + ' mapping.');

	    self[targetProperty] = {};

	    Object.keys(solvedMapping).forEach(function(k) {

	      if (targetProperty === 'cursors') {
	        if (solvedMapping[k] instanceof Cursor) {
	          self.cursors[k] = solvedMapping[k];
	          return;
	        }

	        if (type.Path(solvedMapping[k])) {
	          self.cursors[k] = tree.select(solvedMapping[k]);
	          return;
	        }
	      }

	      else {
	        if (solvedMapping[k] instanceof Facet) {
	          self.facets[k] = solvedMapping[k];
	          return;
	        }

	        if (typeof solvedMapping[k] === 'string') {
	          self.facets[k] = tree.facets[solvedMapping[k]];

	          if (!self.facets[k])
	            throw Error('baobab.Facet: unkown "' + solvedMapping[k] + '" facet in facets mapping.');
	          return;
	        }
	      }
	    });
	  }

	  this.refresh = function(refreshArgs) {
	    refreshArgs = refreshArgs || [];

	    if (!type.Array(refreshArgs))
	      throw Error('baobab.Facet.refresh: first argument should be an array.');

	    if (cursorsMapping)
	      refresh(
	        complexCursors,
	        cursorsMapping,
	        'cursors',
	        type.FacetCursors,
	        refreshArgs
	      );

	    if (facetsMapping)
	      refresh(
	        complexFacets,
	        facetsMapping,
	        'facets',
	        type.FacetFacets,
	        refreshArgs
	      );
	  };

	  // Data solving
	  this.get = function() {
	    if (solved)
	      return facetData;

	    // Solving
	    var data = {},
	        k;

	    for (k in self.facets)
	      data[k] = self.facets[k].get();

	    for (k in self.cursors)
	      data[k] = self.cursors[k].get();

	    // Applying getter
	    data = typeof getter === 'function' ?
	      getter.call(null, data) :
	      data;

	    solved = true;
	    facetData = data;

	    return facetData;
	  };

	  // Tracking the tree's updates
	  function cursorsPaths(cursors) {
	    return Object.keys(cursors).map(function(k) {
	      return cursors[k].solvedPath;
	    });
	  }

	  function facetsPaths(facets) {
	    var paths =  Object.keys(facets).map(function(k) {
	      return cursorsPaths(facets[k].cursors);
	    });

	    return [].concat.apply([], paths);
	  }

	  this.updateHandler = function(e) {

	    var paths = cursorsPaths(self.cursors).concat(facetsPaths(self.facets));

	    if (helpers.solveUpdate(e.data.log, paths)) {
	      solved = false;
	      self.emit('update');
	    }
	  };

	  // Init routine
	  this.refresh(args);
	  this.tree.on('update', this.updateHandler);

	  firstTime = false;
	}

	helpers.inherits(Facet, EventEmitter);

	Facet.prototype.release = function() {
	  this.tree.off('update', this.updateHandler);

	  this.tree = null;
	  this.cursors = null;
	  this.facets = null;
	  this.kill();
	};

	module.exports = Facet;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Baobab Update
	 * ==============
	 *
	 * A handy method to mutate an atom according to the given specification.
	 * Mostly inspired by http://facebook.github.io/react/docs/update.html
	 */
	var helpers = __webpack_require__(52),
	    type = __webpack_require__(98);

	// Helpers
	function makeError(path, message) {
	  var e = new Error('baobab.update: ' + message + ' at path /' +
	                    path.slice(1).join('/'));

	  e.path = path;
	  return e;
	}

	module.exports = function(data, spec, opts) {
	  opts = opts || {};

	  var log = {};

	  // Shifting root
	  data = {root: helpers.shallowClone(data)};

	  // Closure performing the updates themselves
	  var mutator = function(o, spec, path, parent) {
	    path = path || ['root'];

	    var hash = path.join('|λ|'),
	        lastKey = path[path.length - 1],
	        oldValue = o[lastKey],
	        fn,
	        k,
	        v,
	        i,
	        l;

	    // If nested object does not exist, we create it
	    if (type.Primitive(o[lastKey]))
	      o[lastKey] = {};
	    else
	      o[lastKey] = helpers.shallowClone(o[lastKey]);

	    // Are we at leaf level?
	    var leafLevel = Object.keys(spec).some(function(k) {
	      return k.charAt(0) === '$';
	    });

	    // Leaf level updates
	    if (leafLevel) {
	      log[hash] = true;

	      for (k in spec) {

	        // $unset
	        if (k === '$unset') {
	          var olderKey = path[path.length - 2];

	          if (!type.Object(parent[olderKey]))
	            throw makeError(path.slice(0, -1), 'using command $unset on a non-object');

	          parent[olderKey] = helpers.shallowClone(o);
	          delete parent[olderKey][lastKey];

	          break;
	        }

	        // $set
	        if (k === '$set') {
	          v = spec.$set;

	          o[lastKey] = v;
	        }

	        // $apply
	        else if (k === '$apply' || k === '$chain') {
	          fn = spec.$apply || spec.$chain;

	          if (typeof fn !== 'function')
	            throw makeError(path, 'using command $apply with a non function');

	          o[lastKey] = fn.call(null, oldValue);
	        }

	        // $merge
	        else if (k === '$merge') {
	          v = spec.$merge;

	          if (!type.Object(o[lastKey]) || !type.Object(v))
	            throw makeError(path, 'using command $merge with a non object');

	          o[lastKey] = helpers.shallowMerge(o[lastKey], v);
	        }

	        // $splice
	        if (k === '$splice') {
	          v = spec.$splice;

	          if (!type.Array(o[lastKey]))
	            throw makeError(path, 'using command $push to a non array');

	          for (i = 0, l = v.length; i < l; i++)
	            o[lastKey] = helpers.splice.apply(null, [o[lastKey]].concat(v[i]));
	        }

	        // $push
	        if (k === '$push') {
	          v = spec.$push;

	          if (!type.Array(o[lastKey]))
	            throw makeError(path, 'using command $push to a non array');

	          o[lastKey] = o[lastKey].concat(v);
	        }

	        // $unshift
	        if (k === '$unshift') {
	          v = spec.$unshift;

	          if (!type.Array(o[lastKey]))
	            throw makeError(path, 'using command $unshift to a non array');

	          o[lastKey] = [].concat(v).concat(o[lastKey]);
	        }
	      }
	    }
	    else {
	      for (k in spec)  {

	        // Recur
	        mutator(
	          o[lastKey],
	          spec[k],
	          path.concat(k),
	          o
	        );
	      }
	    }
	  };

	  mutator(data, spec);

	  // Returning data and path log
	  return {
	    data: data.root,

	    // SHIFT LOG
	    log: Object.keys(log).map(function(hash) {
	      return hash.split('|λ|').slice(1);
	    })
	  };
	};


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Baobab Merge
	 * =============
	 *
	 * A function used to merge updates in the stack.
	 */
	var helpers = __webpack_require__(52),
	    type = __webpack_require__(98);

	// Helpers
	var COMMANDS = ['$unset', '$set', '$apply'];

	function only(command, commandValue) {
	  var o = {};
	  o[command] = commandValue;
	  return o;
	}

	// Main function
	function merge(a, b) {
	  var o = helpers.shallowClone(a || {}),
	      leafLevel = false,
	      k,
	      i;

	  COMMANDS.forEach(function(c) {
	    if (c in b) {
	      o = only(c, b[c]);
	      leafLevel = true;
	    }
	  });

	  if (b.$chain) {

	    if (o.$apply)
	      o.$apply = helpers.compose(o.$apply, b.$chain);
	    else
	      o.$apply = b.$chain;

	    o = only('$apply', o.$apply);
	    leafLevel = true;
	  }

	  if (b.$merge) {
	    o.$merge = helpers.shallowMerge(o.$merge || {}, b.$merge);
	    leafLevel = true;
	  }

	  if (b.$splice || b.$splice) {
	    o.$splice = [].concat(o.$splice || []).concat(b.$splice || []);
	    leafLevel = true;
	  }

	  if (b.$push || o.$push) {
	    o.$push = [].concat(o.$push || []).concat(b.$push || []);
	    leafLevel = true;
	  }

	  if (b.$unshift || o.$unshift) {
	    o.$unshift = [].concat(b.$unshift || []).concat(o.$unshift || []);
	    leafLevel = true;
	  }

	  if (leafLevel)
	    return o;

	  for (k in o) {
	    if (k.charAt(0) === '$')
	      delete o[k];
	  }

	  for (k in b) {
	    if (type.Object(b[k]))
	      o[k] = merge(o[k], b[k]);
	  }

	  return o;
	}

	module.exports = merge;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Baobab Default Options
	 * =======================
	 *
	 */
	module.exports = {

	  // Should the tree handle its transactions on its own?
	  autoCommit: true,

	  // Should the transactions be handled asynchronously?
	  asynchronous: true,

	  // Facets registration
	  facets: {},

	  // Validation specifications
	  validate: null,

	  // Validation behaviour 'rollback' or 'notify'
	  validationBehavior: 'rollback'
	};


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Baobab Type Checking
	 * =====================
	 *
	 * Misc helpers functions used throughout the library to perform some type
	 * tests at runtime.
	 *
	 * @christianalfoni
	 */
	var type = {};

	/**
	 * Helpers
	 */
	function anyOf(value, allowed) {
	  return allowed.some(function(t) {
	    return type[t](value);
	  });
	}

	/**
	 * Simple types
	 */
	type.Array = function(value) {
	  return Array.isArray(value);
	};

	type.Object = function(value) {
	  return value &&
	         typeof value === 'object' &&
	         !Array.isArray(value) &&
	         !(value instanceof Function);
	};

	type.String = function(value) {
	  return typeof value === 'string';
	};

	type.Number = function(value) {
	  return typeof value === 'number';
	};

	type.PositiveInteger = function(value) {
	  return typeof value === 'number' && value > 0 && value % 1 === 0;
	};

	type.Function = function(value) {
	  return typeof value === 'function';
	};

	type.Primitive = function(value) {
	  return !value ||
	         typeof value === 'string' ||
	         typeof value === 'number' ||
	         typeof value === 'boolean';
	};

	type.Date = function(value) {
	  return value instanceof Date;
	};

	/**
	 * Complex types
	 */
	type.NonScalar = function(value) {
	  return type.Object(value) || type.Array(value);
	};

	type.Splicer = function(value) {
	  return type.Array(value) &&
	         value.every(type.Array);
	};

	type.Path = function(value, allowed) {
	  allowed = allowed || ['String', 'Number', 'Function', 'Object'];

	  if (type.Array(value)) {
	    return value.every(function(step) {
	      return anyOf(step, allowed);
	    });
	  }
	  else {
	    return anyOf(value, allowed);
	  }
	};

	type.ComplexPath = function(value) {
	  return value.some(function(step) {
	    return anyOf(step, ['Object', 'Function']);
	  });
	};

	type.FacetCursors = function(value) {
	  if (!type.Object(value))
	    return false;

	  return Object.keys(value).every(function(k) {
	    var v = value[k];

	    return type.Path(v, ['String', 'Number', 'Object']) ||
	           v instanceof __webpack_require__(93);
	  });
	};

	type.FacetFacets = function(value) {
	  if (!type.Object(value))
	    return false;

	  return Object.keys(value).every(function(k) {
	    var v = value[k];

	    return typeof v === 'string' ||
	           v instanceof __webpack_require__(94);
	  });
	};

	module.exports = type;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Baobab-React Type Checking
	 * ===========================
	 *
	 * Some helpers to perform runtime validations.
	 */
	'use strict';

	var type = {};

	type.Object = function (value) {
	  return value && typeof value === 'object' && !Array.isArray(value) && !(value instanceof Function);
	};

	type.Baobab = function (value) {
	  return value && typeof value.toString === 'function' && value.toString() === '[object Baobab]';
	};

	type.Cursor = function (value) {
	  return value && typeof value.toString === 'function' && value.toString() === '[object Cursor]';
	};

	module.exports = type;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(110);

	var PropagationPhases = keyMirror({bubbled: null, captured: null});

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(77);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactFragment
	*/

	'use strict';

	var ReactElement = __webpack_require__(61);

	var warning = __webpack_require__(80);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is opaque, for now.
	 */

	if ("production" !== process.env.NODE_ENV) {
	  var fragmentKey = '_reactFragment';
	  var didWarnKey = '_reactDidWarn';
	  var canWarnForReactFragment = false;

	  try {
	    // Feature test. Don't even try to issue this warning if we can't use
	    // enumerable: false.

	    var dummy = function() {
	      return 1;
	    };

	    Object.defineProperty(
	      {},
	      fragmentKey,
	      {enumerable: false, value: true}
	    );

	    Object.defineProperty(
	      {},
	      'key',
	      {enumerable: true, get: dummy}
	    );

	    canWarnForReactFragment = true;
	  } catch (x) { }

	  var proxyPropertyAccessWithWarning = function(obj, key) {
	    Object.defineProperty(obj, key, {
	      enumerable: true,
	      get: function() {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an opaque type. Accessing any of its ' +
	          'properties is deprecated. Pass it to one of the React.Children ' +
	          'helpers.'
	        ) : null);
	        this[didWarnKey] = true;
	        return this[fragmentKey][key];
	      },
	      set: function(value) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an immutable opaque type. Mutating its ' +
	          'properties is deprecated.'
	        ) : null);
	        this[didWarnKey] = true;
	        this[fragmentKey][key] = value;
	      }
	    });
	  };

	  var issuedWarnings = {};

	  var didWarnForFragment = function(fragment) {
	    // We use the keys and the type of the value as a heuristic to dedupe the
	    // warning to avoid spamming too much.
	    var fragmentCacheKey = '';
	    for (var key in fragment) {
	      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
	    }
	    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
	    issuedWarnings[fragmentCacheKey] = true;
	    return alreadyWarnedOnce;
	  };
	}

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function(object) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof object !== 'object' || !object || Array.isArray(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment only accepts a single object.',
	          object
	        ) : null);
	        return object;
	      }
	      if (ReactElement.isValidElement(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment does not accept a ReactElement ' +
	          'without a wrapper object.'
	        ) : null);
	        return object;
	      }
	      if (canWarnForReactFragment) {
	        var proxy = {};
	        Object.defineProperty(proxy, fragmentKey, {
	          enumerable: false,
	          value: object
	        });
	        Object.defineProperty(proxy, didWarnKey, {
	          writable: true,
	          enumerable: false,
	          value: false
	        });
	        for (var key in object) {
	          proxyPropertyAccessWithWarning(proxy, key);
	        }
	        Object.preventExtensions(proxy);
	        return proxy;
	      }
	    }
	    return object;
	  },
	  // Extract the original keyed object from the fragment opaque type. Warn if
	  // a plain object is passed here.
	  extract: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        if (!fragment[fragmentKey]) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnForFragment(fragment),
	            'Any use of a keyed object should be wrapped in ' +
	            'React.addons.createFragment(object) before being passed as a ' +
	            'child.'
	          ) : null);
	          return fragment;
	        }
	        return fragment[fragmentKey];
	      }
	    }
	    return fragment;
	  },
	  // Check if this is a fragment and if so, extract the keyed object. If it
	  // is a fragment-like object, warn that it should be wrapped. Ignore if we
	  // can't determine what kind of object this is.
	  extractIfFragment: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        // If it is the opaque type, return the keyed object.
	        if (fragment[fragmentKey]) {
	          return fragment[fragmentKey];
	        }
	        // Otherwise, check each property if it has an element, if it does
	        // it is probably meant as a fragment, so we can warn early. Defer,
	        // the warning to extract.
	        for (var key in fragment) {
	          if (fragment.hasOwnProperty(key) &&
	              ReactElement.isValidElement(fragment[key])) {
	            // This looks like a fragment object, we should provide an
	            // early warning.
	            return ReactFragment.extract(fragment);
	          }
	        }
	      }
	    }
	    return fragment;
	  }
	};

	module.exports = ReactFragment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactElement = __webpack_require__(61);
	var ReactFragment = __webpack_require__(102);
	var ReactInstanceHandles = __webpack_require__(66);

	var getIteratorFn = __webpack_require__(114);
	var invariant = __webpack_require__(77);
	var warning = __webpack_require__(80);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(
	  children,
	  nameSoFar,
	  indexSoFar,
	  callback,
	  traverseContext
	) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null ||
	      type === 'string' ||
	      type === 'number' ||
	      ReactElement.isValidElement(children)) {
	    callback(
	      traverseContext,
	      children,
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows.
	      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
	      indexSoFar
	    );
	    return 1;
	  }

	  var child, nextName, nextIndex;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = (
	        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	        getComponentKey(child, i)
	      );
	      nextIndex = indexSoFar + subtreeCount;
	      subtreeCount += traverseAllChildrenImpl(
	        child,
	        nextName,
	        nextIndex,
	        callback,
	        traverseContext
	      );
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            getComponentKey(child, ii++)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      } else {
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnAboutMaps,
	            'Using Maps as children is not yet fully supported. It is an ' +
	            'experimental feature that might be removed. Convert it to a ' +
	            'sequence / iterable of keyed ReactElements instead.'
	          ) : null);
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = (
	              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
	              getComponentKey(child, 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              child,
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    } else if (type === 'object') {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        children.nodeType !== 1,
	        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	        'elements are not valid children of React components.'
	      ) : invariant(children.nodeType !== 1));
	      var fragment = ReactFragment.extract(children);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          child = fragment[key];
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            wrapUserProvidedKey(key) + SUBSEPARATOR +
	            getComponentKey(child, 0)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}

	module.exports = traverseAllChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactLifeCycle = __webpack_require__(107);
	var ReactCurrentOwner = __webpack_require__(60);
	var ReactElement = __webpack_require__(61);
	var ReactInstanceMap = __webpack_require__(106);
	var ReactUpdates = __webpack_require__(152);

	var assign = __webpack_require__(72);
	var invariant = __webpack_require__(77);
	var warning = __webpack_require__(80);

	function enqueueUpdate(internalInstance) {
	  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
	    // If we're in a componentWillMount handler, don't enqueue a rerender
	    // because ReactUpdates assumes we're in a browser context (which is
	    // wrong for server rendering) and we're about to do a render anyway.
	    // See bug in #1740.
	    ReactUpdates.enqueueUpdate(internalInstance);
	  }
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    '%s(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.',
	    callerName
	  ) : invariant(ReactCurrentOwner.current == null));

	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ("production" !== process.env.NODE_ENV) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !callerName,
	        '%s(...): Can only update a mounted or mounting component. ' +
	        'This usually means you called %s() on an unmounted ' +
	        'component. This is a no-op.',
	        callerName,
	        callerName
	      ) : null);
	    }
	    return null;
	  }

	  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
	    return null;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function(publicInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance ||
	        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function(internalInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'forceUpdate'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    var queue =
	      internalInstance._pendingStateQueue ||
	      (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'setProps(...): You called `setProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    var props = assign({}, element.props, partialProps);
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'replaceProps(...): You called `replaceProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	"use strict";

	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};

	module.exports = ReactErrorUtils;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function(key) {
	    return key._reactInternalInstance;
	  },

	  has: function(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function(key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLifeCycle
	 */

	'use strict';

	/**
	 * This module manages the bookkeeping when a component is in the process
	 * of being mounted or being unmounted. This is used as a way to enforce
	 * invariants (or warnings) when it is not recommended to call
	 * setState/forceUpdate.
	 *
	 * currentlyMountingInstance: During the construction phase, it is not possible
	 * to trigger an update since the instance is not fully mounted yet. However, we
	 * currently allow this as a convenience for mutating the initial state.
	 *
	 * currentlyUnmountingInstance: During the unmounting phase, the instance is
	 * still mounted and can therefore schedule an update. However, this is not
	 * recommended and probably an error since it's about to be unmounted.
	 * Therefore we still want to trigger in an error for that case.
	 */

	var ReactLifeCycle = {
	  currentlyMountingInstance: null,
	  currentlyUnmountingInstance: null
	};

	module.exports = ReactLifeCycle;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(110);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(77);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};


	module.exports = keyOf;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	"use strict";

	var emptyObject = {};

	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(72);
	var invariant = __webpack_require__(77);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  },
	  // Temporary hack since we expect DOM refs to behave like composites,
	  // for this release.
	  injectAutoWrapper: function(wrapperFactory) {
	    autoGenerateWrapperClass = wrapperFactory;
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    genericComponentClass,
	    'There is no registered component for the tag %s',
	    element.type
	  ) : invariant(genericComponentClass));
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (
	    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
	  );
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(148);

	var quoteAttributeValueForBrowser = __webpack_require__(167);
	var warning = __webpack_require__(80);

	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}

	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property %s. Did you mean %s?',
	      name,
	      standardName
	    ) : null);

	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
	      quoteAttributeValueForBrowser(id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return attributeName;
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	/*jslint evil: true */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(132);
	var ReactMount = __webpack_require__(67);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates:
	    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID:
	    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(168);
	var DOMProperty = __webpack_require__(148);
	var DOMPropertyOperations = __webpack_require__(116);
	var ReactBrowserEventEmitter = __webpack_require__(149);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(117);
	var ReactMount = __webpack_require__(67);
	var ReactMultiChild = __webpack_require__(169);
	var ReactPerf = __webpack_require__(68);

	var assign = __webpack_require__(72);
	var escapeTextContentForBrowser = __webpack_require__(119);
	var invariant = __webpack_require__(77);
	var isEventSupported = __webpack_require__(170);
	var keyOf = __webpack_require__(111);
	var warning = __webpack_require__(80);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};

	var STYLE = keyOf({style: null});

	var ELEMENT_NODE_TYPE = 1;

	/**
	 * Optionally injectable operations for mutating the DOM
	 */
	var BackendIDOperations = null;

	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (props.dangerouslySetInnerHTML != null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.children == null,
	      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	    ) : invariant(props.children == null));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof props.dangerouslySetInnerHTML === 'object' &&
	      '__html' in props.dangerouslySetInnerHTML,
	      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
	      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
	      'for more information.'
	    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
	    '__html' in props.dangerouslySetInnerHTML));
	  }
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      props.innerHTML == null,
	      'Directly setting property `innerHTML` is not permitted. ' +
	      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
	    ) : null);
	    ("production" !== process.env.NODE_ENV ? warning(
	      !props.contentEditable || props.children == null,
	      'A component is `contentEditable` and contains `children` managed by ' +
	      'React. It is now your responsibility to guarantee that none of ' +
	      'those nodes are unexpectedly modified or duplicated. This is ' +
	      'probably not intentional.'
	    ) : null);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
	    'using JSX.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}

	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    ("production" !== process.env.NODE_ENV ? warning(
	      registrationName !== 'onScroll' || isEventSupported('scroll', true),
	      'This browser doesn\'t support the `onScroll` event'
	    ) : null);
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this._renderedChildren = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function(element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} The computed markup.
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    assertValidProps(this._currentElement.props);
	    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	    return (
	      this._createOpenTagMarkupAndPutListeners(transaction) +
	      this._createContentMarkup(transaction, context) +
	      closeTag
	    );
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this._currentElement.props;
	    var ret = '<' + this._tag;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction, context) {
	    var prefix = '';
	    if (this._tag === 'listing' ||
	        this._tag === 'pre' ||
	        this._tag === 'textarea') {
	      // Add an initial newline because browsers ignore the first newline in
	      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
	      prefix = '\n';
	    }

	    var props = this._currentElement.props;

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return prefix + innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        return prefix + escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction,
	          context
	        );
	        return prefix + mountImages.join('');
	      }
	    }
	    return prefix;
	  },

	  receiveComponent: function(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(transaction, prevElement, nextElement, context) {
	    assertValidProps(this._currentElement.props);
	    this._updateDOMProperties(prevElement.props, transaction);
	    this._updateDOMChildren(prevElement.props, transaction, context);
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this._currentElement.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ?
	        this._previousStyleCopy :
	        lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction, context) {
	    var nextProps = this._currentElement.props;

	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(
	  ReactDOMComponent.prototype,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin
	);

	ReactDOMComponent.injection = {
	  injectIDOperations: function(IDOperations) {
	    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
	  }
	};

	module.exports = ReactDOMComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);
	var EventPropagators = __webpack_require__(171);
	var ExecutionEnvironment = __webpack_require__(75);
	var FallbackCompositionState = __webpack_require__(172);
	var SyntheticCompositionEvent = __webpack_require__(173);
	var SyntheticInputEvent = __webpack_require__(174);

	var keyOf = __webpack_require__(111);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !documentMode &&
	  !isPresto()
	);

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = (
	  ExecutionEnvironment.canUseDOM &&
	  (
	    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
	  )
	);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}


	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(
	    eventType,
	    topLevelTargetID,
	    nativeEvent
	  );

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (
	      topLevelType === topLevelTypes.topCompositionEnd ||
	      isFallbackCompositionEnd(topLevelType, nativeEvent)
	    ) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(
	    eventTypes.beforeInput,
	    topLevelTargetID,
	    nativeEvent
	  );

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID,
	    nativeEvent
	  ) {
	    return [
	      extractCompositionEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      ),
	      extractBeforeInputEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      )
	    ];
	  }
	};

	module.exports = BeforeInputEventPlugin;


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);
	var EventPluginHub = __webpack_require__(175);
	var EventPropagators = __webpack_require__(171);
	var ExecutionEnvironment = __webpack_require__(75);
	var ReactUpdates = __webpack_require__(152);
	var SyntheticEvent = __webpack_require__(176);

	var isEventSupported = __webpack_require__(170);
	var isTextInputElement = __webpack_require__(177);
	var keyOf = __webpack_require__(111);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    (!('documentMode' in document) || document.documentMode > 8)
	  );
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}


	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    (!('documentMode' in document) || document.documentMode > 9)
	  );
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}


	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}

	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }

	};

	module.exports = ChangeEventPlugin;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(111);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];

	module.exports = DefaultEventPluginOrder;


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);
	var EventPropagators = __webpack_require__(171);
	var SyntheticMouseEvent = __webpack_require__(178);

	var ReactMount = __webpack_require__(67);
	var keyOf = __webpack_require__(111);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';

	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(148);
	var ExecutionEnvironment = __webpack_require__(75);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}


	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // property is supported for OpenGraph in meta tags.
	    property: null,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);

	var emptyFunction = __webpack_require__(158);

	var topLevelTypes = EventConstants.topLevelTypes;

	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {

	  eventTypes: null,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }

	};

	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var findDOMNode = __webpack_require__(73);

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(152);
	var Transaction = __webpack_require__(179);

	var assign = __webpack_require__(72);
	var emptyFunction = __webpack_require__(158);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b, c, d) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d);
	    } else {
	      transaction.perform(callback, null, a, b, c, d);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(180);
	var ReactBrowserComponentMixin = __webpack_require__(127);
	var ReactClass = __webpack_require__(58);
	var ReactElement = __webpack_require__(61);

	var keyMirror = __webpack_require__(110);

	var button = ReactElement.createFactory('button');

	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactClass.createClass({
	  displayName: 'ReactDOMButton',
	  tagName: 'BUTTON',

	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

	  render: function() {
	    var props = {};

	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }

	    return button(props, this.props.children);
	  }

	});

	module.exports = ReactDOMButton;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);
	var LocalEventTrapMixin = __webpack_require__(181);
	var ReactBrowserComponentMixin = __webpack_require__(127);
	var ReactClass = __webpack_require__(58);
	var ReactElement = __webpack_require__(61);

	var form = ReactElement.createFactory('form');

	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactClass.createClass({
	  displayName: 'ReactDOMForm',
	  tagName: 'FORM',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});

	module.exports = ReactDOMForm;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);
	var LocalEventTrapMixin = __webpack_require__(181);
	var ReactBrowserComponentMixin = __webpack_require__(127);
	var ReactClass = __webpack_require__(58);
	var ReactElement = __webpack_require__(61);

	var img = ReactElement.createFactory('img');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactClass.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return img(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});

	module.exports = ReactDOMImg;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	/*jslint evil: true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(168);
	var DOMChildrenOperations = __webpack_require__(182);
	var DOMPropertyOperations = __webpack_require__(116);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(68);

	var invariant = __webpack_require__(77);
	var setInnerHTML = __webpack_require__(156);

	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactDOMComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	    DOMPropertyOperations.deleteValueForProperty(node, name, value);
	  },

	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: function(id, styles) {
	    var node = ReactMount.getNode(id);
	    CSSPropertyOperations.setValueForStyles(node, styles);
	  },

	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: function(id, html) {
	    var node = ReactMount.getNode(id);
	    setInnerHTML(node, html);
	  },

	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: function(id, content) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.updateTextContent(node, content);
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  updatePropertyByID: 'updatePropertyByID',
	  deletePropertyByID: 'deletePropertyByID',
	  updateStylesByID: 'updateStylesByID',
	  updateInnerHTMLByID: 'updateInnerHTMLByID',
	  updateTextContentByID: 'updateTextContentByID',
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIframe
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);
	var LocalEventTrapMixin = __webpack_require__(181);
	var ReactBrowserComponentMixin = __webpack_require__(127);
	var ReactClass = __webpack_require__(58);
	var ReactElement = __webpack_require__(61);

	var iframe = ReactElement.createFactory('iframe');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <iframe> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <iframe> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMIframe = ReactClass.createClass({
	  displayName: 'ReactDOMIframe',
	  tagName: 'IFRAME',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return iframe(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	  }
	});

	module.exports = ReactDOMIframe;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(180);
	var DOMPropertyOperations = __webpack_require__(116);
	var LinkedValueUtils = __webpack_require__(183);
	var ReactBrowserComponentMixin = __webpack_require__(127);
	var ReactClass = __webpack_require__(58);
	var ReactElement = __webpack_require__(61);
	var ReactMount = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(152);

	var assign = __webpack_require__(72);
	var invariant = __webpack_require__(77);

	var input = ReactElement.createFactory('input');

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactClass.createClass({
	  displayName: 'ReactDOMInput',
	  tagName: 'INPUT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.defaultChecked = null;
	    props.defaultValue = null;

	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;

	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;

	    props.onChange = this._handleChange;

	    return input(props, this.props.children);
	  },

	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },

	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }

	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);

	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;

	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }

	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }

	    return returnValue;
	  }

	});

	module.exports = ReactDOMInput;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactBrowserComponentMixin = __webpack_require__(127);
	var ReactClass = __webpack_require__(58);
	var ReactElement = __webpack_require__(61);

	var warning = __webpack_require__(80);

	var option = ReactElement.createFactory('option');

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactClass.createClass({
	  displayName: 'ReactDOMOption',
	  tagName: 'OPTION',

	  mixins: [ReactBrowserComponentMixin],

	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },

	  render: function() {
	    return option(this.props, this.props.children);
	  }

	});

	module.exports = ReactDOMOption;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(180);
	var LinkedValueUtils = __webpack_require__(183);
	var ReactBrowserComponentMixin = __webpack_require__(127);
	var ReactClass = __webpack_require__(58);
	var ReactElement = __webpack_require__(61);
	var ReactUpdates = __webpack_require__(152);

	var assign = __webpack_require__(72);

	var select = ReactElement.createFactory('select');

	function updateOptionsIfPendingUpdateAndMounted() {
	  /*jshint validthis:true */
	  if (this._pendingUpdate) {
	    this._pendingUpdate = false;
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null && this.isMounted()) {
	      updateOptions(this, value);
	    }
	  }
	}

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return null;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}

	/**
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var selectedValue, i, l;
	  var options = component.getDOMNode().options;

	  if (component.props.multiple) {
	    selectedValue = {};
	    for (i = 0, l = propValue.length; i < l; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0, l = options.length; i < l; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0, l = options.length; i < l; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactClass.createClass({
	  displayName: 'ReactDOMSelect',
	  tagName: 'SELECT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.onChange = this._handleChange;
	    props.value = null;

	    return select(props, this.props.children);
	  },

	  componentWillMount: function() {
	    this._pendingUpdate = false;
	  },

	  componentDidMount: function() {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      updateOptions(this, value);
	    } else if (this.props.defaultValue != null) {
	      updateOptions(this, this.props.defaultValue);
	    }
	  },

	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      this._pendingUpdate = false;
	      updateOptions(this, value);
	    } else if (!prevProps.multiple !== !this.props.multiple) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (this.props.defaultValue != null) {
	        updateOptions(this, this.props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(this, this.props.multiple ? [] : '');
	      }
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }

	    this._pendingUpdate = true;
	    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMSelect;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(180);
	var DOMPropertyOperations = __webpack_require__(116);
	var LinkedValueUtils = __webpack_require__(183);
	var ReactBrowserComponentMixin = __webpack_require__(127);
	var ReactClass = __webpack_require__(58);
	var ReactElement = __webpack_require__(61);
	var ReactUpdates = __webpack_require__(152);

	var assign = __webpack_require__(72);
	var invariant = __webpack_require__(77);

	var warning = __webpack_require__(80);

	var textarea = ReactElement.createFactory('textarea');

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactClass.createClass({
	  displayName: 'ReactDOMTextarea',
	  tagName: 'TEXTAREA',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));

	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMTextarea;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(184);
	var ExecutionEnvironment = __webpack_require__(75);
	var PooledClass = __webpack_require__(101);
	var ReactInstanceHandles = __webpack_require__(66);
	var ReactMount = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(152);

	var assign = __webpack_require__(72);
	var getEventTarget = __webpack_require__(185);
	var getUnboundedScrollPosition = __webpack_require__(186);

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);

	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },


	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(148);
	var EventPluginHub = __webpack_require__(175);
	var ReactComponentEnvironment = __webpack_require__(187);
	var ReactClass = __webpack_require__(58);
	var ReactEmptyComponent = __webpack_require__(150);
	var ReactBrowserEventEmitter = __webpack_require__(149);
	var ReactNativeComponent = __webpack_require__(113);
	var ReactDOMComponent = __webpack_require__(118);
	var ReactPerf = __webpack_require__(68);
	var ReactRootIndex = __webpack_require__(147);
	var ReactUpdates = __webpack_require__(152);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMComponent: ReactDOMComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(188);
	var PooledClass = __webpack_require__(101);
	var ReactBrowserEventEmitter = __webpack_require__(149);
	var ReactInputSelection = __webpack_require__(189);
	var ReactPutListenerQueue = __webpack_require__(190);
	var Transaction = __webpack_require__(179);

	var assign = __webpack_require__(72);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);
	var EventPropagators = __webpack_require__(171);
	var ReactInputSelection = __webpack_require__(189);
	var SyntheticEvent = __webpack_require__(176);

	var getActiveElement = __webpack_require__(191);
	var isTextInputElement = __webpack_require__(177);
	var keyOf = __webpack_require__(111);
	var shallowEqual = __webpack_require__(192);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};

	module.exports = SelectEventPlugin;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);
	var EventPluginUtils = __webpack_require__(55);
	var EventPropagators = __webpack_require__(171);
	var SyntheticClipboardEvent = __webpack_require__(193);
	var SyntheticEvent = __webpack_require__(176);
	var SyntheticFocusEvent = __webpack_require__(194);
	var SyntheticKeyboardEvent = __webpack_require__(195);
	var SyntheticMouseEvent = __webpack_require__(178);
	var SyntheticDragEvent = __webpack_require__(196);
	var SyntheticTouchEvent = __webpack_require__(197);
	var SyntheticUIEvent = __webpack_require__(198);
	var SyntheticWheelEvent = __webpack_require__(199);

	var getEventCharCode = __webpack_require__(200);

	var invariant = __webpack_require__(77);
	var keyOf = __webpack_require__(111);
	var warning = __webpack_require__(80);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);

	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = SimpleEventPlugin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(148);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};

	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */

	'use strict';

	// Defeat circular references by requiring this directly.
	var ReactClass = __webpack_require__(58);
	var ReactElement = __webpack_require__(61);

	var invariant = __webpack_require__(77);

	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);

	  var FullPageComponent = ReactClass.createClass({
	    tagName: tag.toUpperCase(),
	    displayName: 'ReactFullPageComponent' + tag,

	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },

	    render: function() {
	      return elementFactory(this.props);
	    }
	  });

	  return FullPageComponent;
	}

	module.exports = createFullPageComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(148);
	var ReactDefaultPerfAnalysis = __webpack_require__(201);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(68);

	var performanceNow = __webpack_require__(202);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' ||
	          moduleName === 'ReactDOMIDOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        (// TODO: receiveComponent()?
	        (fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

	        if (typeof this._currentElement.type === 'string') {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ?
	            this._currentElement._owner.getName() :
	            '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	/*jslint bitwise: true */

	'use strict';

	var invariant = __webpack_require__(77);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }

	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

	      DOMProperty.isStandardName[propName] = true;

	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }

	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }

	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},

	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},

	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},

	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},

	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},

	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},

	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},

	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},

	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},

	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},

	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);
	var EventPluginHub = __webpack_require__(175);
	var EventPluginRegistry = __webpack_require__(203);
	var ReactEventEmitterMixin = __webpack_require__(204);
	var ViewportMetrics = __webpack_require__(205);

	var assign = __webpack_require__(72);
	var isEventSupported = __webpack_require__(170);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
	    );
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            (isListening.hasOwnProperty(dependency) && isListening[dependency])
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(61);
	var ReactInstanceMap = __webpack_require__(106);

	var invariant = __webpack_require__(77);

	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};

	var ReactEmptyComponentType = function() {};
	ReactEmptyComponentType.prototype.componentDidMount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Make sure we run these methods in the correct order, we shouldn't
	  // need this check. We're going to assume if we're here it means we ran
	  // componentWillUnmount already so there is no internal instance (it gets
	  // removed as part of the unmounting process).
	  if (!internalInstance) {
	    return;
	  }
	  registerNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.componentWillUnmount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Get rid of this check. See TODO in componentDidMount.
	  if (!internalInstance) {
	    return;
	  }
	  deregisterNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.render = function() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	};

	var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponent = {
	  emptyElement: emptyElement,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID
	};

	module.exports = ReactEmptyComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(206);

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(188);
	var PooledClass = __webpack_require__(101);
	var ReactCurrentOwner = __webpack_require__(60);
	var ReactPerf = __webpack_require__(68);
	var ReactReconciler = __webpack_require__(70);
	var Transaction = __webpack_require__(179);

	var assign = __webpack_require__(72);
	var invariant = __webpack_require__(77);
	var warning = __webpack_require__(80);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}

	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}

	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(
	      component,
	      transaction.reconcileTransaction
	    );

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(
	          callbacks[j],
	          component.getPublicInstance()
	        );
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  flushBatchedUpdates
	);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(207);

	/*jslint bitwise:true */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */

	'use strict';

	var DOC_NODE_TYPE = 9;

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	module.exports = getReactRootElementInContainer;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(208);
	var ReactEmptyComponent = __webpack_require__(150);
	var ReactNativeComponent = __webpack_require__(113);

	var assign = __webpack_require__(72);
	var invariant = __webpack_require__(77);
	var warning = __webpack_require__(80);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function() { };
	assign(
	  ReactCompositeComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin,
	  {
	    _instantiateReactComponent: instantiateReactComponent
	  }
	);

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return (
	    typeof type === 'function' &&
	    typeof type.prototype !== 'undefined' &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function'
	  );
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, parentCompositeType) {
	  var instance;

	  if (node === null || node === false) {
	    node = ReactEmptyComponent.emptyElement;
	  }

	  if (typeof node === 'object') {
	    var element = node;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        element && (typeof element.type === 'function' ||
	                    typeof element.type === 'string'),
	        'Only functions or strings can be mounted as React components.'
	      ) : null);
	    }

	    // Special case string values
	    if (parentCompositeType === element.type &&
	        typeof element.type === 'string') {
	      // Avoid recursion if the wrapper renders itself.
	      instance = ReactNativeComponent.createInternalComponent(element);
	      // All native components are currently wrapped in a composite so we're
	      // safe to assume that this is what we should instantiate.
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // represenations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'Encountered invalid React node of type %s',
	      typeof node
	    ) : invariant(false));
	  }

	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function' &&
	      typeof instance.unmountComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if ("production" !== process.env.NODE_ENV) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ("production" !== process.env.NODE_ENV) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(75);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function(node, html) {
	    MSApp.execUnsafeLocalFunction(function() {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var warning = __webpack_require__(80);

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement != null && nextElement != null) {
	    var prevType = typeof prevElement;
	    var nextType = typeof nextElement;
	    if (prevType === 'string' || prevType === 'number') {
	      return (nextType === 'string' || nextType === 'number');
	    } else {
	      if (nextType === 'object' &&
	          prevElement.type === nextElement.type &&
	          prevElement.key === nextElement.key) {
	        var ownersMatch = prevElement._owner === nextElement._owner;
	        var prevName = null;
	        var nextName = null;
	        var nextDisplayName = null;
	        if ("production" !== process.env.NODE_ENV) {
	          if (!ownersMatch) {
	            if (prevElement._owner != null &&
	                prevElement._owner.getPublicInstance() != null &&
	                prevElement._owner.getPublicInstance().constructor != null) {
	              prevName =
	                prevElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement._owner != null &&
	                nextElement._owner.getPublicInstance() != null &&
	                nextElement._owner.getPublicInstance().constructor != null) {
	              nextName =
	                nextElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement.type != null &&
	                nextElement.type.displayName != null) {
	              nextDisplayName = nextElement.type.displayName;
	            }
	            if (nextElement.type != null && typeof nextElement.type === 'string') {
	              nextDisplayName = nextElement.type;
	            }
	            if (typeof nextElement.type !== 'string' ||
	                nextElement.type === 'input' ||
	                nextElement.type === 'textarea') {
	              if ((prevElement._owner != null &&
	                  prevElement._owner._isOwnerNecessary === false) ||
	                  (nextElement._owner != null &&
	                  nextElement._owner._isOwnerNecessary === false)) {
	                if (prevElement._owner != null) {
	                  prevElement._owner._isOwnerNecessary = true;
	                }
	                if (nextElement._owner != null) {
	                  nextElement._owner._isOwnerNecessary = true;
	                }
	                ("production" !== process.env.NODE_ENV ? warning(
	                  false,
	                  '<%s /> is being rendered by both %s and %s using the same ' +
	                  'key (%s) in the same place. Currently, this means that ' +
	                  'they don\'t preserve state. This behavior should be very ' +
	                  'rare so we\'re considering deprecating it. Please contact ' +
	                  'the React team and explain your use case so that we can ' +
	                  'take that into consideration.',
	                  nextDisplayName || 'Unknown Component',
	                  prevName || '[Unknown]',
	                  nextName || '[Unknown]',
	                  prevElement.key
	                ) : null);
	              }
	            }
	          }
	        }
	        return ownersMatch;
	      }
	    }
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };

	module.exports = emptyFunction;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(209);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  return (
	    nextElement._owner !== prevElement._owner ||
	    nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(101);
	var CallbackQueue = __webpack_require__(188);
	var ReactPutListenerQueue = __webpack_require__(190);
	var Transaction = __webpack_require__(179);

	var assign = __webpack_require__(72);
	var emptyFunction = __webpack_require__(158);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
	    typeof object.nodeType === 'number' &&
	    typeof object.nodeName === 'string'))
	  ));
	}

	module.exports = isNode;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(77);
	var canUseDOM = __webpack_require__(75).canUseDOM;

	/**
	 * Returns the current scroll position of the window as { x, y }.
	 */
	function getWindowScrollPosition() {
	  invariant(canUseDOM, 'Cannot get current scroll position without a DOM');

	  return {
	    x: window.pageXOffset || document.documentElement.scrollLeft,
	    y: window.pageYOffset || document.documentElement.scrollTop
	  };
	}

	module.exports = getWindowScrollPosition;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(211);


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	(function() {
	  'use strict';

	  /**
	   * Here is the list of every allowed parameter when using Emitter#on:
	   * @type {Object}
	   */
	  var __allowedOptions = {
	    once: 'boolean',
	    scope: 'object'
	  };

	  /**
	   * Incremental id used to order event handlers.
	   */
	  var __order = 0;

	  /**
	   * A simple helper to shallowly merge two objects. The second one will "win"
	   * over the first one.
	   *
	   * @param  {object}  o1 First target object.
	   * @param  {object}  o2 Second target object.
	   * @return {object}     Returns the merged object.
	   */
	  function shallowMerge(o1, o2) {
	    var o = {},
	        k;

	    for (k in o1) o[k] = o1[k];
	    for (k in o2) o[k] = o2[k];

	    return o;
	  }

	  /**
	   * Is the given variable a plain JavaScript object?
	   *
	   * @param  {mixed}  v   Target.
	   * @return {boolean}    The boolean result.
	   */
	  function isPlainObject(v) {
	    return v &&
	           typeof v === 'object' &&
	           !Array.isArray(v) &&
	           !(v instanceof Function) &&
	           !(v instanceof RegExp);
	  }

	  /**
	   * The emitter's constructor. It initializes the handlers-per-events store and
	   * the global handlers store.
	   *
	   * Emitters are useful for non-DOM events communication. Read its methods
	   * documentation for more information about how it works.
	   *
	   * @return {Emitter}         The fresh new instance.
	   */
	  var Emitter = function() {
	    this._enabled = true;

	    // Dirty trick that will set the necessary properties to the emitter
	    this.unbindAll();
	  };

	  /**
	   * This method unbinds every handlers attached to every or any events. So,
	   * these functions will no more be executed when the related events are
	   * emitted. If the functions were not bound to the events, nothing will
	   * happen, and no error will be thrown.
	   *
	   * Usage:
	   * ******
	   * > myEmitter.unbindAll();
	   *
	   * @return {Emitter}      Returns this.
	   */
	  Emitter.prototype.unbindAll = function() {

	    this._handlers = {};
	    this._handlersAll = [];
	    this._handlersComplex = [];

	    return this;
	  };


	  /**
	   * This method binds one or more functions to the emitter, handled to one or a
	   * suite of events. So, these functions will be executed anytime one related
	   * event is emitted.
	   *
	   * It is also possible to bind a function to any emitted event by not
	   * specifying any event to bind the function to.
	   *
	   * Recognized options:
	   * *******************
	   *  - {?boolean} once   If true, the handlers will be unbound after the first
	   *                      execution. Default value: false.
	   *  - {?object}  scope  If a scope is given, then the listeners will be called
	   *                      with this scope as "this".
	   *
	   * Variant 1:
	   * **********
	   * > myEmitter.on('myEvent', function(e) { console.log(e); });
	   * > // Or:
	   * > myEmitter.on('myEvent', function(e) { console.log(e); }, { once: true });
	   *
	   * @param  {string}   event   The event to listen to.
	   * @param  {function} handler The function to bind.
	   * @param  {?object}  options Eventually some options.
	   * @return {Emitter}          Returns this.
	   *
	   * Variant 2:
	   * **********
	   * > myEmitter.on(
	   * >   ['myEvent1', 'myEvent2'],
	   * >   function(e) { console.log(e); }
	   * >);
	   * > // Or:
	   * > myEmitter.on(
	   * >   ['myEvent1', 'myEvent2'],
	   * >   function(e) { console.log(e); }
	   * >   { once: true }}
	   * >);
	   *
	   * @param  {array}    events  The events to listen to.
	   * @param  {function} handler The function to bind.
	   * @param  {?object}  options Eventually some options.
	   * @return {Emitter}          Returns this.
	   *
	   * Variant 3:
	   * **********
	   * > myEmitter.on({
	   * >   myEvent1: function(e) { console.log(e); },
	   * >   myEvent2: function(e) { console.log(e); }
	   * > });
	   * > // Or:
	   * > myEmitter.on({
	   * >   myEvent1: function(e) { console.log(e); },
	   * >   myEvent2: function(e) { console.log(e); }
	   * > }, { once: true });
	   *
	   * @param  {object}  bindings An object containing pairs event / function.
	   * @param  {?object}  options Eventually some options.
	   * @return {Emitter}          Returns this.
	   *
	   * Variant 4:
	   * **********
	   * > myEmitter.on(function(e) { console.log(e); });
	   * > // Or:
	   * > myEmitter.on(function(e) { console.log(e); }, { once: true});
	   *
	   * @param  {function} handler The function to bind to every events.
	   * @param  {?object}  options Eventually some options.
	   * @return {Emitter}          Returns this.
	   */
	  Emitter.prototype.on = function(a, b, c) {
	    var i,
	        l,
	        k,
	        event,
	        eArray,
	        handlersList,
	        bindingObject;

	    // Variant 3
	    if (isPlainObject(a)) {
	      for (event in a)
	        this.on(event, a[event], b);
	      return this;
	    }

	    // Variant 1, 2 and 4
	    if (typeof a === 'function') {
	      c = b;
	      b = a;
	      a = null;
	    }

	    eArray = [].concat(a);

	    for (i = 0, l = eArray.length; i < l; i++) {
	      event = eArray[i];

	      bindingObject = {
	        order: __order++,
	        fn: b
	      };

	      // Defining the list in which the handler should be inserted
	      if (typeof event === 'string') {
	        if (!this._handlers[event])
	          this._handlers[event] = [];
	        handlersList = this._handlers[event];
	      }
	      else if (event instanceof RegExp) {
	        handlersList = this._handlersComplex;
	        bindingObject.pattern = event;
	      }
	      else if (event === null) {
	        handlersList = this._handlersAll;
	      }
	      else {
	        throw Error('Emitter.on: invalid event.');
	      }

	      // Appending needed properties
	      for (k in c || {})
	        if (__allowedOptions[k])
	          bindingObject[k] = c[k];

	      if (bindingObject.once)
	        bindingObject.parent = handlersList;

	      handlersList.push(bindingObject);
	    }

	    return this;
	  };


	  /**
	   * This method works exactly as the previous #on, but will add an options
	   * object if none is given, and set the option "once" to true.
	   *
	   * The polymorphism works exactly as with the #on method.
	   */
	  Emitter.prototype.once = function() {
	    var args = Array.prototype.slice.call(arguments),
	        li = args.length - 1;

	    if (isPlainObject(args[li]) && args.length > 1)
	      args[li] = shallowMerge(args[li], {once: true});
	    else
	      args.push({once: true});

	    return this.on.apply(this, args);
	  };


	  /**
	   * This method unbinds one or more functions from events of the emitter. So,
	   * these functions will no more be executed when the related events are
	   * emitted. If the functions were not bound to the events, nothing will
	   * happen, and no error will be thrown.
	   *
	   * Variant 1:
	   * **********
	   * > myEmitter.off('myEvent', myHandler);
	   *
	   * @param  {string}   event   The event to unbind the handler from.
	   * @param  {function} handler The function to unbind.
	   * @return {Emitter}          Returns this.
	   *
	   * Variant 2:
	   * **********
	   * > myEmitter.off(['myEvent1', 'myEvent2'], myHandler);
	   *
	   * @param  {array}    events  The events to unbind the handler from.
	   * @param  {function} handler The function to unbind.
	   * @return {Emitter}          Returns this.
	   *
	   * Variant 3:
	   * **********
	   * > myEmitter.off({
	   * >   myEvent1: myHandler1,
	   * >   myEvent2: myHandler2
	   * > });
	   *
	   * @param  {object} bindings An object containing pairs event / function.
	   * @return {Emitter}         Returns this.
	   *
	   * Variant 4:
	   * **********
	   * > myEmitter.off(myHandler);
	   *
	   * @param  {function} handler The function to unbind from every events.
	   * @return {Emitter}          Returns this.
	   *
	   * Variant 5:
	   * **********
	   * > myEmitter.off(event);
	   *
	   * @param  {string} event     The event we should unbind.
	   * @return {Emitter}          Returns this.
	   */
	  function filter(target, fn) {
	    target = target || [];

	    var a = [],
	        l,
	        i;

	    for (i = 0, l = target.length; i < l; i++)
	      if (target[i].fn !== fn)
	        a.push(target[i]);

	    return a;
	  }

	  Emitter.prototype.off = function(events, fn) {
	    var i,
	        n,
	        j,
	        m,
	        k,
	        a,
	        event;

	    // Variant 4:
	    if (arguments.length === 1 && typeof events === 'function') {
	      fn = arguments[0];

	      // Handlers bound to events:
	      for (k in this._handlers) {
	        this._handlers[k] = filter(this._handlers[k], fn);

	        if (this._handlers[k].length === 0)
	          delete this._handlers[k];
	      }

	      // Generic Handlers
	      this._handlersAll = filter(this._handlersAll, fn);

	      // Complex handlers
	      this._handlersComplex = filter(this._handlersComplex, fn);
	    }

	    // Variant 5
	    else if (arguments.length === 1 && typeof events === 'string') {
	      delete this._handlers[events];
	    }

	    // Variant 1 and 2:
	    else if (arguments.length === 2) {
	      var eArray = [].concat(events);

	      for (i = 0, n = eArray.length; i < n; i++) {
	        event = eArray[i];

	        this._handlers[event] = filter(this._handlers[event], fn);

	        if ((this._handlers[event] || []).length === 0)
	          delete this._handlers[event];
	      }
	    }

	    // Variant 3
	    else if (isPlainObject(events)) {
	      for (k in events)
	        this.off(k, events[k]);
	    }

	    return this;
	  };

	  /**
	   * This method retrieve the listeners attached to a particular event.
	   *
	   * @param  {?string}    Name of the event.
	   * @return {array}      Array of handler functions.
	   */
	  Emitter.prototype.listeners = function(event) {
	    var handlers = this._handlersAll || [],
	        complex = false,
	        h,
	        i,
	        l;

	    if (!event)
	      throw Error('Emitter.listeners: no event provided.');

	    handlers = handlers.concat(this._handlers[event] || []);

	    for (i = 0, l = this._handlersComplex.length; i < l; i++) {
	      h = this._handlersComplex[i];

	      if (~event.search(h.pattern)) {
	        complex = true;
	        handlers.push(h);
	      }
	    }

	    // If we have any complex handlers, we need to sort
	    if (this._handlersAll.length || complex)
	      return handlers.sort(function(a, b) {
	        return a.order - b.order;
	      });
	    else
	      return handlers.slice(0);
	  };

	  /**
	   * This method emits the specified event(s), and executes every handlers bound
	   * to the event(s).
	   *
	   * Use cases:
	   * **********
	   * > myEmitter.emit('myEvent');
	   * > myEmitter.emit('myEvent', myData);
	   * > myEmitter.emit(['myEvent1', 'myEvent2']);
	   * > myEmitter.emit(['myEvent1', 'myEvent2'], myData);
	   * > myEmitter.emit({myEvent1: myData1, myEvent2: myData2});
	   *
	   * @param  {string|array} events The event(s) to emit.
	   * @param  {object?}      data   The data.
	   * @return {Emitter}             Returns this.
	   */
	  Emitter.prototype.emit = function(events, data) {

	    // Short exit if the emitter is disabled
	    if (!this._enabled)
	      return this;

	    // Object variant
	    if (isPlainObject(events)) {

	      for (var k in events)
	        this.emit(k, events[k]);

	      return this;
	    }

	    var eArray = [].concat(events),
	        onces = [],
	        event,
	        handlers,
	        handler,
	        i,
	        j,
	        l,
	        m;

	    for (i = 0, l = eArray.length; i < l; i++) {
	      handlers = this.listeners(eArray[i]);

	      for (j = 0, m = handlers.length; j < m; j++) {
	        handler = handlers[j];
	        event = {
	          type: eArray[i],
	          target: this
	        };

	        if (arguments.length > 1)
	          event.data = data;

	        handler.fn.call('scope' in handler ? handler.scope : this, event);

	        if (handler.once)
	          onces.push(handler);
	      }

	      // Cleaning onces
	      for (j = onces.length - 1; j >= 0; j--)
	        onces[j].parent.splice(onces[j].parent.indexOf(onces[j]), 1);
	    }

	    return this;
	  };


	  /**
	   * This method will unbind all listeners and make it impossible to ever
	   * rebind any listener to any event.
	   */
	  Emitter.prototype.kill = function() {

	    this.unbindAll();
	    this._handlers = null;
	    this._handlersAll = null;
	    this._handlersComplex = null;
	    this._enabled = false;
	  };


	  /**
	   * This method disabled the emitter, which means its emit method will do
	   * nothing.
	   *
	   * @return {Emitter} Returns this.
	   */
	  Emitter.prototype.disable = function() {
	    this._enabled = false;

	    return this;
	  };


	  /**
	   * This method enables the emitter.
	   *
	   * @return {Emitter} Returns this.
	   */
	  Emitter.prototype.enable = function() {
	    this._enabled = true;

	    return this;
	  };


	  /**
	   * Version:
	   */
	  Emitter.version = '3.0.0';


	  // Export:
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports)
	      exports = module.exports = Emitter;
	    exports.Emitter = Emitter;
	  } else if (typeof define === 'function' && define.amd)
	    define('emmett', [], function() {
	      return Emitter;
	    });
	  else
	    this.Emitter = Emitter;
	}).call(this);


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(119);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(212);
	var ExecutionEnvironment = __webpack_require__(75);

	var camelizeStyleName = __webpack_require__(213);
	var dangerousStyleValue = __webpack_require__(214);
	var hyphenateStyleName = __webpack_require__(215);
	var memoizeStringOnly = __webpack_require__(216);
	var warning = __webpack_require__(80);

	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});

	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if ("production" !== process.env.NODE_ENV) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property %s. Did you mean %s?',
	      name,
	      camelizeStyleName(name)
	    ) : null);
	  };

	  var warnBadVendoredStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
	      name,
	      name.charAt(0).toUpperCase() + name.slice(1)
	    ) : null);
	  };

	  var warnStyleValueWithSemicolon = function(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Style property values shouldn\'t contain a semicolon. ' +
	      'Try "%s: %s" instead.',
	      name,
	      value.replace(badStyleValueWithSemicolonPattern, '')
	    ) : null);
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(187);
	var ReactMultiChildUpdateTypes = __webpack_require__(217);

	var ReactReconciler = __webpack_require__(70);
	var ReactChildReconciler = __webpack_require__(218);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction, context) {
	      var children = ReactChildReconciler.instantiateChildren(
	        nestedChildren, transaction, context
	      );
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(
	            child,
	            rootID,
	            transaction,
	            context
	          );
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }

	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = ReactChildReconciler.updateChildren(
	        prevChildren, nextNestedChildren, transaction, context
	      );
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(
	            nextChild, name, nextIndex, transaction, context
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(
	      child,
	      name,
	      index,
	      transaction,
	      context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(
	        child,
	        rootID,
	        transaction,
	        context
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(75);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(100);
	var EventPluginHub = __webpack_require__(175);

	var accumulateInto = __webpack_require__(220);
	var forEachAccumulated = __webpack_require__(221);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}


	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}


	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}



	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(101);

	var assign = __webpack_require__(72);
	var getTextContentAccessor = __webpack_require__(219);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(176);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);

	module.exports = SyntheticCompositionEvent;


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(176);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);

	module.exports = SyntheticInputEvent;


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(203);
	var EventPluginUtils = __webpack_require__(55);

	var accumulateInto = __webpack_require__(220);
	var forEachAccumulated = __webpack_require__(221);
	var invariant = __webpack_require__(77);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid =
	    InstanceHandle &&
	    InstanceHandle.traverseTwoPhase &&
	    InstanceHandle.traverseEnterLeave;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    valid,
	    'InstanceHandle not injected before use!'
	  ) : invariant(valid));
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));

	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },

	  __getListenerBank: function() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(101);

	var assign = __webpack_require__(72);
	var emptyFunction = __webpack_require__(158);
	var getEventTarget = __webpack_require__(185);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

	module.exports = SyntheticEvent;


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
	  );
	}

	module.exports = isTextInputElement;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(198);
	var ViewportMetrics = __webpack_require__(205);

	var getEventModifierState = __webpack_require__(222);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(77);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */

	'use strict';

	var focusNode = __webpack_require__(223);

	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};

	module.exports = AutoFocusMixin;


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */

	'use strict';

	var ReactBrowserEventEmitter = __webpack_require__(149);

	var accumulateInto = __webpack_require__(220);
	var forEachAccumulated = __webpack_require__(221);
	var invariant = __webpack_require__(77);

	function remove(event) {
	  event.remove();
	}

	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    // If a component renders to null or if another component fatals and causes
	    // the state of the tree to be corrupted, `node` here can be null.
	    var node = this.getDOMNode();
	    ("production" !== process.env.NODE_ENV ? invariant(
	      node,
	      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
	    ) : invariant(node));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      node
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },

	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.

	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};

	module.exports = LocalEventTrapMixin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(224);
	var ReactMultiChildUpdateTypes = __webpack_require__(217);

	var setTextContent = __webpack_require__(225);
	var invariant = __webpack_require__(77);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(69);

	var invariant = __webpack_require__(77);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}

	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}

	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}

	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};

	module.exports = LinkedValueUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(158);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },

	  registerDefault: function() {}
	};

	module.exports = EventListener;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	"use strict";

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(77);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function(environment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactCompositeComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      ReactComponentEnvironment.unmountIDFromEnvironment =
	        environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID =
	        environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates =
	        environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(101);

	var assign = __webpack_require__(72);
	var invariant = __webpack_require__(77);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        'Mismatched list of contexts in callback queue'
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(226);

	var containsNode = __webpack_require__(153);
	var focusNode = __webpack_require__(223);
	var getActiveElement = __webpack_require__(191);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
	    );
	  },

	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || {start: 0, end: 0};
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(101);
	var ReactBrowserEventEmitter = __webpack_require__(149);

	var assign = __webpack_require__(72);

	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}

	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },

	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },

	  reset: function() {
	    this.listenersToPut.length = 0;
	  },

	  destructor: function() {
	    this.reset();
	  }
	});

	PooledClass.addPoolingTo(ReactPutListenerQueue);

	module.exports = ReactPutListenerQueue;


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	'use strict';

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(176);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(198);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(198);

	var getEventCharCode = __webpack_require__(200);
	var getEventKey = __webpack_require__(227);
	var getEventModifierState = __webpack_require__(222);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(178);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(198);

	var getEventModifierState = __webpack_require__(222);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(176);

	var getEventTarget = __webpack_require__(185);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(178);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	var assign = __webpack_require__(72);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;

	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	var performance = __webpack_require__(228);

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}

	var performanceNow = performance.now.bind(performance);

	module.exports = performanceNow;


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(77);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(175);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );

	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	/* jslint bitwise:true */

	'use strict';

	var MOD = 65521;

	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}

	module.exports = adler32;


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	var isNode = __webpack_require__(161);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(187);
	var ReactContext = __webpack_require__(59);
	var ReactCurrentOwner = __webpack_require__(60);
	var ReactElement = __webpack_require__(61);
	var ReactElementValidator = __webpack_require__(62);
	var ReactInstanceMap = __webpack_require__(106);
	var ReactLifeCycle = __webpack_require__(107);
	var ReactNativeComponent = __webpack_require__(113);
	var ReactPerf = __webpack_require__(68);
	var ReactPropTypeLocations = __webpack_require__(108);
	var ReactPropTypeLocationNames = __webpack_require__(109);
	var ReactReconciler = __webpack_require__(70);
	var ReactUpdates = __webpack_require__(152);

	var assign = __webpack_require__(72);
	var emptyObject = __webpack_require__(112);
	var invariant = __webpack_require__(77);
	var shouldUpdateReactComponent = __webpack_require__(157);
	var warning = __webpack_require__(80);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._isTopLevel = false;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(this._currentElement._context);

	    var Component = ReactNativeComponent.getComponentClassForElement(
	      this._currentElement
	    );

	    // Initialize the public class
	    var inst = new Component(publicProps, publicContext);

	    if ("production" !== process.env.NODE_ENV) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      ("production" !== process.env.NODE_ENV ? warning(
	        inst.render != null,
	        '%s(...): No `render` method found on the returned component ' +
	        'instance: you may have forgotten to define `render` in your ' +
	        'component or you may have accidentally tried to render an element ' +
	        'whose type is a function that isn\'t a React component.',
	        Component.displayName || Component.name || 'Component'
	      ) : null);
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if ("production" !== process.env.NODE_ENV) {
	      this._warnIfContextsDiffer(this._currentElement._context, context);
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getInitialState ||
	        inst.getInitialState.isReactClassApproved,
	        'getInitialState was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Did you mean to define a state property instead?',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getDefaultProps ||
	        inst.getDefaultProps.isReactClassApproved,
	        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Use a static property to define defaultProps instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.propTypes,
	        'propTypes was defined as an instance property on %s. Use a static ' +
	        'property to define propTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.contextTypes,
	        'contextTypes was defined as an instance property on %s. Use a ' +
	        'static property to define contextTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof inst.componentShouldUpdate !== 'function',
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        (this.getName() || 'A component')
	      ) : null);
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof initialState === 'object' && !Array.isArray(initialState),
	      '%s.state: must be set to an object or null',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var childContext;
	    var renderedElement;

	    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
	    ReactLifeCycle.currentlyMountingInstance = this;
	    try {
	      if (inst.componentWillMount) {
	        inst.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingStateQueue` without triggering a re-render.
	        if (this._pendingStateQueue) {
	          inst.state = this._processPendingState(inst.props, inst.context);
	        }
	      }

	      childContext = this._getValidatedChildContext(context);
	      renderedElement = this._renderValidatedComponent(childContext);
	    } finally {
	      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
	    }

	    this._renderedComponent = this._instantiateReactComponent(
	      renderedElement,
	      this._currentElement.type // The wrapping type
	    );

	    var markup = ReactReconciler.mountComponent(
	      this._renderedComponent,
	      rootID,
	      transaction,
	      this._mergeChildContext(context, childContext)
	    );
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
	      ReactLifeCycle.currentlyUnmountingInstance = this;
	      try {
	        inst.componentWillUnmount();
	      } finally {
	        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
	      }
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;

	    // Reset pending fields
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Schedule a partial update to the props. Only used for internal testing.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @internal
	   */
	  _setPropsInternal: function(partialProps, callback) {
	    // This is a deoptimized path. We optimize for always having an element.
	    // This creates an extra internal element.
	    var element = this._pendingElement || this._currentElement;
	    this._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      assign({}, element.props, partialProps)
	    );
	    ReactUpdates.enqueueUpdate(this, callback);
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function(context) {
	    var maskedContext = null;
	    // This really should be getting the component class for the element,
	    // but we know that we're not going to need it for built-ins.
	    if (typeof this._currentElement.type === 'string') {
	      return emptyObject;
	    }
	    var contextTypes = this._currentElement.type.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = this._maskContext(context);
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.contextTypes) {
	        this._checkPropTypes(
	          Component.contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _getValidatedChildContext: function(currentContext) {
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof inst.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        this.getName() || 'ReactCompositeComponent'
	      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          inst.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in inst.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          this.getName() || 'ReactCompositeComponent',
	          name
	        ) : invariant(name in inst.constructor.childContextTypes));
	      }
	      return childContext;
	    }
	    return null;
	  },

	  _mergeChildContext: function(currentContext, childContext) {
	    if (childContext) {
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.propTypes) {
	        this._checkPropTypes(
	          Component.propTypes,
	          newProps,
	          ReactPropTypeLocations.prop
	        );
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          ("production" !== process.env.NODE_ENV ? invariant(
	            typeof propTypes[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually ' +
	            'from React.PropTypes.',
	            componentName || 'React class',
	            ReactPropTypeLocationNames[location],
	            propName
	          ) : invariant(typeof propTypes[propName] === 'function'));
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // React.render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Composite propType: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          } else {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Context Types: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(
	      transaction,
	      prevElement,
	      nextElement,
	      prevContext,
	      nextContext
	    );
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(
	        this,
	        this._pendingElement || this._currentElement,
	        transaction,
	        this._context
	      );
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      if ("production" !== process.env.NODE_ENV) {
	        ReactElementValidator.checkAndWarnForMutatedProps(
	          this._currentElement
	        );
	      }

	      this.updateComponent(
	        transaction,
	        this._currentElement,
	        this._currentElement,
	        this._context,
	        this._context
	      );
	    }
	  },

	  /**
	   * Compare two contexts, warning if they are different
	   * TODO: Remove this check when owner-context is removed
	   */
	   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
	    ownerBasedContext = this._maskContext(ownerBasedContext);
	    parentBasedContext = this._maskContext(parentBasedContext);
	    var parentKeys = Object.keys(parentBasedContext).sort();
	    var displayName = this.getName() || 'ReactCompositeComponent';
	    for (var i = 0; i < parentKeys.length; i++) {
	      var key = parentKeys[i];
	      ("production" !== process.env.NODE_ENV ? warning(
	        ownerBasedContext[key] === parentBasedContext[key],
	        'owner-based and parent-based contexts differ '  +
	        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
	        '(see: http://fb.me/react-context-by-parent)',
	        ownerBasedContext[key],
	        parentBasedContext[key],
	        key,
	        displayName
	      ) : null);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(
	    transaction,
	    prevParentElement,
	    nextParentElement,
	    prevUnmaskedContext,
	    nextUnmaskedContext
	  ) {
	    var inst = this._instance;

	    var nextContext = inst.context;
	    var nextProps = inst.props;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement !== nextParentElement) {
	      nextContext = this._processContext(nextParentElement._context);
	      nextProps = this._processProps(nextParentElement.props);

	      if ("production" !== process.env.NODE_ENV) {
	        if (nextUnmaskedContext != null) {
	          this._warnIfContextsDiffer(
	            nextParentElement._context,
	            nextUnmaskedContext
	          );
	        }
	      }

	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !inst.shouldComponentUpdate ||
	      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof shouldUpdate !== 'undefined',
	        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
	        'boolean value. Make sure to return true or false.',
	        this.getName() || 'ReactCompositeComponent'
	      ) : null);
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextParentElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction,
	        nextUnmaskedContext
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(
	        nextState,
	        typeof partial === 'function' ?
	          partial.call(inst, nextState, props, context) :
	          partial
	      );
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction,
	    unmaskedContext
	  ) {
	    var inst = this._instance;

	    var prevProps = inst.props;
	    var prevState = inst.state;
	    var prevContext = inst.context;

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (inst.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
	        inst
	      );
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var childContext = this._getValidatedChildContext();
	    var nextRenderedElement = this._renderValidatedComponent(childContext);
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(
	        prevComponentInstance,
	        nextRenderedElement,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(
	        nextRenderedElement,
	        this._currentElement.type
	      );
	      var nextMarkup = ReactReconciler.mountComponent(
	        this._renderedComponent,
	        thisID,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(
	      prevComponentID,
	      nextMarkup
	    );
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if ("production" !== process.env.NODE_ENV) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' &&
	          inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function(childContext) {
	    var renderedComponent;
	    var previousContext = ReactContext.current;
	    ReactContext.current = this._mergeChildContext(
	      this._currentElement._context,
	      childContext
	    );
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent =
	        this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactContext.current = previousContext;
	      ReactCurrentOwner.current = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      // TODO: An `isValidNode` function would probably be more appropriate
	      renderedComponent === null || renderedComponent === false ||
	      ReactElement.isValidElement(renderedComponent),
	      '%s.render(): A valid ReactComponent must be returned. You may have ' +
	        'returned undefined, an array or some other invalid object.',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false ||
	    ReactElement.isValidElement(renderedComponent)));
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function(ref, component) {
	    var inst = this.getPublicInstance();
	    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
	    refs[ref] = component.getPublicInstance();
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return (
	      type.displayName || (constructor && constructor.displayName) ||
	      type.name || (constructor && constructor.name) ||
	      null
	    );
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by React.render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function() {
	    return this._instance;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(
	  ReactCompositeComponentMixin,
	  'ReactCompositeComponent',
	  {
	    mountComponent: 'mountComponent',
	    updateComponent: 'updateComponent',
	    _renderValidatedComponent: '_renderValidatedComponent'
	  }
	);

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(77);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      (object &&
	      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
	    );
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2015 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/

	function classNames() {
		var classes = '';
		var arg;

		for (var i = 0; i < arguments.length; i++) {
			arg = arguments[i];
			if (!arg) {
				continue;
			}

			if ('string' === typeof arg || 'number' === typeof arg) {
				classes += ' ' + arg;
			} else if (Object.prototype.toString.call(arg) === '[object Array]') {
				classes += ' ' + classNames.apply(null, arg);
			} else if ('object' === typeof arg) {
				for (var key in arg) {
					if (!arg.hasOwnProperty(key) || !arg[key]) {
						continue;
					}
					classes += ' ' + key;
				}
			}
		}
		return classes.substr(1);
	}

	// safely export classNames for node / browserify
	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	}

	// safely export classNames for RequireJS
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return classNames;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Stringify = __webpack_require__(229);
	var Parse = __webpack_require__(230);


	// Declare internals

	var internals = {};


	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	"use strict";

	var camelize = __webpack_require__(231);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(212);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	"use strict";

	var hyphenate = __webpack_require__(232);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(110);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(70);

	var flattenChildren = __webpack_require__(233);
	var instantiateReactComponent = __webpack_require__(155);
	var shouldUpdateReactComponent = __webpack_require__(157);

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {

	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function(nestedChildNodes, transaction, context) {
	    var children = flattenChildren(nestedChildNodes);
	    for (var name in children) {
	      if (children.hasOwnProperty(name)) {
	        var child = children[name];
	        // The rendered children must be turned into instances as they're
	        // mounted.
	        var childInstance = instantiateReactComponent(child, null);
	        children[name] = childInstance;
	      }
	    }
	    return children;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextNestedChildNodes Nested child maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function(
	    prevChildren,
	    nextNestedChildNodes,
	    transaction,
	    context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    var nextChildren = flattenChildren(nextNestedChildNodes);
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(
	          prevChild, nextElement, transaction, context
	        );
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(
	          nextElement,
	          null
	        );
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) &&
	          !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function(renderedChildren) {
	    for (var name in renderedChildren) {
	      var renderedChild = renderedChildren[name];
	      ReactReconciler.unmountComponent(renderedChild);
	    }
	  }

	};

	module.exports = ReactChildReconciler;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(75);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(77);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	"use strict";

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}

	module.exports = focusNode;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	/*jslint evil: true, sub: true */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(75);

	var createNodesFromMarkup = __webpack_require__(234);
	var emptyFunction = __webpack_require__(158);
	var getMarkupWrap = __webpack_require__(235);
	var invariant = __webpack_require__(77);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;

	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            'Danger: Discarding unexpected node:',
	            renderNode
	          );
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));

	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See React.renderToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(75);
	var escapeTextContentForBrowser = __webpack_require__(119);
	var setInnerHTML = __webpack_require__(156);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function(node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(75);

	var getNodeForCharacterOffset = __webpack_require__(236);
	var getTextContentAccessor = __webpack_require__(219);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = (
	  ExecutionEnvironment.canUseDOM &&
	  'selection' in document &&
	  !('getSelection' in window)
	);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(200);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(75);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}

	module.exports = performance || {};


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(237);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    arrayPrefixGenerators: {
	        brackets: function (prefix, key) {
	            return prefix + '[]';
	        },
	        indices: function (prefix, key) {
	            return prefix + '[' + key + ']';
	        },
	        repeat: function (prefix, key) {
	            return prefix;
	        }
	    }
	};


	internals.stringify = function (obj, prefix, generateArrayPrefix) {

	    if (Utils.isBuffer(obj)) {
	        obj = obj.toString();
	    }
	    else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    }
	    else if (obj === null) {
	        obj = '';
	    }

	    if (typeof obj === 'string' ||
	        typeof obj === 'number' ||
	        typeof obj === 'boolean') {

	        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        if (Array.isArray(obj)) {
	            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix));
	        }
	        else {
	            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix));
	        }
	    }

	    return values;
	};


	module.exports = function (obj, options) {

	    options = options || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;

	    var keys = [];

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return '';
	    }

	    var arrayFormat;
	    if (options.arrayFormat in internals.arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    }
	    else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    }
	    else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix));
	    }

	    return keys.join(delimiter);
	};


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(237);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000
	};


	internals.parseValues = function (str, options) {

	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

	    for (var i = 0, il = parts.length; i < il; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

	        if (pos === -1) {
	            obj[Utils.decode(part)] = '';
	        }
	        else {
	            var key = Utils.decode(part.slice(0, pos));
	            var val = Utils.decode(part.slice(pos + 1));

	            if (Object.prototype.hasOwnProperty(key)) {
	                continue;
	            }

	            if (!obj.hasOwnProperty(key)) {
	                obj[key] = val;
	            }
	            else {
	                obj[key] = [].concat(obj[key]).concat(val);
	            }
	        }
	    }

	    return obj;
	};


	internals.parseObject = function (chain, val, options) {

	    if (!chain.length) {
	        return val;
	    }

	    var root = chain.shift();

	    var obj = {};
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(internals.parseObject(chain, val, options));
	    }
	    else {
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        var indexString = '' + index;
	        if (!isNaN(index) &&
	            root !== cleanRoot &&
	            indexString === cleanRoot &&
	            index >= 0 &&
	            index <= options.arrayLimit) {

	            obj = [];
	            obj[index] = internals.parseObject(chain, val, options);
	        }
	        else {
	            obj[cleanRoot] = internals.parseObject(chain, val, options);
	        }
	    }

	    return obj;
	};


	internals.parseKeys = function (key, val, options) {

	    if (!key) {
	        return;
	    }

	    // The regex chunks

	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;

	    // Get the parent

	    var segment = parent.exec(key);

	    // Don't allow them to overwrite object prototype properties

	    if (Object.prototype.hasOwnProperty(segment[1])) {
	        return;
	    }

	    // Stash the parent if it exists

	    var keys = [];
	    if (segment[1]) {
	        keys.push(segment[1]);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {

	        ++i;
	        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
	            keys.push(segment[1]);
	        }
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return internals.parseObject(keys, val, options);
	};


	module.exports = function (str, options) {

	    if (str === '' ||
	        str === null ||
	        typeof str === 'undefined') {

	        return {};
	    }

	    options = options || {};
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

	    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
	    var obj = {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        var newObj = internals.parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj);
	    }

	    return Utils.compact(obj);
	};


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(103);
	var warning = __webpack_require__(80);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'flattenChildren(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*jslint evil: true, sub: true */

	var ExecutionEnvironment = __webpack_require__(75);

	var createArrayFromMixed = __webpack_require__(238);
	var getMarkupWrap = __webpack_require__(235);
	var invariant = __webpack_require__(77);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	var ExecutionEnvironment = __webpack_require__(75);

	var invariant = __webpack_require__(77);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'clipPath': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg>', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap,

	  'circle': svgWrap,
	  'clipPath': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}


	module.exports = getMarkupWrap;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules


	// Declare internals

	var internals = {};


	exports.arrayToObject = function (source) {

	    var obj = {};
	    for (var i = 0, il = source.length; i < il; ++i) {
	        if (typeof source[i] !== 'undefined') {

	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};


	exports.merge = function (target, source) {

	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        }
	        else {
	            target[source] = true;
	        }

	        return target;
	    }

	    if (typeof target !== 'object') {
	        target = [target].concat(source);
	        return target;
	    }

	    if (Array.isArray(target) &&
	        !Array.isArray(source)) {

	        target = exports.arrayToObject(target);
	    }

	    var keys = Object.keys(source);
	    for (var k = 0, kl = keys.length; k < kl; ++k) {
	        var key = keys[k];
	        var value = source[key];

	        if (!target[key]) {
	            target[key] = value;
	        }
	        else {
	            target[key] = exports.merge(target[key], value);
	        }
	    }

	    return target;
	};


	exports.decode = function (str) {

	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};


	exports.compact = function (obj, refs) {

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return obj;
	    }

	    refs = refs || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }

	    refs.push(obj);

	    if (Array.isArray(obj)) {
	        var compacted = [];

	        for (var i = 0, il = obj.length; i < il; ++i) {
	            if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }

	        return compacted;
	    }

	    var keys = Object.keys(obj);
	    for (i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        obj[key] = exports.compact(obj[key], refs);
	    }

	    return obj;
	};


	exports.isRegExp = function (obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};


	exports.isBuffer = function (obj) {

	    if (obj === null ||
	        typeof obj === 'undefined') {

	        return false;
	    }

	    return !!(obj.constructor &&
	        obj.constructor.isBuffer &&
	        obj.constructor.isBuffer(obj));
	};


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	var toArray = __webpack_require__(239);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	var invariant = __webpack_require__(77);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90)))

/***/ }
/******/ ]);